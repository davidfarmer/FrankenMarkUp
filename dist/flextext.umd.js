(function(B,C){typeof exports=="object"&&typeof module<"u"?C(exports):typeof define=="function"&&define.amd?define(["exports"],C):(B=typeof globalThis<"u"?globalThis:B||self,C(B.FlexTeXt={}))})(this,function(B){"use strict";const C=["reading-questions","introduction","conclusion","objectives","statement","task","worksheet","page"],$e=["ol","ul","dl","code","mrow"],et=["li"],xe=["aside","historical","biographical"],le=["algorithm","claim","corollary","fact","identity","lemma","proposition","theorem"],se=["assumption","axiom","conjecture","heuristic","hypothesis","principle"],ke=["convention","insight","note","observation","remark","warning"],Me=["example","problem","question"],Le=["definition"],ee=["exercise"],qe=["proof"],Ae=["activity","exploration","investigation","project"],te=["md","mdn","me","men","smen"],re=["hint","answer","solution"],_e=["case","task"],Ee=["em","term","alert","m","sm","q","c","tag"];[...te];let Te=["section","subsection","worksheet","paragraphs"],Se=[...xe,...le,...se,...ke,...Me,...Le,...ee,...qe,...Ae,...re,"blockquote","sidebyside","li"];const H=[...Te,...Se,...re,..._e,...C],Ne=["figure","table","listing"],Pe=["image","tabular","program"],Re=["latex-image","prefigure","description","caption"],Oe=["figure","table","tabular","ol","ul","dl"],tt=[...le,...se,...ee,"task"],O=["text","p","fn","em","term","alert","q","title","li","caption"],rt=[["equation","men"],["align","mdn"]],U={listing:["caption","program"],figure:["caption","image"],program:["code"],image:["latex-image","description","prefigure"],prefigure:["diagram"],diagram:["predefinition","coordinates","annotations"]},nt=["exercisegroup","exercises","prefigure","diagram",...U.diagram],it=Object.keys(U),ne=["source","ref","width","margins","label","xmlattributes","bbox","dimensions","destination","text","xml:id","xmlns"];let $=[];$.push(["section"]),$.push(["subsection"]),$.push(["worksheet"]),$.push(["page"]),$.push(["paragraphs","objectives"]),$.push(["sidebyside"]),$.push([...Ae]),$.push([...Me,...ee]),$.push(["introduction","conclusion"]),$.push([...le,...se,...ke,...Le]),$.push(["task"]),$.push(["statement"]),$.push([...qe,...re]),$.push([..._e]),$.push([...xe]),$.push([...Ne]),$.push([...Pe]),$.push([...Re]),$.push(["prefigure"]),$.push(["diagram"]),$.push(U.diagram),$.push([...$e]),$.push([...et]),$.push(["blockquote"]),$.push(["p"]),$.push("displaymath"),$.push(["mrow"]);const je=[["extraneous math",te],["workspace",[...ee]],["margins",["worksheet","sidebyside"]],["margin",["worksheet","sidebyside"]],["xmlattributes","all"],["title","all"],["label","all"]];let ot={abstract:["abs","abstr"],acknowledgement:["ack"],assumption:["assu","ass"],axiom:["axm"],blockquote:["quote"],claim:["cla"],conjecture:["con","conj","conjec"],convention:["conv"],corollary:["cor","corr","coro","corol","corss"],definition:["def","defn","dfn","defi","defin","de"],ol:["enum","enuma","enumerit"],example:["exam","exa","eg","exmp","expl","exm"],exercise:["exer","exers"],fn:["footnote"],hypothesis:["hyp"],lemma:["lem","lma","lemm"],notation:["no","nota","ntn","nt","notn","notat"],observation:["obs"],proof:["pf","prf","demo"],proposition:["prop","pro","prp","props"],question:["qu","ques","quest","qsn"],remark:["rem","rmk","rema","bem","subrem","rems","rmks"],theorem:["thm","theo","theor","thmss"],verbatim:["verb"],warning:["warn","wrn"]};const at={"'a":"á","`a":"à",'"a':"ä","^a":"â","~a":"ã","-a":"ā","'A":"Á","`A":"À",'"A':"Ä","^A":"Â","~A":"Ã",cc:"ç",cC:"Ç","'e":"é","`e":"è",'"e':"ë","^e":"ê","-e":"ē","'E":"É","`E":"È",'"E':"Ë","^E":"Ê","-E":"Ē","-g":"ḡ",ug:"ğ",vg:"ǧ","-G":"Ḡ",uG:"Ğ",vG:"Ǧ","'i":"í","`i":"ì",'"i':"ï","^i":"î","-i":"ī","'I":"Í","`I":"Ì",'"I':"Ï","^I":"Î","-I":"Ī","~n":"ñ","~N":"Ñ","'o":"ó","`o":"ò",'"o':"ö","^o":"ô","-o":"ō","~o":"õ",Ho:"ő","'O":"Ó","`O":"Ò",'"O':"Ö","^O":"Ô","-O":"Ō","~O":"Õ",HO:"Ő","'u":"ú","`u":"ù",'"u':"ü","^u":"û","'U":"Ú","`U":"Ù",'"U':"Ü","^U":"Û"};var h={"+":{comment:["¼Ó"],alternative:["plus","¼Ó"],type:"operator",priority:10,rule:{"2,3":"#1 + #3"},ruleML:{"2,3":"#1<mo>+</mo>#3"},speech:{"2,3":"#1 plus #3"}},"-":{comment:["¼õ"],alternative:["minus","subtracts","¼õ"],type:"operator",priority:10,mustHaveLeftArgument:!0,rule:{"2,3":"#1 - #3"},ruleML:{"2,3":"#1<mo>-</mo>#3"},speech:{"2,3":"#1 minus #3"}},"∘":{comment:[],alternative:["of","circ"],type:"operator",priority:10,mustHaveLeftArgument:!0,rule:{"2,3":"#1 \\circ #3"},ruleML:{"2,3":'#1<mo intent="of">∘</mo>#3'},speech:{"2,3":"#1 of #3"}},"⭐":{comment:[],alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 * #3"},ruleML:{"2,3":"#1<mo>∗</mo>#3"},speech:{"2,3":"#1 star #3"}},"😑":{comment:[],alternative:[],type:"function",priority:91,rule:{"1,2":"{-#2}"},ruleML:{"1,2":"<mrow><mo>-</mo>#2</mrow>"},speech:{"1,2":" quantityN negative #2 Nendquantity "}},"⚡":{comment:[],alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 #3"},ruleML:{"2,3":"#1<mo>&ApplyFunction;</mo>#3"},speech:{"2,3":"#1 of #3"}},"*":{comment:["³Ë"],alternative:["multiply","³Ë"],type:"operator",priority:20,rule:{"2,3":"#1 #3"},ruleML:{"2,3":"#1<mo>&InvisibleTimes;</mo>#3"},speech:{"2,3":"#1 times #3"}},"/":{comment:["³ý, ³ýÒÔ"],alternative:["over","divide","³ý","³ýÒÔ"],type:"operator",wrappedarguments:!0,priority:20,rule:{"2,3":"\\frac{#1}{#3}"},offpair:{"2,3":[1,3]},ruleML:{"2,3":"<mfrac><mrow>#1</mrow><mrow>#3</mrow></mfrac>"},speech:{"2,3":"fraction #1 denominator #3 enddenominator"}},"//":{alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 / #3"},speech:{"2,3":" inline fraction #1 over #3 endfraction "},ruleML:{"2,3":"#1<mo>/</mo>#3"}},"=":{comment:["µÈÓÚ"],alternative:["equal","µÈÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 = #3"},ruleML:{"2,3":"#1<mo>=</mo>#3"},speech:{"2,3":"#1 equals #3"}},">=":{comment:["´óÓÚµÈÓÚ"],alternative:["⦊=","ge","geq","´óÓÚµÈÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\geq #3"},ruleML:{"2,3":"#1<mo>≥</mo>#3"},speech:{"2,3":"#1 greater than or equal to #3"}},"<=":{comment:["Ð¡ÓÚµÈÓÚ"],alternative:["⦉=","le","leq","Ð¡ÓÚµÈÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\leq #3"},ruleML:{"2,3":"#1<mo>≤</mo>#3"},speech:{"2,3":"#1 less than or equal to #3"}},"^":{comment:["µ½","ÖÕÖ¹Öµ","´Î·½","ÉÏ±ê"],alternative:["µ½","ÖÕÖ¹Öµ","´Î·½","ÉÏ±ê"],type:"operator",priority:30,script:!0,rule:{"2,3":"#1^{#@3}"},offpair:{"2,3":[3]},ruleML:{"2,3":"<msup><mrow>#1</mrow><mrow>#@3</mrow></msup>"},speech:{"2,3":" quantityV #1 Vendquantity to the quantityE #@3 Eendquantity "}},"▲":{comment:[],alternative:[],type:"operator",priority:30,script:!0,rule:{"2,3":"#1^{#@3}"},offpair:{"2,3":[3]},ruleML:{"2,3":"<msup><mrow>#1</mrow><mrow>#@3</mrow></msup>"},speech:{"2,3":" quantityV #1 Vendquantity derivative quantityE #@3 Eendquantity "}},_:{comment:["´Ó","³õÊ¼Öµ","ÏÂ±ê"],alternative:["´Ó","³õÊ¼Öµ","ÏÂ±ê"],type:"operator",priority:30,script:!0,rule:{"2,3":"#1_{#@3}"},offpair:{"2,3":[3]},ruleML:{"2,3":"<msub><mrow>#1</mrow><mrow>#@3</mrow></msub>"},speech:{"2,3":" quantityX #1 Xendquantity sub quantityY #@3 Yendquantity "}},subsup:{comment:[],alternative:[],type:"operator",priority:30,script:!0,rule:{"2,4":"#1_{#@3}^{#@4}"},offpair:{"2,4":[3,4]},ruleML:{"2,4":"<msubsup><mrow>#1</mrow><mrow>#@3</mrow><mrow>#@4</mrow></msubsup>"},speech:{"2,4":" quantityX #1 Xendquantity sub quantityY #@3 Yendquantity to the quantityZ #@4 Zendquantity"}},"^^":{alternative:[],type:"operator",priority:30,script:!0,rule:{"2,3":"#{}^#@3 #1"},offpair:{"2,3":[3]}},__:{alternative:[],type:"operator",priority:30,script:!0,rule:{"2,3":"#{}_#@3 #1"},offpair:{"2,3":[3]}},"<":{comment:["Ð¡ÓÚ"],alternative:["⦉","less than","Ð¡ÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\lt #3"},ruleML:{"2,3":"#1<mo>&lt;</mo>#3"},speech:{"2,3":"  #1 less than #3 "}},">":{comment:["´óÓÚ"],alternative:["⦊","greater than","´óÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\gt #3"},ruleML:{"2,3":"#1<mo>&gt;</mo>#3"},speech:{"2,3":"  #1 greater than #3 "}},"\n":{alternative:[],type:"relation",priority:-10,rule:{"2,3":`#1 
 #3`}},",":{alternative:[],type:"operator",priority:-10,rule:{"2,3":"#1,#3"},ruleML:{"2,3":"#1<mo>,</mo>#3"},speech:{"2,3":"#1 comma #3"}},"?":{alternative:[],type:"symbol",priority:10,rule:{"2,3":"#1,#3"},ruleML:{"2,3":"#1<mo>,</mo>#3"},speech:{"2,3":"#1 comma #3"}},";":{alternative:[],type:"operator",priority:-10,rule:{"2,3":"#1;#3"}},"|":{alternative:[],type:"operator",priority:-10,rule:{"2,3":"#1 \\mid #3"},speech:{"2,3":"#1 divides #3"},ruleML:{"2,3":'#1<mo intent="divides">|</mo>#3'}},"+-":{comment:["Õý¸º","¼Ó¼õ"],alternative:["plusminus","pm","¼Ó¼õ","Õý¸º"],type:"operator",priority:10,rule:{"2,3":"#1 \\pm #3"},ruleML:{"2,3":"#1<mo>±</mo>#3"},speech:{"2,3":"#1 plus-minus #3"}},"-+":{comment:[],alternative:["minusplus","mp"],type:"operator",priority:10,rule:{"2,3":"#1 \\mp #3"},ruleML:{"2,3":"#1<mo>∓</mo>#3"},speech:{"2,3":"#1 minus-plus #3"}},del:{comment:["Æ«Î¢·Ö"],alternative:["partial","Æ«Î¢·Ö"],type:"symbol",priority:-1,rule:{"1,1":"\\partial"}},grad:{alternative:["nabla"],type:"symbol",priority:-1,rule:{"1,1":"\\nabla"}},"O/":{alternative:["emptyset"],type:"symbol",priority:-1,rule:{"1,1":"\\emptyset"},speech:{"1,1":" empty set "},ruleML:{"1,1":"<mi>∅</mi>"}},infty:{comment:["ÎÞÇî´ó"],alternative:["infinity","oo","ÎÞÇî´ó"],type:"symbol",priority:-1,rule:{"1,1":"\\infty"},speech:{"1,1":" infinity "},ruleML:{"1,1":"<mi>∞</mi>"}},"✂️":{comment:[],alternative:[],type:"symbol",priority:-1,rule:{"1,1":""},speech:{"1,1":""},ruleML:{"1,1":""}},aleph:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\aleph"},speech:{"1,1":" aleph "},ruleML:{"1,1":"<mi>א</mi>"}},backslash:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\backslash "},speech:{"1,1":" backslash "},ruleML:{"1,1":"<mi>\\</mi>"}},"'":{comment:["ËùÒÔ"],alternative:["prime"],type:"symbol",priority:-1,rule:{"1,1":"'"},speech:{"1,1":" prime "},ruleML:{"1,1":"<mo>&#x2032;</mo>"}},":.":{comment:["ËùÒÔ"],alternative:["therefore","thus","hence","ËùÒÔ"],type:"symbol",priority:-1,rule:{"1,1":"\\therefore"}},":'":{comment:["ÒòÎª"],alternative:["because","since","ÒòÎª"],type:"symbol",priority:-1,rule:{"1,1":"\\because"}},"...":{comment:["Ê¡ÂÔºÅ"],alternative:["Ê¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"#comma?[\\ldots&\\cdots]"}},ldots:{comment:["µÍÊ¡ÂÔºÅ"],alternative:["µÍÊ¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\ldots"}},cdots:{comment:["ÖÐÊ¡ÂÔºÅ","ÖÐÐÄÊ¡ÂÔºÅ"],alternative:["ÖÐÊ¡ÂÔºÅ","ÖÐÐÄÊ¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\cdots"}},vdots:{comment:["ÊúÊ¡ÂÔºÅ"],alternative:["ÊúÊ¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\vdots"}},ddots:{comment:["Ð±Ê¡ÂÔºÅ"],alternative:["Ð±Ê¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\ddots"}},frown:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\frown"}},diamond:{comment:["ÁâÐÎ"],alternative:["ÁâÐÎ"],type:"symbol",priority:-1,rule:{"1,1":"\\diamond"}},square:{comment:["·½ÐÎ","Õý·½ÐÎ"],alternative:["·½ÐÎ","Õý·½ÐÎ"],type:"symbol",priority:-1,rule:{"1,1":"\\square"}},CC:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{C}"},speech:{"1,1":" C "},ruleML:{"1,1":"<mi>ℂ</mi>"}},NN:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{N}"},speech:{"1,1":" N "},ruleML:{"1,1":"<mi>ℕ</mi>"}},QQ:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{Q}"},speech:{"1,1":" Q "},ruleML:{"1,1":"<mi>ℚ</mi>"}},RR:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{R}"},speech:{"1,1":" R "},ruleML:{"1,1":"<mi>ℝ</mi>"}},ZZ:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{Z}"},speech:{"1,1":" Z "},ruleML:{"1,1":"<mi>ℤ</mi>"}},sqrt:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\sqrt{#2}"},speech:{"1,2":" square root of quantityZ #2 Zendquantity "},ruleML:{"1,2":"<msqrt><mrow>#2</mrow></msqrt>"}},lim:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\lim_{#2}"},speech:{"1,2":" limit of #2 endlimit "},ruleML:{"1,2":"<munder><mo>lim</mo><mrow>#2</mrow></munder>"}},quote:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\text{ #2 }"},speech:{"1,2":" #2 "},ruleML:{"1,2":'<mspace width="0.5em"></mspace><mtext>#2</mtext><mspace width="0.5em"></mspace>'}},gcd:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\gcd(#2)"},speech:{"1,2":" gcd of quantityZ #2 Zendquantity "},ruleML:{"1,2":"<mi>gcd</mi><mo>&ApplyFunction;</mo>(#2)"}},cardinality:{comment:["»ùÊý"],alternative:["card","»ùÊý"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" cardinality of quantityB #2 Bendquantity "},ruleML:{"1,2":'<mrow intent="cardinality($b)"><mo>|</mo><wrap arg="b">#2</wrap><mo>|</mo></mrow>'}},abs:{comment:["¾ø¶ÔÖµ"],alternative:["absolute","¾ø¶ÔÖµ"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" absolute value of quantityB #2 Bendquantity "},ruleML:{"1,2":'<mrow intent="absolute-value($absb)"><mo>|</mo><mrow arg="absb">#2</mrow><mo>|</mo></mrow>'}},norm:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" norm of quantityB #2 Bendquantity "},ruleML:{"1,2":'<mrow intent="norm($normb)"><mo>|</mo><mrow arg="normb">#2</mrow><mo>|</mo></mrow>'}},det:{comment:["¾ø¶ÔÖµ"],alternative:["determinant"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" determinant of #2 "},ruleML:{"1,2":'<mrow intent="determinant($detb)"><mo>|</mo><wrap arg="detb">#2</wrap><mo>|</mo></mrow>'}},order:{comment:["¾ø¶ÔÖµ"],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" order of #2 "},ruleML:{"1,2":'<mrow intent="order($orderb)"><mo>|</mo><wrap arg="orderb">#2</wrap><mo>|</mo></mrow>'}},span:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\langle #2\\rangle"},speech:{"1,2":" span of #2 "},ruleML:{"1,2":'<mrow intent="span($c)"><mo>⟨</mo><mrow arg="c">#2</mrow><mo>⟩</mo></mrow>'}},vector:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\langle #2\\rangle"},speech:{"1,2":"coordinate vector #2 endvector"},ruleML:{"1,2":'<mrow intent="coordinate-vector($c)"><mo>⟨</mo><mrow arg="c">#2</mrow><mo>⟩</mo></mrow>'}},anglebrackets:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\langle #2\\rangle"},speech:{"1,2":" anglebrackets #2 endanglebrackets "},ruleML:{"1,2":'<mrow intent="angle-brackets($c)"><mo>⟨</mo><mrow arg="c">#2</mrow><mo>⟩</mo></mrow>'}},setof:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\{#2\\}"},speech:{"1,2":"set #2 endset "},ruleML:{"1,2":'<mrow intent="set($d)"><mo>{</mo><mrow arg="d">#2</mrow><mo>}</mo></mrow>'}},floor:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\lfloor #2 \\rfloor"},speech:{"1,2":"floor of #2 endfloor"},ruleML:{"1,2":'<mrow intent="floor($e)"><mo>⌊</mo><mrow arg="e">#2</mrow><mo>⌋</mo></mrow>'}},ceiling:{alternative:["ceil"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\lceiling #2 \\rceiling"}},bigO:{alternative:[],type:"function",priority:15,rule:{"1,2":"O#2"},speech:{"1,2":"big-Oh of #2"},ruleML:{"1,2":'<mi intent="bigO">O</mi><mo>&ApplyFunction;</mo>#2'}},log:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log #2"},speech:{"1,2":"log of #2"},ruleML:{"1,2":"<mi>log</mi><mo>&ApplyFunction;</mo>#2"}},llog:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log_2 #2"},speech:{"1,2":"log log of #2"},ruleML:{"1,2":'<msub><mi>log</mi><mn intent=":index">2</mn></msub><mo>&ApplyFunction;</mo>#2'}},lllog:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log_3 #2"},speech:{"1,2":"log log log of #2"},ruleML:{"1,2":'<msub><mi>log</mi><mn intent=":index">3</mn></msub><mo>&ApplyFunction;</mo>#2'}},baselog:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log"},speech:{"1,2":"log "},ruleML:{"1,2":"log"}},ln:{alternative:["ln"],type:"function",priority:15,rule:{"1,2":"\\ln #2"},speech:{"1,2":"natural log of #2"},ruleML:{"1,2":"<mi>ln</mi><mo>&ApplyFunction;</mo>#2"}},baseln:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\ln"},speech:{"1,2":"natural log "},ruleML:{"1,2":"ln"}},root:{alternative:[],type:"function",priority:55,extraArgument:1,offpair:{"1,3":[2,3]},rule:{"1,3":"\\sqrt[#2]{#3}","1,2":"\\sqrt{#2}"}},frac:{alternative:[],type:"function",priority:20,extraArgument:1,offpair:{"1,3":[2,3]},rule:{"1,3":"\\frac{#2}{#3}","1,2":"\\frac{#2@1}{#2@-1}"}},summm:{comment:["×ÜºÍ","ÇóºÍ"],alternative:["summation","×ÜºÍ","ÇóºÍ"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\sum{#2}"}},fundef:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2\\,:\\, #3 	o #4"},speech:{"1,4":"function #2 from #3 to #4 "},ruleML:{"1,4":"<mrow>#2<mo>:</mo>#3<mo>→</mo>#4</mrow>"}},congruentmod:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2\\equiv #3 \\pmod  #4"},speech:{"1,4":"#2 congruent to #3 modulo #4 "},ruleML:{"1,4":'<mrow>#2<mo>≡</mo>#3<mspace width="0.5em"></mspace><mo>(</mo><mi>mod</mi><mspace width="0.25em"></mspace>#4<mo>)</mo></mrow>'}},notcongruentmod:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2\\not\\equiv #3 \\pmod  #4"},speech:{"1,4":"#2 not congruent to #3 modulo #4 "},ruleML:{"1,4":'<mrow>#2<mo>≢</mo>#3<mspace width="0.5em"></mspace><mo>(</mo><mi>mod</mi><mspace width="0.25em"></mspace>#4<mo>)</mo></mrow>'}},wrapper:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":" #2 "},speech:{"1,2":"#2"},ruleML:{"1,2":"#2"}},opwrap:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2],"1,3":[2]},rule:{"1,2":" #2 ","1,3":" #2{#3}"},speech:{"1,2":"#2","1,3":"#2 #3 "},ruleML:{"1,2":"#2","1,3":"#2<mrow>#3</mrow>"}},limsop:{alternative:[],type:"function",priority:55,offpair:{"1,3":[2,3],"1,4":[1,2,3,4],"1,5":[1,2,3,4,5]},extraArgument:2,rule:{"1,4":"#2_{#3}^{#4}"},speech:{"1,4":" #2 from #3 to #4 "},ruleML:{"1,4":"<munderover>#2<mrow>#3</mrow><mrow>#4</mrow></munderover>"}},llimop:{alternative:[],type:"function",priority:55,offpair:{"1,3":[2,3]},extraArgument:1,rule:{"1,3":"#2_{#3}"},speech:{"1,3":" #2 over #3 "},ruleML:{"1,3":"<munder>#2<mrow>#3</mrow></munder>"}},functionpower:{alternative:[],type:"function",priority:55,offpair:{"1,4":[2,3]},extraArgument:2,rule:{"1,4":"#2^{#3}#4"},speech:{"1,4":" #2 power #3 of quantityF #4 Fendquantity "},ruleML:{"1,4":"<msup><mi>#2</mi><mrow>#3</mrow></msup><mo>&ApplyFunction;</mo>#4"}},functionsubscript:{alternative:[],type:"function",priority:55,offpair:{"1,4":[2,3]},extraArgument:2,rule:{"1,4":"#2_{#3}#4"},speech:{"1,4":" #2 sub #3 of quantityF #4 Fendquantity "},ruleML:{"1,4":"<msub><mi>#2</mi><mrow>#3</mrow></msub><mo>&ApplyFunction;</mo>#4"}},bigop:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":" #2 "},speech:{"1,2":" #2 "},ruleML:{"1,2":"#2"}},intlims:{alternative:[],type:"function",priority:55,offpair:{"1,6":[2,3,4,5,6]},extraArgument:4,rule:{"1,6":"#2_{#3}^{#4} #5 \\,d#6"},speech:{"1,6":" #2 from #3 to #4 of #5 d#6 "},ruleML:{"1,6":'<mrow><munderover>#2<mrow>#3</mrow><mrow>#4</mrow></munderover>#5<mspace width="0.167em"></mspace><mo>&dd;</mo>#6</mrow>'}},intlimsweight:{alternative:[],type:"function",priority:55,offpair:{"1,7":[2,3,4,5,6,7]},extraArgument:5,rule:{"1,7":"#2_{#3}^{#4} #5 \\,\\frac{d#6}{#7}"},speech:{"1,7":" #2 from #3 to #4 of #5 d#6 over #7 "},ruleML:{"1,7":'<mrow><munderover>#2<mrow>#3</mrow><mrow>#4</mrow></munderover>#5<mspace width="0.167em"></mspace><mfrac><mrow><mo>&dd;</mo>#6</mrow><mrow>#7</mrow></mfrac></mrow>'}},intllimweight:{alternative:[],type:"function",priority:55,offpair:{"1,6":[2,3,4,5,6]},extraArgument:4,rule:{"1,6":"#2_{#3} #4 \\,\\frac{d#5}{#6}"},speech:{"1,6":" #2 over #3 of #4 d#5 over #6 "},ruleML:{"1,6":'<mrow><munder>#2<mrow>#3</mrow></munder>#4<mspace width="0.167em"></mspace><mfrac><mrow><mo>&dd;</mo>#5</mrow><mrow>#6</mrow></mfrac></mrow>'}},intllim:{alternative:[],type:"function",priority:55,offpair:{"1,5":[2,3,4,5]},extraArgument:3,rule:{"1,5":"#2_{#3} #4 \\,d#5"},speech:{"1,5":" #2 over #3 of #4 d#5 "},ruleML:{"1,5":'<mrow><munder>#2<mrow>#3</mrow></munder>#4<mspace width="0.167em"></mspace><mo>&dd;</mo>#5</</mrow>'}},int:{alternative:["integral"],type:"function",priority:55,family:["int","oint"],pairedArgument:"d",rule:{"1,2":"\\int #2","1,3":"\\int #2 \\,d#3","1,5":"\\int_{#2}^{3} #4 \\,d#5"},speech:{"1,2":"integral  #2","1,3":"integral  #2 d#3","1,5":"integral from #2 to #3 of #4 d#5"},ruleML:{"1,2":"<mo>∫</mo>#2","1,3":'<mo>∫</mo>#2<mspace width="0.167em"></mspace><mo>&dd;</mo>#3'}},oint:{alternative:[],type:"function",priority:55,family:["int","oint"],pairedArgument:"d",rule:{"1,3":"\\oint #2 \\,d#3","1,2":"\\oint #2"}},cup:{alternative:["union"],type:"operator",priority:10,rule:{"2,3":"#1 \\cup #3"},speech:{"2,3":" #1 union #3"},ruleML:{"2,3":"#1<mo>∪</mo>#3"}},cap:{alternative:["intersect","intersection"],type:"operator",priority:10,rule:{"2,3":"#1 \\cap #3"},speech:{"2,3":" #1 intersect #3"},ruleML:{"2,3":"#1<mo>∩</mo>#3"}},in:{alternative:["element"],type:"relation",priority:0,rule:{"2,3":"#1 \\in #3"},speech:{"2,3":"#1 in #3"},ruleML:{"2,3":"#1<mo>&#x2208;</mo>#3"}},notin:{alternative:["!in"],type:"relation",priority:0,rule:{"2,3":"#1 \\notin #3"},speech:{"2,3":"#1 not in #3"},ruleML:{"2,3":"#1<mo>∉</mo>#3"}},subset:{alternative:["subset"],type:"relation",priority:0,rule:{"2,3":"#1 \\subset #3"},speech:{"2,3":"#1 subset #3"},ruleML:{"2,3":"#1<mo>⊂</mo>#3"}},neq:{alternative:["!="],type:"relation",priority:0,rule:{"2,3":"#1 \\not= #3"},speech:{"2,3":"#1 not equals #3"},ruleML:{"2,3":"#1<mo>≠</mo>#3"}},and:{alternative:[],type:"operator",priority:10,rule:{"2,3":"#1 \\land #3"}},or:{alternative:[],type:"operator",priority:10,rule:{"2,3":"#1 \\lor #3"}},forall:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\forall"}},exist:{alternative:["exists"],type:"symbol",priority:-1,rule:{"1,1":"\\exists"},speech:{"1,1":" there exists "},ruleML:{"1,1":"<mi>∃</mi>"}},not:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\neg"}},perp:{alternative:["perpendicular","bot"],type:"operator",priority:25,rule:{"2,3":"#1 \\perp #3"},speech:{"2,3":"#1 perpendicular to #3"},ruleML:{"2,3":'<mrow>#1<mo intent="perpendicular">⊥</mo>#3</mrow>'}},dot:{alternative:[],type:"operator",priority:25,rule:{"2,3":"#1 \\cdot #3"},speech:{"2,3":"#1 dot #3"},ruleML:{"2,3":'<mrow>#1<mo intent="dot-product">⋅</mo>#3</mrow>'}},product:{alternative:[],type:"operator",priority:25,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":" #1 product #3 "},ruleML:{"2,3":'<mrow>#1<mo intent="direct-product">×</mo>#3</mrow>'}},times:{alternative:["×"],type:"operator",priority:25,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":"#1 times #3"},ruleML:{"2,3":'<mrow>#1<mo intent="times">×</mo>#3</mrow>'}},by:{alternative:[],type:"operator",priority:25,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":"#1 by #3"},ruleML:{"2,3":'<mrow>#1<mo intent="dimension-product">×</mo>#3</mrow>'}},cross:{alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":" #1 cross #3 "},ruleML:{"2,3":'<mrow>#1</mrow><mo intent="cross-product">×</mo><mrow>#3</mrow>'}},oointerval:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"(#1, #3)"},speech:{"2,3":" open interval from #1 to #3 endinterval "},ruleML:{"2,3":'<mrow intent="open-interval($f, $g)"><mo>(</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>)</mo></mrow>'}},innergcd:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"(#1, #3)"},speech:{"2,3":" gcd of #1 comma #3 endgcd "},ruleML:{"2,3":'<mrow intent="gcd($f, $g)"><mo>(</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>)</mo></mrow>'}},cartesianpoint:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"(#1, #3)"},speech:{"2,3":" point with coordinates #1 comma #3 endpoint "},ruleML:{"2,3":'<mrow intent="coordinate($f, $g)"><mo>(</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>)</mo></mrow>'}},innerproduct:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1, #3\\rangle "},speech:{"2,3":" inner product of #1 and #3 endinnerproduct "},ruleML:{"2,3":'<mrow intent="inner-product($f, $g)"><mo>⟨</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>⟩</mo></mrow>'}},twovector:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1, #3\\rangle "},speech:{"2,3":" vector #1 comma #3 endvector "},ruleML:{"2,3":'<mrow intent="vector($va, $vb)"><mo>⟨</mo><wrap arg="va">#1</wrap><mo>,</mo><wrap arg="vb">#3</wrap><mo>⟩</mo></mrow>'}},grouppresentation:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1\\ |\\  #3\\rangle "},speech:{"2,3":" group generated by #1 with relations #3 endrelations "},ruleML:{"2,3":'<mrow intent="group-presentation($gpa, $gpb)"><mo>⟨</mo><wrap arg="gpb">#1</wrap><mo stretchy="true">|</mo><wrap arg="gpb">#3</wrap><mo>⟩</mo></mrow>'}},setbuilder:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\{ #1\\ |\\  #3\\} "},speech:{"2,3":" set of #1 such that #3 endset "},ruleML:{"2,3":'<mrow intent="set-such-that($sba, $sbb)"><mo>{</mo><mrow arg="sba">#1</mrow><mo>|</mo><mrow arg="sbb">#3</mrow><mo>}</mo></mrow>'}},braket:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1 |  #3\\rangle "},speech:{"2,3":" bra-ket of #1 and #3 endbra-ket "},ruleML:{"2,3":'<mrow intent="bra-ket($bka, $bkb)"><mo>⟨</mo><wrap arg="bka">#1</wrap><mo>|</mo><wrap arg="bkb">#3</wrap><mo>⟩</mo></mrow>'}},isom:{alternative:["isomorphic"],type:"relation",priority:0,rule:{"2,3":"#1 \\cong #3"},speech:{"2,3":" #1 isomorphic to #3  "},ruleML:{"2,3":"#1<mo>≅</mo>#3"}},to:{alternative:["->","rightarrow"],type:"operator",priority:20,rule:{"2,3":"#1 \\to #3"},speech:{"2,3":" #1 to #3  "},ruleML:{"2,3":"#1<mo>→</mo>#3"}},longrightarrow:{alternative:["-->"],type:"operator",priority:20,rule:{"2,3":"#1 \\longrightarrow #3"},speech:{"2,3":" #1 long-to #3  "},ruleML:{"2,3":"#1<mo>⟶</mo>#3"}},from:{alternative:["<-","leftarrow"],type:"operator",priority:20,rule:{"2,3":"#1 \\leftarrow #3"},speech:{"2,3":" #1 from #3  "},ruleML:{"2,3":"#1<mo>←</mo>#3"}},longleftarrow:{alternative:["<--"],type:"operator",priority:20,rule:{"2,3":"#1 \\longleftarrow #3"},speech:{"2,3":" #1 long-from #3  "},ruleML:{"2,3":"#1<mo>⟵</mo>#3"}},mapsto:{alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 \\mapsto #3"},speech:{"2,3":" #1 maps to #3  "},ruleML:{"2,3":"#1<mo>↦</mo>#3"}},"~":{alternative:["asymp","asymptotic"],type:"relation",priority:0,rule:{"2,3":"#1 \\sim #3"},speech:{"2,3":" #1 asymptotic to #3  "},ruleML:{"2,3":'#1<mo intent="asymptotic">~</mo>#3'}},"≈":{alternative:["approx","approximate","approximately"],type:"relation",priority:0,rule:{"2,3":"#1 \\approx #3"},speech:{"2,3":" #1 approximately equal to #3  "},ruleML:{"2,3":'#1<mo intent="approximately">≈</mo>#3'}},cong:{alternative:["congruent"],type:"relation",priority:0,rule:{"2,3":"#1 \\equiv #3"},speech:{"2,3":" #1 congruent to #3  "},ruleML:{"2,3":'#1<mo intent="congruent">≡</mo>#3'}},"!cong":{alternative:["!congruent"],type:"relation",priority:0,rule:{"2,3":"#1 \\not\\equiv #3"},speech:{"2,3":" #1 not congruent to #3  "},ruleML:{"2,3":'#1<mo intent="not-congruent">≢</mo>#3'}},equiv:{alternative:["equivalent"],type:"relation",priority:0,rule:{"2,3":"#1 \\equiv #3"},speech:{"2,3":" #1 equivalent to #3  "},ruleML:{"2,3":'#1<mo intent="equivalent">≡</mo>#3'}},identical:{alternative:[],type:"relation",priority:0,rule:{"2,3":"#1 \\equiv #3"},speech:{"2,3":" #1 identical to #3  "},ruleML:{"2,3":'#1<mo intent="identical">≡</mo>#3'}},":=":{alternative:["coloneq","coloneqq"],type:"relation",priority:0,rule:{"2,3":"#1 \\coloneqq #3"},speech:{"2,3":" #1 defined as #3  "},ruleML:{"2,3":'#1<mo intent="defined-as">≔</mo>#3'}},":":{alternative:["colon"],type:"relation",priority:0,rule:{"2,3":"#1 \\colon #3"},speech:{"2,3":" #1 colon #3  "},ruleML:{"2,3":"#1<mo>:</mo>#3"}},"cases:":{alternative:[],type:"multiline",lineBreak:!0,params:["caseEnvironment"],note:"cases",MathMLnote:"cases"},casesline:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2 & \\text{ #3 } #4"},speech:{"1,4":"#2 #3 #4 "},ruleML:{"1,4":`<mtr><mtd>#2</mtd><mtd style="text-align: left"><mspace width="1em"></mspace><mtext>#3</mtext><mspace width="0.5em"></mspace>#4</mtd></mtr>
`}},"system:":{alternative:[],type:"multiline",params:["system","&beforeFirstRelation"],absorbEmptyLine:!0,emptyLineBeforeIndent:!0,note:"align",speechnote:"system",MathMLnote:"system"},"derivation:":{alternative:[],type:"multiline",params:["system","&beforeFirstRelation"],absorbEmptyLine:!0,emptyLineBeforeIndent:!0,note:"align",speechnote:"derivation",MathMLnote:"derivation"},systemline:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2  #3 &  #4"},speech:{"1,4":"#2 #3 #4 "},ruleML:{"1,4":`<mtr><mtd style="text-align: right">#2</mtd><mtd>#3</mtd><mtd style="text-align: left">#4</mtd></mtr>
`}},derivationline:{alternative:[],type:"function",priority:55,offpair:{"1,3":[1,2,3]},extraArgument:1,rule:{"1,3":" #2 &  #3"},speech:{"1,3":"#2 #3 "},ruleML:{"1,3":`<mtr><mtd></mtd><mtd>#2</mtd><mtd style="text-align: left">#3</mtd></mtr>
`}},"linearsystem:":{alternative:[],type:"multiline",seperateOut:!0,absorbEmptyLine:!0,emptyLineBeforeIndent:!0,noBeginEnd:!0,changeLineTurn:",",note:"\\systeme"},hat:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\hat{#2}"}},overline:{alternative:["bar"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\overline{#2}"},speech:{"1,2":" #2 bar "},ruleML:{"1,2":'<mover>#2<mo accent="true">―</mo></mover>'}},conj:{alternative:["conjugate"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\overline{#2}"},speech:{"1,2":" #2 conjugate "},ruleML:{"1,2":'<mover intent="conjugate($x)"><mrow arg="x">#2</mrow><mo accent="true">-</mo></mover>'}},vec:{alternative:["conjugate"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\overline{#2}"},speech:{"1,2":" vector quantityV #2 Vendquantity "},ruleML:{"1,2":'<mrow intent="vector($va)"><wrap mathvariant="bold" arg="va">#2</wrap></mrow>'}},underline:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\underline{#2}"}},if:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"if"},speech:{"1,1":" if "},ruleML:{"1,1":"if"}},otherwise:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"otherwise"},speech:{"1,1":" otherwise "},ruleML:{"1,1":"otherwise"}},when:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"#&\\text{when }"}},"!":{alternative:[],type:"postfix",priority:-1,rule:{"1,1":"!"},speech:{"1,1":" factorial "},ruleML:{"1,1":"<mo>!</mo>"}}},lt={iiint:"∭",iint:"∬",int:"∫",oiiint:"∰",oiint:"∯",oint:"∮"},st={sum:"∑",union:"⋃",intersection:"⋂",oplus:"⨁",otimes:"⨂",coprod:"∐",prod:"∏"},pt=[["cent","¢"],["dollar","$"],["pound","£"],["euro","€"]],ut=["log","llog","lllog","ln","lg","vec","hat","bar","abs","det","order","card","len","length","norm","floor","ceil","ceiling"],ct=["∑","⋃","⋂","⨁","⨂","∐","∏","∮","∭","∬","∫","∰","∯","∮"],Xe=[["sin","sine"],["cos","cosine"],["tan","tangent"],["cot","cotgent"],["sec","secant"],["csc","cosecant"],["arcsin","arcsine"],["arccos","arccosine"],["arctan","arctangent"],["arccot","arccotgent"],["arcsec","arcsecant"],["arccsc","arccosecant"],["sinh","sinch"],["cosh","cosh"],["tanh","tanch"]],V=ut.slice();for(const t of Xe)V.push(t[0]);console.debug("greedyfunctions",V);var mt=[["α","alpha"],["β","beta"],["γ","gamma"],["δ","delta"],["ε","varepsilon"],["ϵ","epsilon"],["ζ","zeta"],["η","eta"],["θ","theta"],["ι","iota"],["κ","kappa"],["λ","lambda"],["μ","mu"],["ν","nu"],["ξ","xi"],["ο","omicron"],["π","pi"],["ρ","rho"],["σ","sigma"],["τ","tau"],["υ","upsilon"],["ϕ","phi"],["φ","varphi"],["χ","chi"],["ψ","psi"],["ω","omega"],["Α","Alpha"],["Β","Beta"],["Γ","Gamma"],["Δ","Delta"],["Ε","Epsilon"],["Ζ","Zeta"],["Η","Eta"],["Θ","Theta"],["Ι","Iota"],["Κ","Kappa"],["Λ","Lambda"],["Μ","Mu"],["Ν","Nu"],["Ξ","Xi"],["Ο","Omicron"],["Π","Pi"],["Ρ","Rho"],["Σ","Sigma"],["Τ","Tau"],["Υ","Upsilon"],["Φ","Phi"],["Χ","Chi"],["Ψ","Psi"],["Ω","Omega"]];for(const t of Xe)h[t[0]]={alternative:[],type:"function",priority:15,rule:{"1,2":"\\"+t[0]+" #2"},speech:{"1,2":t[1]+" #2 "},ruleML:{"1,2":"<mi>"+t[0]+"</mi><mo>&ApplyFunction;</mo>#2"}},h["base"+t[0]]={alternative:[],type:"function",priority:15,rule:{"1,2":"\\"+t[0]},speech:{"1,2":t[1]+" "},ruleML:{"1,2":t[0]}};for(const t of mt)h[t[1]]={alternative:[],type:"letter",priority:-1,rule:{"1,1":"\\"+t[1]},speech:{"1,1":" "+t[1]+" "},ruleML:{"1,1":"<mi>"+t[0]+"</mi>"}};for(const t of pt)h[t[0]]={alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\"+t[0]},speech:{"1,1":" "+t[0]+" "},ruleML:{"1,1":"<mi>"+t[1]+"</mi>"}};var gt={text:{LaTeX:["",""],MathML:["",""],Speech:["",""],PTX:["",""]},m:{LaTeX:["\\(","\\)"],MathML:["<math>","</math>"],Speech:["<em>","</em>"],PTX:["<m>","</m>"]},md:{LaTeX:["\\[","\\]"],MathML:['<math display="block">',"</math>"],Speech:["<em>","</em>"],PTX:["<md>","</md>"]}};function dt(t){return t.replace(/\s\s+/g," ")}function ze(t){return/^[0-9\.,]+$/.test(t)}function ht(t){return/^[a-zA-Z]+$/.test(t)}function Ie(t){return/^&[a-zA-Z]+;$/.test(t)}function ft(t){return/^[0-9\.,].*[a-zA-Z]$/.test(t)}function yt(t){return ze(t)||t.length==1||t.trim()in h&&h[t.trim()].type=="symbol"}function N(t,e){if(ft(t)){let n=t.replace(/[a-zA-Z]+$/,""),o=t.replace(/^[0-9\.,]+/,"");console.debug("found mixed",t,"with parts",n,",",o),n=N(n,e),o=N(o,e);let i="";return e=="MathML"?i="<mo>&InvisibleTimes;</mo>":e=="Speech"&&(i=" times "),n+i+o}let r=t;return console.debug("markAtomicItem of",r,"endans",Ie(t)),e=="MathML"&&(ze(t)?r="<mn>"+r+"</mn>":Ie(t)?r="<mi>"+r+"</mi>":ht(t)?r=r.replace(/(.)/g,"<mi>$1</mi>"):ct.includes(t)?r="<mo>"+r+"</mo>":t.includes("mtext")||r!=""&&(r="<unknown>"+r+"</unknown>",console.warn("unknown type","X"+r+"X"))),r}function bt(t){let e=t;console.debug("   starting to simplify Answer",e);for(let r=0;r<=2;++r)e=e.replace(/to the quantity([A-Z]?) +negative 1 +([A-Z]?)endquantity/g,"inverse"),e=e.replace(/to the quantity([A-Z]?) +2 +([A-Z]?)endquantity/g,"squared"),e=e.replace(/power +2 +/g,"squared "),e=e.replace(/(^| )quantity([A-Z]?) +([^ ]+) +([A-Z]?)endquantity/g," $3 "),e=e.replace(/(^| )quantity([A-Z]?) +(negative +[^ ]+) +([A-Z]?)endquantity/g," $3 "),e=e.replace(/<mrow ([^<>]+)><(mi|mo|mn)>([^<>]+)(<\/(mi|mo|mn)>)<\/mrow>/g,"<$2 $1>$3$4"),e=e.replace(/<mrow>(<([a-z]+)>)([^<>]+)(<\/$2>)<\/mrow>/g,"$1$3$4"),console.debug("now ans",e),e=e.replace(/<mrow>(<mi>)([^<>]+)(<\/mi>)<\/mrow>/g,"$1$2$3"),e=e.replace(/<mrow>(<mo>)([^<>]+)(<\/mo>)<\/mrow>/g,"$1$2$3"),e=e.replace(/<mrow>(<mn>)([^<>]+)(<\/mn>)<\/mrow>/g,"$1$2$3"),e=e.replace(/(<mrow[^<>]*>)<mrow>([^w]*)<\/mrow>(<\/mrow>)/g,"$1$2$3"),console.debug("removed layer",r,"to get",e);return e=e.replace(/quantity([A-Z]?)/g,"quantity"),e=e.replace(/([A-Z]?)endquantity([A-Z]?)/g,"endquantity"),e=e.replace(/(quantity *)quantity([^q]*)endquantity( *endquantity)/g,"$1$2$3"),e=e.replace(/(quantity *)quantity([^q]*)endquantity( *endquantity)/g,"$1$2$3"),e.endsWith("\\")&&(e+=" "),e}function vt(t){let e=t;return e=wt(e),e=xt(e),console.debug("after preprocessarithmetic",e),e=kt(e),e=Mt(e),console.debug("before other",e),e=Et(e),console.debug("after other",e),e}function wt(t){let e=t;return e=e.replace(/(\s|\$|^)"(\S[^"]+)"(\s|\$|$)/g,$t),e}function $t(t,e,r,n,o,i){return e+"quote(␣"+r.replaceAll(" ","␣")+"␣)"+n}function xt(t){let e=t;e=e.replace(/-->/g,"longrightarrow"),e=e.replace(/->/g,"to"),e=e.replace(/<--/g,"longleftarrow"),e=e.replace(/<-/g,"from"),e=e.replace(/(\$| |\(|\^|_)[\-\−]([^ +])/g,"$1😑$2"),e=e.replace(/(^|\$|\(|\[|\{) *[\-\−]/,"$1😑"),e=e.replace(/([^ \(\)\[\]\{\}\$]*[+\-][^ \(\)\[\]\{\}\$]*[^ \)\]}\/])(\/\/)/g,"($1)//"),e=e.replace(/\/\/([^ \(\[{\/][^ \(\)\[\]\{\}\$]*[+\-][^ \(\)\[\]\{\}\$]*)/g,"//($1)"),e=e.replace(/([^ \(\)\[\]\{\}\$]*[^ \)\]}\/])(\/)/g,"❲$1❳/"),e=e.replace(/\/([^ \(\[{\/][^ \)\]\}\n\$]*)/g,"/❲$1❳"),console.debug("after preprocess fractions","A"+e+"B");for(const i of V){var r="(^|[ \\(\\[\\{])"+i+" ([^ \\(\\)\\[\\]\\{\\}]+)",n=r+"($|[ \\(\\)\\[\\]\\{\\}])",o=new RegExp(n,"g");e=e.replace(o,"$1"+i+"⁅$2⁆$3")}return console.debug("after wrapping greedy arguments","A"+e+"B"),e=Lt(e),console.debug("before operators",e),e=qt(e),e=_t(e),console.debug("after operators",e),e=e.replace(/([0-9a-zA-Z])(\+|-|\+-|-\+)([0-9a-zA-Z])/g,"$1 $2 $3"),e=e.replace(/ \* /g," ⭐ "),console.debug("before sub and sup grouping",e),e=e.replace(/\^([^ ❲❳\/\(\[{][^ \"❲❳\/\(\)\[\]\{\}\$]*)/,"^❲$1❳"),console.debug("after exponents once ",e),e=e.replace(/\^([^ ❲❳\/\(\[{][^ \"❲❳\/\(\)\[\]\{\}\$]*)/,"^❲$1❳"),console.debug("after exponents twice",e),e=e.replace(/_([^ ❲❳\/\(\[{\$][^ \"❲❳\/\^\(\)\[\]\{\}\$]*)/,"_❲$1❳"),e=e.replace(/_([^ ❲❳\/\(\[{\$][^ \"❲❳\/\^\(\)\[\]\{\}\$]*)/,"_❲$1❳"),console.debug("after subscript twice",e),e=At(e),e=e.replace(/([0-9])([a-zA-Z])/g,"$1 $2"),console.debug("after implied number letter multiplication",e),e=e.replace(/([0-9])([\(\[\{])/g,"$1 $2"),e=e.replace(/(_[\(❲][^❲❳\(\)]+)[\)❳]\(/g,"$1) ⚡ ("),e=e.replace(/([\^▲][\(❲][^❲❳\(\)]+)[\)❳]\(/g,"$1) ⚡ ("),e=e.replace(/(_[\(❲][^❲❳\(\)]+)[\)❳]\(/g,"$1) ⚡ ("),e=e.replace(/([\^▲][\(❲][^❲❳\(\)]+)[\)❳]\(/g,"$1) ⚡ ("),e=e.replace(/(_\(\([^❲❳\(\)]+)\)\)\(/g,"$1)) ⚡ ("),e=e.replace(/(\^\(\([^❲❳\(\)]+)\)\)\(/g,"$1)) ⚡ ("),e}function kt(t){let e=t;return e=e.replace(/(\$| )\(([^,()]+)\, +([^,()]+)\)/g,"$1($2) oointerval ($3)"),e=e.replace(/(\$| )gcd\( *([^,()]+)\, *([^,()]+) *\)/g,"$1($2) innergcd ($3)"),e=e.replace(/(\$| )\( ([^,()]+)\, *([^,()]+) \)/g,"$1($2) gcd ($3)"),e=e.replace(/(\$| )\(([^ ][^,()]*)\,([^ ][^,()]*)\)/g,"$1($2) cartesianpoint ($3)"),e}function Mt(t){let e=t;return e=e.replace(/(^| )< ([^<>|]+) >/g,"$1span($2)"),console.debug("did we find span?",e),e=e.replace(/(^| )<([^<>|]+) \| ([^<>|]+)>/g,"$1($2) grouppresentation ($3)"),e=e.replace(/(^| |\(){([^{}|]+) \| ([^{}|]+)}/g,"$1($2) setbuilder ($3)"),e=e.replace(/(^| ){([^{}]+)}/g,"$1setof($2)"),e=e.replace(/(^| )<([^,<>|]+)\|([^,<>|]+)>/g,"$1($2) braket ($3)"),e=e.replace(/(^| )<([^,<>]+)\, ([^,<>]+)>/g,"$1($2) twovector ($3)"),console.debug("looking for vector",e),e=e.replace(/(^| )<([^ ,<>][^,<>]*)\, ([^<>]+)>/g,"$1vector($2, $3)"),console.debug("did we find vector?",e),e=e.replace(/(^| |\n)<([^ ][^,<>]*)\,([^ ][^<>]*)>/g,"$1($2) innerproduct ($3)"),e=e.replace(/(^| )<([^<>]+)>/g,"$1anglebrackets($2)"),e}function Lt(t){let e=t;return e=e.replace(/([^\^\(\[\{❲])(\'+)/g,"$1▲❲$2❳"),e=e.replace(/(lim(|inf|sup))_([\(\[\{❲])/g,"$1$3"),e=e.replace(/(lim(|inf|sup))_([^ \(\[\{❲][^ ]+)/g,"$1($3)"),e}function qt(t){let e=t;for(let[p,c]of Object.entries(lt))if(e.includes(p)){p="\\\\?"+p;var r=`(^| |
)`+p+"\\_\\(([^()]+)\\)\\^\\(([^()]+)\\) ?(.*?)",n=r+` d([a-z]+)( |
|$)`,o=r+` ❲d([a-z]+)❳/❲([^❲❳]+)❳( |
|$)`;console.debug("regExStr",n),console.debug("regExStrWeight",o);var i=new RegExp(o,"g");e=e.replace(i,"$1wrapper(intlimsweight("+c+")($2)($3)($4)($5)($6))$7");var s=new RegExp(n,"g");e=e.replace(s,"$1wrapper(intlims("+c+")($2)($3)($4)($5))$6"),r=`(^| |
)`+p+"\\_([^ ]+?)\\^([^ ]+) (.*?)",n=r+` d([a-z]+)( |
|$)`,o=r+` ❲d([a-z]+)❳/❲([^❲❳]+)❳( |
|$)`,console.debug("regExStr",n),console.debug("regExStrWeight",o),i=new RegExp(o,"g"),e=e.replace(i,"$1wrapper(intlimsweight("+c+")($2)($3)($4)($5)($6))$7"),s=new RegExp(n,"g"),e=e.replace(s,"$1wrapper(intlims("+c+")($2)($3)($4)($5))$6"),r=`(^| |
)`+p+"\\_\\(\\(([^()]+?)\\)\\) (.*?)",n=r+" d([a-z]+)( |\\$)",o=r+" ❲d([a-z]+)❳/❲([^ $]+)❳( |$)",i=new RegExp(o,"g"),e=e.replace(i,"$1wrapper(intllimweight("+c+")(($2))($3)($4)($5))$6"),s=new RegExp(n,"g"),e=e.replace(s,"$1wrapper(intllim("+c+")(($2))($3)($4))$5"),r="(^| )"+p+"\\_\\(([^()]+?)\\) (.*?)",n=r+" d([a-z]+)( |\\$)",o=r+" ❲d([a-z]+)❳/❲([^ $]+)❳( |$)",i=new RegExp(o,"g"),e=e.replace(i,"$1wrapper(intllimweight("+c+")($2)($3)($4)($5))$6"),s=new RegExp(n,"g"),e=e.replace(s,"$1wrapper(intllim("+c+")($2)($3)($4))$5"),r=`(^| |
)`+p+"\\_([^ ]+?) (.*?)",n=r+" d([a-z]+)( |\\$)",o=r+" ❲d([a-z]+)❳/❲([^ $]+)❳( |$)",i=new RegExp(o,"g"),e=e.replace(i,"$1wrapper(intllimweight("+c+")($2)($3)($4)($5))$6"),s=new RegExp(n,"g"),console.debug("final regExStr",n),e=e.replace(s,"$1wrapper(intllim("+c+")($2)($3)($4))$5")}return console.debug("did we find integral?",e),e}function At(t){let e=t;console.debug("looking for powers of known functions");for(let i of V){var r="(^|[ \\(\\[\\{])"+("\\\\?"+i)+"\\^❲([^❲❳]*)❳",n=r+" *([\\(\\[\\{][^\\(\\)\\[\\]\\{\\}]+[\\)\\]\\}])",o=new RegExp(n,"g");e=e.replace(o,"$1wrapper❲functionpower(base"+i+")($2)$3❳"),n=r+" ([^ \\$\\(\\)\\[\\]\\{\\}]+)",o=new RegExp(n,"g"),e=e.replace(o,"$1wrapper❲functionpower(base"+i+")($2)wrapper❲$3❳❳")}console.debug("processed powers of functions",e);for(let i of V){var r="(^|[\\$ \\(\\[\\{])"+("\\\\?"+i)+"\\_❲([^❲❳]*)❳",n=r+" *([\\(\\[\\{][^\\(\\)\\[\\]\\{\\}]+[\\)\\]\\}])",o=new RegExp(n,"g");e=e.replace(o,"$1wrapper❲functionsubscript(base"+i+")($2)$3❳"),n=r+" ([^ \\$\\(\\)\\[\\]\\{\\}]+)",o=new RegExp(n,"g"),e=e.replace(o,"$1wrapper❲functionsubscript(base"+i+")($2)wrapper❲$3❳❳")}return e}function _t(t){let e=t;for(let[o,i]of Object.entries(st))if(e.includes(o)){o="\\\\?"+o;var r="(^| )"+o+"\\_[\\[\\(\\{]([^ ]+)[\\]\\)\\}]\\^[\\[\\(\\{]([^ ]+)[\\]\\)\\}]",n=new RegExp(r,"g");e=e.replace(n,"$1opwrap(limsop("+i+")($2)($3))⚡");var r="(^|\\$| )"+o+"\\_[\\[\\(\\{]([^ ]+)[\\]\\)\\}]\\^([^ ]+)",n=new RegExp(r,"g");e=e.replace(n,"$1opwrap(limsop("+i+")($2)($3))⚡"),r="(\\b)"+o+"\\_([^ ]+)\\^([^ ]+)",console.debug("regExStr",r),n=new RegExp(r,"g"),e=e.replace(n,"$1opwrap(limsop("+i+")($2)($3))⚡"),r="(^|\\$| )"+o+"\\_[\\[\\(\\{]([^ ]+)[\\]\\)\\}]",console.debug("regExStr",r),n=new RegExp(r,"g"),e=e.replace(n,"$1opwrap(llimop("+i+")($2))⚡"),r="(^|\\$| )"+o+"\\_([^ ]+)",console.debug("regExStr for llimop",r),n=new RegExp(r,"g"),e=e.replace(n,"$1opwrap(llimop("+i+")($2))⚡"),r="(^|\\$| )"+o+"( |\\$)",console.debug("regExStr",r),n=new RegExp(r,"g"),e=e.replace(n,"$1opwrap(bigop("+i+"))$2⚡")}return e}function Et(t){let e=t;return e=e.replace(/([^ \$\(\)\[\]\{\}]+):([^ ]+) to ([^ \$\(\)\[\]\{\}]+)/g,"fundef($1)($2)($3)"),e=e.replace(/([^\$\|]+) cong(ruent)* ([^\$]+) mod ([^\$\{\}]+)/g,"congruentmod($1)($3)($4)"),e=e.replace(/([^\$\|]+) !cong(ruent)* ([^\$]+) mod ([^\$\{\}]+)/g,"notcongruentmod($1)($3)($4)"),e}function Tt(t){let e=t;return e=e.replace(/</g,"⦉"),e=e.replace(/>/g,"⦊"),e}function St(t){let e=t;return e=e.replace(/⦉/g,"<"),e=e.replace(/⦊/g,">"),e}function Nt(t){let e=t;return e=e.replace(/\$\$\s*([^\$]+)\s*\$\$/g,'<md sourcetag="dd">$1</md>'),e=e.replace(/\\\[/g,'<md sourcetag="sb">'),e=e.replace(/\\\]/g,"</md>"),e=e.replace(/(^|\s|-)\$([^\$\f\r\n]+)\$(\s|\.|,|;|:|\?|!|$)/g,'$1<m sourcetag="d">$2</m>$3'),e=e.replace(/(^|\s|-)\$([^\$\f\r\n]+)\$(\s|\.|,|;|:|\?|!|-|$)/g,'$1<m sourcetag="d">$2</m>$3'),e=e.replace(/\\\(/g,'<m sourcetag="sp">'),e=e.replace(/\\\)/g,"</m>"),e}String.prototype.myHash=function(){var t=0,e,r;if(this.length===0)return t;for(e=0;e<this.length;e++)r=this.charCodeAt(e),t=(t<<5)-t+r,t|=0;return t};function Pt(t){let e;t="<bbbb>"+t+"</bbbb>",typeof t=="string"?e=new DOMParser().parseFromString(t,"text/xml"):e=t,console.debug("xml",e),console.debug("xml.nodeName",e.nodeName,"xml.nodeType",e.nodeType),e.nodeValue,e.nodeType==9&&(e=e.documentElement);let r=[];for(const n of e.childNodes){let o=[];n.nodeName=="#text"?(o.push("text"),o.push(""),o.push(n.nodeValue)):(o.push(n.nodeName),o.push(n.attributes),o.push(n.innerHTML)),o.push(o[2].myHash()),r.push(o)}return r}function Rt(t){let e=t;e=Nt(e),console.debug("str with tags",e);let r=Pt(e);return console.debug("this_node_content",r),r}function Ot(t,e,r="MathML"){let n="";for(const o of t){let i=gt[o[0]];console.debug("element",o),console.debug("componentdict",e),console.debug(r,"tags",i);const s=o[3]+","+r;console.debug("contentkey",s);let p=e[s][2];n+=i[r][0]+p+i[r][1]}return n}function jt(t,e){let r=t.trim();return r=r.replace(/␣/g," "),e=="Speech"?(r=r.replace(/(^| |\n)\$([^$]+)\$( |\.|\,|:|;|\?|\!|\n|$)/g,"$1&nbsp;&nbsp;<em>$2</em>&nbsp;&nbsp;$3"),r=r.replace(/(^| |\n)\$([^$]+)\$( |\.|\,|:|;|\?|\!|\n|$)/g,"$1&nbsp;&nbsp;<em>$2</em>&nbsp;&nbsp;$3"),r=r.replace(/(^| |\n)\$([^$]+)\$( |\.|\,|:|;|\?|\!|\n|$)/g,"$1&nbsp;&nbsp;<em>$2</em>&nbsp;&nbsp;$3"),r=r.replace(/\$\$(.+?)\$\$/sg,`
<em>$1</em>
`),r=r.replace(/\\,/g," "),r=r.replace(/∏/g,"product"),r=r.replace(/∑/g,"sum")):e=="MathML"&&(r=r.replace(/\$\$(.+?)\$\$/sg,`
<math display="block">$1</math>
`),r=r.replace(/(^| |\n)\$\$(.+?)\$\$( |\.|\,|:|;|\?|\!|\n|$)/g,`
<math display="block">$2</math>$3
`),r=r.replace(/(^| |\n)\$(.+?)\$( |\.|\,|:|;|\?|\!|\n|$)/g,`
<math>$2</math>$3
`),r=r.replace(/\\,/g,""),r=r.replace(/<wrap([^>]+)>(<m[a-z]+[^<>]*)(>[^<>]*<\/m[a-z]+>)<\/wrap>/g,"$2$1$3"),r=r.replace(/<wrap /g,"<mrow "),r=r.replace(/<\/wrap>/g,"</mrow>")),r}class Xt{constructor(){this.cache=[],this.cacheSize=500,this.nonCache=[],this.nonCacheSize=500,this.multilineList=[]}getAllMultiLine(){if(this.multilineList.length==0)for(let e of Object.keys(h))h[e].type=="multiline"&&this.multilineList.push(e);return this.multilineList}getItem(e){if(e==" "||e=="")return-1;for(let r=this.cache.length-1;r>=0;r--)if(this.cache[r][0]===e)return this.cache[r][1];if(this.nonCache.includes(e))return-1;for(let r of Object.keys(h)){let n=h[r].alternative;if(n){for(let o of n)if(o==e)return this.cache.push([e,r]),this.cache.length>this.cacheSize&&this.cache.shift(),r}}return this.nonCache.push(e),this.nonCache.length>this.nonCacheSize&&this.nonCache.shift(),-1}getLength(){return this.cache.length}getSize(){return this.cacheSize}}let G=document.getElementById("sourceTextArea"),Ze=document.getElementById("echosourceTextArea"),pe=document.getElementById("mathmlTextArea");document.getElementById("pretextTextArea");let Be=document.getElementById("speechTextArea");document.getElementById("MathJaxArea");let ue=document.getElementById("mathmlDisplayArea"),ce=new Xt;var me;G.addEventListener&&G.addEventListener("input",function(){Ze&&(Ze.value=de(G.value,"LaTeX")),Be&&(Be.innerHTML='" '+de(G.value,"Speech")+' "'),(pe||ue)&&(me=de(G.value,"MathML"),pe&&(pe.value=me),ue&&(ue.innerHTML=me))},!1);class k{constructor(e,r,n=null,o=null,i="unknown"){this.position=e,this.value=r,this.outputvalue=r,this.key=n,this.parent=o,this.conversiontarget=i,this.children=[],this.pair=[],this.noPriority=!1,this.exPriority=!1}insert(e,r=e){return this.children.push(new k(this.children.length,e,r,this,this.conversiontarget)),!0}insertNode(e){return e.parent=this,e.position=this.children.length,this.children.push(e),!0}addLeafMarkup(){console.debug("   adding leaf markup with key, val, oval",this.key,"a,a",this.value,"b,b",this.outputvalue,"to",this),this.key==null?this.outputvalue=N(this.value,this.conversiontarget):this.key==" "?this.position==1?(console.info("assuming implied multiplication"),console.info("What is next to this space key? parent:",this.parent,"left sibling",this.parent.children[0],"left sibling value",this.parent.children[0].value,"right sibling",this.parent.children[2]),this.conversiontarget=="MathML"?this.outputvalue="<mo>&InvisibleTimes;</mo>":this.conversiontarget=="Speech"&&(this.outputvalue=" times ")):this.outputvalue=N(this.value,this.conversiontarget):this.key=="quote"?this.position==1&&(this.outputvalue=this.value):this.key==""?(console.debug("item with empty key.  Is this function apply?",this),this.position==1?(console.debug("What is nect to this enpty key? parent:",this.parent,"left sibling",this.parent.children[0],"right sibling",this.parent.children[2]),this.parent.children[2].pair.length>0&&(this.conversiontarget=="MathML"?this.outputvalue="<mo>&ApplyFunction;</mo>":this.conversiontarget=="Speech"&&(this.outputvalue=" of "))):this.position==0?this.conversiontarget=="Speech"?this.outputvalue=" "+N(this.value,this.conversiontarget):this.outputvalue=N(this.value,this.conversiontarget):this.outputvalue=N(this.value,this.conversiontarget)):h[this.key].type=="operator"?this.value!=this.key?this.outputvalue=N(this.value,this.conversiontarget):this.outputvalue=N(this.value,this.conversiontarget):this.key==","?(console.debug("found comma with parent",this.parent),this.position==1&&(this.outputvalue="COMMA")):h[this.key].type=="symbol"?console.debug("found a symbol"):h[this.key].type=="relation"?(console.debug("found a relation"),this.value!=this.key?this.outputvalue=N(this.value,this.conversiontarget):this.outputvalue=N(this.value,this.conversiontarget)):h[this.key].type=="function"&&(console.debug("found a function"),this.value!=this.key?(console.debug("marking the argument of a function",this.value,"within",this),this.outputvalue=N(this.value,this.conversiontarget)):this.outputvalue=N(this.value,this.conversiontarget)),console.debug("   and now leaf is key, val, oval",this.key,",",this.value,",",this.outputvalue)}combine(e){for(let r of this.children)r&&r.combine(e);if(this.isLeaf){try{console.debug("isLeaf with key",this.key,"pair",this.pair,"parent children",this.parent.children,"of length",this.parent.children.length,"what we want",this.parent.children[2].pair,"ee",this)}catch{console.debug("isLeaf with key",this.key,"pair",this.pair,"this",this)}console.debug("the root",this.treeRoot),this.value.length>1&&(this.value=this.value.trim()),this.addLeafMarkup()}else{console.debug("not a Leaf",this.pair,this);let r=this.children[0].key,n,o,i=this.children.length,s=0;for(;this.children[s].value!=r;)s++;if(r==" ")this.children.length>1&&this.children[1].value==r?(r==" "&&(r="\\,"),n=this.children[0].value+r+this.children[2].value,console.debug("adding Oo to",this,"because of",this.children[0]),o=this.children[0].outputvalue+this.children[1].outputvalue+this.children[2].outputvalue,this.key&&this.key!=" "&&h[this.key].type!="function"&&!h[this.key].wrappedarguments&&h[this.key].priority>20&&(console.debug("maybe wrapping this.key",this.key,"for",o),this.conversiontarget=="MathML"?o="<mrow>"+o+"</mrow>":this.conversiontarget=="Speech"&&(console.debug("AddIng quantity",this),o="quantityS "+o+" Sendquantity"))):(o=this.children[1].outputvalue,n=this.children[1].value);else if(r=="")console.debug("  found an empty key",this),this.children.length>1&&this.children[1].value==r?(o=this.children[0].outputvalue+this.children[1].outputvalue+this.children[2].outputvalue,n=this.children[0].value+this.children[1].value+this.children[2].value):(o=this.children[1].outputvalue,n=this.children[1].value);else{console.debug("about to use conversiontarget",this.conversiontarget);try{console.debug("               trying to extract using key",r,"position",s,"numberOfSiblings",i,"from",this,"with rule of",s+1+","+i),this.conversiontarget=="MathML"?(n=h[r].rule[s+1+","+i],o=h[r].ruleML[s+1+","+i],console.debug("               attempted       MathML conversion: ",n,"newOutputValue",o)):this.conversiontarget=="Speech"?(n=h[r].rule[s+1+","+i],o=h[r].speech[s+1+","+i]):(n=h[r].rule[s+1+","+i],o=h[r].rule[s+1+","+i])}catch{n=h[r].rule[s+1+","+i],o=h[r].rule[s+1+","+i],console.debug("                      MathML conversion failed on",n)}if(n.includes("#comma?")&&(this.key&&h[this.key].type=="operator"&&h[this.key].priority<0?n=n.replace(/#comma\?\[(\S*)\&(\S*)\]$/,"$1"):n=n.replace(/#comma\?\[(\S*)\&(\S*)\]$/,"$2")),n.includes("#{}")){let p=!0,c=this;for(["^^","__"].includes(c.key)&&(p=!1);c.parent&&isScriptPure(c.key);)c=c.parent,["^^","__"].includes(c.key)&&(p=!1);p?n=n.replace("#{}","{}"):n=n.replace("#{}","")}for(let p=0;p<this.children.length;p++){let c=this.children[p].value,d=this.children[p].outputvalue,a=c,u=d;n.includes("#@"+(p+1))&&(a.length>1&&(a="{"+a+"}"),n=n.replace("#@"+(p+1),a),o=o.replace("#@"+(p+1),u)),e.includes("caseEnvironment")?(n=n.replace("#&","&"),o=o.replace("#&","&")):(n=n.replace("#&\\text{","\\text{ "),n=n.replace("#&",""),o=o.replace("#&\\text{","\\text{ "),o=o.replace("#&","")),n=n.replace("#"+(p+1)+"@1",c[0]),n=n.replace("#"+(p+1)+"@-1",c.substring(1)),n=n.replace("#"+(p+1),c),o=o.replace("#"+(p+1)+"@1",d[0]),o=o.replace("#"+(p+1)+"@-1",d.substring(1)),o=o.replace("#"+(p+1),d)}}this.value=n,this.outputvalue=o,this.children=[]}if(this.parent&&h[this.key]&&h[this.key].offpair){let r=this.parent.children.length,n=0;for(console.debug(r,"this.key",this.key,"this",this,"this.parent",this.parent);this.parent.children[n].value!=this.key;)console.debug(n,"this.parent.children[position]",this.parent.children[n]),n++;console.debug("dictionary[this.key].offpair",h[this.key].offpair,"looking for",n+1+","+r,"containing",this.position+1,"in",h[this.key].offpair[n+1+","+r]),h[this.key].offpair[n+1+","+r]&&h[this.key].offpair[n+1+","+r].includes(this.position+1)&&this.pair.pop()}if(this.pair&&this.pair.length>0&&(console.debug("this.pair[0]",this.pair[0]),this.pair[0]=It(this.pair,this.conversiontarget),this.pair[0].length>0)){console.debug("this.pair[0]",this.pair[0]);for(let r of this.pair)if(this.value=r[0]+this.value+r[1],this.conversiontarget=="MathML"){if(console.debug("((((adding parentheses to",this.outputvalue,"of",this),this.outputvalue.length>18&&(this.outputvalue="<mrow>"+this.outputvalue+"</mrow>"),!this.key||this.key==" "||!h[this.key].delimitedarguments){let n=this.outputvalue;r[0]!=""&&(n='<mo stretchy="false">'+r[0]+"</mo>"+n),r[1]!=""&&(n=n+'<mo stretchy="false">'+r[1]+"</mo>"),this.outputvalue=n}}else this.conversiontarget=="Speech"?yt(this.outputvalue)||(console.debug("adding quantity",this),this.outputvalue="quantityP "+this.outputvalue+" Pendquantity"):(!this.key||this.key==" "||!h[this.key].delimitedarguments)&&(this.outputvalue=r[0]+this.outputvalue+r[1]);this.pair=[]}}get isLeaf(){return this.children.length===0}get hasChildren(){return!this.isLeaf}get treeRoot(){return this.parent==null?this:this.parent.treeRoot}}class zt{constructor(e,r,n,o){this.root=new k(e,r,n,null,o),console.debug("       Tree 0 conversiontarget",o)}*preOrderTraversal(e=this.root){if(yield e,e.children.length)for(let r of e.children)yield*this.preOrderTraversal(r)}*postOrderTraversal(e=this.root){if(e.children.length)for(let r of e.children)yield*this.postOrderTraversal(r);yield e}insert(e,r,n=r){console.debug("       Tree 1 conversiontarget",this.conversiontarget);for(let o of this.preOrderTraversal())if(console.debug("trying Tree1 node",o),o.value===e)return o.children.push(new k(r,n,o,conversiontarget)),!0;return!1}remove(e){for(let r of this.preOrderTraversal()){const n=r.children.filter(o=>o.value!==e);if(n.length!==r.children.length)return r.children=n,!0}return!1}find(e){for(let r of this.preOrderTraversal())if(r.value===e)return r}adjustImpliedMultiplication(){let e=["lim","quote","dollar"],r=["quote","cent"];for(let n of this.preOrderTraversal())e.includes(n.value)&&e.includes(n.key)&&n.position==0&&(console.debug("found a lim",n),console.debug("now looking at",n.parent,"and",n.parent.children[0],"and",n.parent.children[1]),n.parent.parent&&n.parent.parent.children[1].key==" "&&n.parent.parent.children[1].value==" "&&(console.error("adding hello",n.parent.parent.children[1]),n.parent.parent.children[1].key="✂️",console.error("now",n.parent.parent.children[1]))),r.includes(n.value)&&r.includes(n.key)&&n.position==0&&(console.debug("found a quote",n),console.debug("now looking at parent",n.parent,"and itself",n.parent.children[0],"and parent parent",n.parent.parent),n.parent.parent&&n.parent.parent.parent&&n.parent.parent.parent.children[1].key==" "&&n.parent.parent.parent.children[1].value==" "?(console.error("adding goodbye",n.parent.parent.parent.children[1]),n.parent.parent.parent.children[1].key="✂️",console.error("now",n.parent.parent.parent.children[1])):n.parent&&n.parent.parent&&n.parent.parent.children[1].key==" "&&n.parent.parent.children[1].value==" "&&(console.error("adding goodbye",n.parent.parent.children[1]),n.parent.parent.children[1].key="✂️",console.error("now",n.parent.parent.children[1])))}combineSubSup(){for(let e of this.preOrderTraversal())e.value===""&&e.key==="^"&&e.position==0&&(e.children.length>1&&e.children[0].key=="_"?(e.parent.children[2].key="subsup",e.parent.children[2].position=3,e.parent.children[1]=e.children[2],e.parent.children[1].key="subsup",e.parent.children[1].position=2,e.parent.children[1].parent=e.parent,e.parent.children.unshift(e.children[0]),e.parent.children[0].key="subsup",e.parent.children[0].position=0,e.parent.children[0].parent=e.parent,e.parent.children[1]=e.children[1],e.parent.children[1].key="subsup",e.parent.children[1].value="subsup",e.parent.children[1].position=1,e.parent.children[1].parent=e.parent):console.debug("no children"))}addParents(){for(let e of this.preOrderTraversal())for(const r of e.children)r.parent!=e&&(r.parent=e)}combineInt(){for(let e of this.preOrderTraversal())e.value=="integr"&&e.key=="integr"&&e.position==0&&(console.debug("found int in position",e.position,"and siblings with values and keys"),console.debug("1",e.parent.children[1].key,e.parent.children[1].value),e.parent.children[1].value==""&&e.parent.children[1].key=="integr"&&e.parent.children[1].pair.length==1&&(console.debug("maybe found an int with limits"),e.parent.children[1].children[0].key==","&&e.parent.children[1].children[0].value==""&&(console.debug("looking more promising"),(e.parent.children[1].children[1].key!=","||e.parent.children[1].children[2].key!=",")&&console.debug("error with integral subsup structure"),console.debug("int structure looks good"))))}unWrapCertainParentheses(){for(let e of this.preOrderTraversal())e.value==""&&e.pair.length==1&&e.children.length>0&&(console.debug("found wrapping parentheses",e.position,"and children with values and keys"),console.debug("0",e.children[0].key,e.children[0].value),(e.children[0].value=="limop"&&e.children[0].key=="limop"||e.children[0].value=="intllim"&&e.children[0].key=="intllim"||e.children[0].value=="intllimweight"&&e.children[0].key=="intllimweight"||e.children[0].value=="intlimsweight"&&e.children[0].key=="intlimsweight"||e.children[0].value=="intlims"&&e.children[0].key=="intlims")&&(console.debug("maybe found paraens to eliminate"),e.pair.pop()))}}function It(t,e){let r=t[0];return console.debug("adjusting brackets",r),e=="LaTeX"&&(r[0]=="{"&&(r[0]=["\\{"]),r[1]=="}"&&(r[1]=["\\}"])),r[0]=="⁅"&&(r=[]),r[0]=="❲"&&(r[0]=[""]),r[1]=="❳"&&(r[1]=[""]),r}function Ce(t){return t===void 0?"undefined":t===null?"null":t==""?"es":t.replaceAll(" ","␣")}function Fe(t,e){if(console.debug("printTree of",t),!t)return"";let r=e+"["+Ce(t.key)+"]   |"+Ce(t.value)+"|";if(t.pair.length&&(r+="    "+t.pair[0]+" "+t.pair.length),t.children.length==0?r+="    leaf":t.parent!=null?r+="       "+t.parent.children.length:r+="       nuLL",r+=`
`,t.children.length==0)return r;{t.children.length;let n=r;for(let o=0;o<t.children.length;++o)n+=Fe(t.children[o],e+"    ");return n}}function ie(t,e,r){console.debug("starting M2TreeConvert  conversiontarget",r);let n=new zt(0,t,null,r),o="",i=n.root,s=!0,p,c=[],d={};for(console.debug("continuing M2TreeConvert  conversiontarget",r,"on",t);s;){let a=i.value;console.debug("fullStr","X"+a+"X");let u=0,l=0,m=0,g,f;for(;a.length>m;){let y=a[m],v=!1,T=!1;for(let b of[['"','"']])if(y==b[0]){console.debug("found a quote");let w=Ue(a,m,b[0],b[1],[[b[0]]]);if(w!=-1){let x=[a.substring(0,m),a.substring(m+1,w),a.substring(w+1)];console.debug("children are",x),i.value="";let L=new k(0,"\\ \\ \\text{"+x[1]+"}\\ \\ ","justatest",null,r);if(r=="MathML"?L=new k(0,'<mspace width="0.8em"/></mspace><mtext>'+x[1]+'</mtext><mspace width="0.8em"/></mspace>',"quote",null,r):r=="Speech"&&(L=new k(0,"␣text "+x[1]+" endtext␣",null,null,r)),console.debug("qNode was",L,"with children",L.children),L=W(x[0],L,r),console.debug("qNode is",L,"with children",L.children),console.debug("stackedTreeNode was",p),p=Q(p,L,r),console.debug("stackedTreeNode is",p,"with children",p.children),c.length>0){p.key=c[0][0].children[0].key;let j=c[0][0].children.pop();c[0][0].insertNode(p),c[0][0].insertNode(j),c[0][1]--,c[0][1]==0&&c.shift(),p=void 0}a=a.substring(w+1),m=0,l=0,g=void 0,f=void 0,v=!0}}if(Ft(y)){console.debug("apparently found a left of pair",y);let b=Ht(a,m);if(b!=-1){let w=[a.substring(0,m),a.substring(m+1,b),a.substring(b+1)];i.value="";let x=ie(w[1].trim(),e,r)[0].root;if(x.pair.push([y,a[b]]),x=W(w[0],x,r),console.debug("just made pNode",x),p=Q(p,x,r),console.debug("just made stackedTreeNode",p),c.length>0){p.key=c[0][0].children[0].key;let L=c[0][0].children.pop();c[0][0].insertNode(p),c[0][0].insertNode(L),c[0][1]--,c[0][1]==0&&c.shift(),p=void 0}a=a.substring(b+1),m=0,l=0,g=void 0,f=void 0,v=!0}}if(y=="<"&&a[m+1]!=" "){console.debug("looking for an angle pair");let b=Ut(a,m);if(b!=-1){let w=[a.substring(0,m),a.substring(m+1,b),a.substring(b+1)];i.value="";let x=ie(w[1].trim(),e,r)[0].root;if(x.pair.push(["\\langle ","\\rangle "]),x=W(w[0],x,r),p=Q(p,x,r),c.length>0){p.key=c[0][0].children[0].key;let L=c[0][0].children.pop();c[0][0].insertNode(p),c[0][0].insertNode(L),c[0][1]--,c[0][1]==0&&c.shift(),p=void 0}a=a.substring(b+1),m=0,l=0,g=void 0,f=void 0,v=!0,console.debug("keyType",f)}}console.debug("OUT j",l,"on","X"+a+"X","woith counter",m);for(let b=l;b<=m;b++){if(console.debug("inner j",b,"on","X"+a+"X","counter",m),a[m+1]&&a[m].match(/[A-Za-z␣]/g)&&a[m+1].match(/[A-Za-z␣]/g)){console.debug("  contuing because building up a word on",a[m],"and",a[m+1],"so far",a.substring(b,m+1));continue}let w=a.substring(b,m+1),x=Ct(a,w,m,p);if(console.debug("subStr",w,"type",x),x){g=w,u=b,f=x,T=!0,console.debug("A keyType",f,"with key","X"+g+"X","from subStr",w);break}if(w==" "&&(m>=1||i.parent&&i.parent.children.length==2&&i.position==1||p)&&!Dt(Vt(a,m))){g=w,u=b,f="space",T=!0,console.debug("B keyType",f);break}else console.debug("     maybe breaking on multiword subStr",w)}if(T)break;v||(m++,y.match(/[\s\d]/g)&&(l=m))}if(console.debug("is there a"+g+"key?"),g){console.debug("yes, there is there a"+g+"key"),!h[g]&&g!=" "&&g!=""&&(g=ce.getItem(g)),console.debug("and now it is"+g+"key of",f,"keyType");let y,v,T,b;switch(f){case"space":case"operator":case"relation":if(y=[a.substring(0,u),g,a.substring(m+1)],!1&f=="relation"&&e.includes("&beforeFirstRelation")&&!d["&beforeFirstRelation"]&&(d["&beforeFirstRelation"]=!0,y[2]="&"+y[2]),v=new k(0,y[0],g,null,r),T=new k(0,y[1],g,null,r),b=new k(0,y[2],g,null,r),p&&(p=Bt(v.value,p,r),v=p,v.key=g,p=void 0),f=="space"&&c.length>0){i.value=y[0],b.key=c[0][0].children[0].key,c[0][0].insertNode(b),i=c[0][0].children[c[0][0].children.length-1],c[0][1]--,c[0][1]==0&&c.shift();break}let w=!0;(He(g)||De(g))&&(f!="space"&&y[0].length==0||a[u-1])&&a[m+1]&&a[u-1]!=" "&&a[m+1]!=" "&&(w=!1);let x=ge(g),L=!1;f!="space"&&h[g].script&&(x-=.1,w&&(L=!0,v.exPriority=!0,T.exPriority=!0,b.exPriority=!0),w||(w=!0),Qt(i,g)&&(w=!1));let j=0;if(i.exPriority&&!L&&(j+=.2),w&&(i.noPriority||x+j<ge(i.key))){let A=!1;for(i.value=v.value,i.children=v.children,i.pair=v.pair,i.exPriority=v.exPriority,i.noPriority=v.noPriority;i.parent;){let _=i.position;if(i=i.parent,j=0,!L){for(let P of i.children)if(P.exPriority){j+=.2;break}}if(!i.children[0].noPriority&&x+j>=ge(i.children[0].key)){let P=i.children[_],S=new k(_,null,i.children[0].key,null,r);S.noPriority=i.children[_].noPriority,S.exPriority=i.children[_].exPriority,i.children[_]=S,S.parent=i,S.insertNode(P),P.key=g,P.noPriority=T.noPriority,P.exPriority=T.exPriority,S.insertNode(T),S.insertNode(b),i=S.children[2],A=!0;break}}if(!A){let _=new k(0,"",null,null,r);n.root.key=g,_.insertNode(n.root),_.insertNode(T),_.insertNode(b),n.root=_,i=n.root.children[2]}}else w||(v.noPriority=!0,T.noPriority=!0,b.noPriority=!0),i.value="",i.insertNode(v),i.insertNode(T),i.insertNode(b),i=i.children[2];break;case"function":y=[a.substring(0,u),g,a.substring(m+1)],y[2][0]==" "&&(y[2]=y[2].substring(1)),v=new k(0,y[0],g,null,r),T=new k(0,y[1],g,null,r),b=new k(0,y[2],g,null,r),p&&(p=W(v.value,p,r),v=p,v.key=g,p=void 0);let M=new k;if(M.conversiontarget=r,M.value="",M.insert(g,g),b.key=g,h[g].pairedArgument){let A=Ue(a,u,g,h[g].pairedArgument,h[g].family);if(A!=-1){let _=[a.substring(m+1,A),a.substring(A+1)],P=ie(_[0].trim(),e,r)[0].root,S=new k(0,_[1],g,null,r);M.insertNode(P),M.insertNode(S)}else M.insertNode(b)}else M.insertNode(b);let X=i;i=M.children[M.children.length-1],v.value.length>0&&(M=Zt(v,M)),M.value="",X.parent?(M.key=X.parent.children[X.position].key,M.position=X.position,M.parent=X.parent,X.parent.children[X.position]=M):n.root=M,h[g]&&h[g].extraArgument&&c.push([M,h[g].extraArgument]);break;case"postfix":case"symbol":case"letter":y=[a.substring(0,u),g,a.substring(m+1)],console.debug("making a symbolNode with",y);let z=new k;if(z.conversiontarget=r,z.value="",z.insert(g,g),z=W(y[0],z,r),p=Q(p,z,r),console.debug("now have stackedTreeNode",p),c.length>0){p.key=c[0][0].children[0].key;let A=c[0][0].children.pop();c[0][0].insertNode(p),c[0][0].insertNode(A),c[0][1]--,c[0][1]==0&&c.shift(),p=void 0}i.value=y[2],console.debug("now have currentNode",i);break;case"multiline":y=[a.substring(0,u),g,a.substring(m+1)];let Je=new k(0,y[0],null,null,r);p=Q(p,Je,r),i.value=y[2],o=g,console.debug("----------- just set exParam = ",o);break;case"UNUSED":y=[a.substring(0,u),g,a.substring(m+1)],i.value=y[2];break}}else{if(p){if(a.trim()!=""){console.debug("388 M2TreeConvert  conversiontarget",r);let v=new k;v.conversiontarget=r,p.key="",v.insertNode(p),v.insert("",""),v.insert(a,""),p=v}let y=i.position;p.position=y,p.key=i.key,i.parent?(p.parent=i.parent,i.parent.children[y]=p):n.root=p}s=!1;break}}return n.addParents(),console.debug("continuing",n.root.children[0],n.root.children[1]),n.combineSubSup(),console.debug("combineSubSup returned",n,"aa",n.root,"bb",n.root.children),n.adjustImpliedMultiplication(),console.debug("adjustImpliedMultiplication returned",n,"aa",n.root,"bb",n.root.children),console.debug(Fe(n.root,"")),[n,o,d]}function Q(t,e,r){if(t){console.debug("stackNode M2TreeConvert  stackedTreeNode.conversiontarget",t.conversiontarget);let n=new k;n.conversiontarget=r,t.key="",n.insertNode(t),n.insert("",""),e.key="",n.insertNode(e),t=n}else t=e;return t}function W(t,e,r){if(t.trim()!=""){console.debug("combinePrev M2TreeConvert  ",t,"xx",e,"cc",r);let n=new k;n.conversiontarget=r,e.key="",n.insert(t,""),n.insert("",""),n.insertNode(e),e=n,console.debug(" combinePrev pNode.conversiontarget",e)}return e}function Zt(t,e){return console.debug("combinePrevNode preNode.conversiontarget",t.conversiontarget),t.insert("",""),t.insertNode(e),t}function Bt(t,e,r){if(t.trim()!=""){console.debug("combineAfter M2TreeConvert  conversiontarget",r);let n=new k;n.conversiontarget=r,e.key="",n.insertNode(e),n.insert("",""),n.insert(t,""),e=n}return e}function Ct(t,e,r,n){let o=Y(e);if(o&&!Gt(t,e,r))return o.mustHaveLeftArgument&&r==0&&!n?void 0:o.type}function Y(t){return h[t]?h[t]:(t=ce.getItem(t),t==-1?void 0:h[t])}function Ft(t){return["(","[","{","⁅","❲"].includes(t)}function De(t){let e=Y(t);return e&&e.type=="operator"}function Dt(t){for(let e=1;e<=t.length;e++){let r=t.substring(0,e);if(De(r)||He(r))return!0}return!1}function He(t){let e=Y(t);return e&&e.type=="relation"}function ge(t){let e=Y(t);switch(t){case" ":case"":return 19;default:return e?e.priority:999}}function Ht(t,e){if(!["(","[","{","⁅","❲"].includes(t[e]))throw new Error("No"+lp+" at index "+e);let r=1;for(let n=e+1;n<t.length;n++)switch(t[n]){case"(":case"[":case"{":case"⁅":case"❲":r++;break;case")":case"]":case"}":case"⁆":case"❳":if(--r==0)return n;break}return-1}function Ut(t,e){if(!["<"].includes(t[e]||[" "].includes(t[e+1])))throw new Error("No"+lp+" at index "+e);let r=1;for(let n=e+1;n<t.length;n++)if(t[n]=="<"&&t[n+1]!=" "&&r++,t[n]==">"&&t[n-1]!=" "&&--r==0)return n;return-1}function Ue(t,e,r,n,o){if(t.substring(e,e+r.length)!=r)throw new Error("No "+r+" at index "+e+" of "+t);let i=1;for(let s=e+1;s<t.length;s++){if(t.substring(s,s+n.length)==n&&--i==0)return s;for(let p of o)t.substring(s,s+p.length)==p&&t[s-1].match(/[\s\d]/g)&&i++}return-1}function Vt(t,e){let r="";for(let n=e+1;n<t.length;n++)switch(t[n]){case`
`:case" ":break;default:r+=t[n]}return r}function Gt(t,e,r){for(let n=r+1;n<t.length&&!t[n].match(/[\s\d]/g);n++)if(e+=t[n],Y(e))return!0;return!1}function Qt(t,e){if(console.debug("checkScriptSimilarity",t),t.pair.length>0||t.parent&&t.parent.exPriority)return!1;let r=t;for(;r.parent&&(r=r.parent,!(r.pair.length>0||t.parent&&t.parent.exPriority));)if(r.key==e)return!0;for(r=t.parent;r&&r.children[0]&&(r=r.children[0],!(r.pair.length>0||t.parent&&t.parent.exPriority));)if(r.key==e)return!0;return!1}function Wt(t,e){return console.debug("combineTree2Latex",t,"params",e,"with output",t.root.outputvalue),t.root.combine(e),console.debug("AGAIN combineTree2Latex",t,"params",e,"with output",t.root.outputvalue),t.root.outputvalue}function Yt(t,e,r,n){console.debug("M2LConvert(str,lp,rp, conversiontarget)",t,e,r,n);for(let d of ce.getAllMultiLine()){let a=t.indexOf(d.slice(0,-1)+"(");for(;a!=-1;){let u=Jt(t,a+d.length-1,"(",")");if(u!=-1){let l=[t.substring(0,a),t.substring(a+d.length,u),t.substring(u+1)];newMiddleStr=d+`
 `,h[d].emptyLineBeforeIndent?(newMiddleStr+=l[1].replaceAll(";",`

 `),newMiddleStr+=`
`):newMiddleStr+=l[1].replaceAll(";",`
 `),t=l[0]+newMiddleStr+l[2],a=t.indexOf(d.slice(0,-1)+"(")}else continue}}t=t.replaceAll("\\,",""),t=t.replaceAll("\\:",""),t=t.replaceAll("\\;",""),t=t.replaceAll("\\!",""),t=t.replace(/([a-zA-Z])\\/g,"$1 "),t=t.replaceAll("\\","");let o=t.split(`
`),i="",s=[],p="";for(;o.length>0;){var c=[];if(s[0]&&h[s[0]].params&&(c=h[s[0]].params),console.debug("  ++  ++  ++  ++  ++  ++  ++  ++  ++  ++ "),console.debug("top of loop  ",o),console.debug("params = ",c),o[0].trim()==""&&!c.includes("system")&&!c.includes("derivation")){console.info("skipping empty string"),o.shift();continue}if(c.length>0&&c.includes("caseEnvironment")){let g=o[0],f=g.split(/(if|when|unless|otherwise)/g);f.length!=3?console.error("invalid cases line",g):(g="casesline("+f[0]+")("+f[1]+")("+f[2]+")",o[0]=g),console.debug("thisLinePieces",f)}else if(c.length>0&&(c.includes("system")||c.includes("derivation"))){let g=o[0];for(;o.length>1&&o[1].trim()!="";)g+=o[1],o.splice(1,1);let f=g.split(/(<=|>=|:=|<|>|=|~|≈|approx|asymp).*?/);if(f.length>3){let y="";for(;f.length>=3;)y=f.pop()+y;f[2]=y}f.length!=3?console.error("invalid system/derivation line",g,"with pieces",f):(f[0].trim()==""?g="derivationline("+f[1].trim()+")("+f[2].trim()+")":g="systemline("+f[0].trim()+")("+f[1].trim()+")("+f[2].trim()+")",o[0]=g),console.debug("thisLine",g,"thisLinePieces",f)}let d=ie(o[0].trim(),c,n);console.debug("temp");let a=d[0],u=d[1],l=Wt(a,c),m="";c.length&&c.includes("caseEnvironment")?(m="cases",n=="MathML"||n=="Speech"&&(l=" case "+l)):c.length&&(c.includes("system")||c.includes("derivation"))&&(c.includes("system")?m="system":c.includes("derivation")&&(m="derivation"),n=="MathML"||n=="Speech"&&(l=" line "+l)),o.length>0&&u.length==0&&(s.length>0&&(!h[s[0]].absorbEmptyLine||o[0].trim().length>0)?h[s[0]].absorbEmptyLine&&o.length>1&&o[1].trim().length>0||o.length==2&&o[1].trim().length==0||o.length==1||(h[s[0]].changeLineTurn?l+=h[s[0]].changeLineTurn+`
`:n=="MathML"||(n=="Speech"?(m=="cases"&&(l+=` end_case
`),(m=="system"||m=="derivation")&&(l+=` end_line
`)):l+=`\\\\
`)):o.length>1&&(h[s[0]]&&h[s[0]].absorbEmptyLine&&o[0].trim().length==0||(l+=`
`))),p=o[0],o.shift(),console.debug("============ exParam",u),h[u]&&(h[u].seperateOut&&(l+=r),h[u].noBeginEnd?l+=h[u].note+"{":n=="MathML"?(u=="cases:"&&(l+='<mrow intent="$table"><mo>{</mo>'),l+='<mtable arg="table" intent=":'+h[u].MathMLnote+`">
`):n=="Speech"?l+=" begin-"+h[u].speechnote+" ":l+="\\begin{"+h[u].note+"}",s.push(u)),s.length>0&&o[0]&&o[0][0]!=" "&&(!h[s[0]].emptyLineBeforeIndent||p.trim().length==0)&&(h[s[0]].noBeginEnd?l+="}":l+="AA\\end{"+h[s[0]].note+"}",h[s[0]].lineBreak&&(l+=`
`),h[s[0]].seperateOut&&(l+=e),s.shift()),i+=l}for(;s.length>0;)h[s[0]].noBeginEnd?i+="}":n=="MathML"?(i+="</mtable><!-- "+h[s[0]].MathMLnote+` -->
`,c.length&&c.includes("caseEnvironment")&&(i+="</mrow>")):n=="Speech"?(h[s[0]].note=="cases"&&(i+="end_case "),h[s[0]].note=="align"&&(i+="end_line "),i+="end-"+h[s[0]].speechnote):i+="\\end{"+h[s[0]].note+"}",h[s[0]].seperateOut&&(i+=e),s.shift();return console.debug("latexStr",i),dt(i)}function de(t,e){console.debug("converting to target",e);let r=Tt(t),n=Rt(r);console.debug("str_separated",n);let o=Kt(n,e);console.debug("firsttest",o);let i=Ot(n,o,e);return console.debug("answer_processed",i),console.debug("convertedComponent",o),console.debug(" "),console.debug("*************************************************************"),console.debug(" "),i=jt(i,e),i}function Kt(t,e){let r={};for(const n of t){const o=n[0],i=n[3]+","+e;if(o=="text")r[i]=[n[0],n[1],n[2]];else if(!(i in r))if(o=="m"||o=="md"){let s=n[2];s=St(s),s=vt(s),r[i]=[n[0],n[1],Ve(s,e)]}else console.error("unknown piece_type",n)}return r}function Ve(t,e){console.debug("starting convertMathSnippet",e,"on",t);let r=Yt(t,"LBRACK","RBRACK",e);return r=bt(r),r}function Jt(t,e,r,n){if(t.substring(e,e+r.length)!=r)throw new Error("No"+r+" at index "+e);for(let o=e+1;o<t.length;o++)switch(t.substring(o,o+n.length)){case n:return o}return-1}let he="STart";he="";const fe=function(t){if(typeof t=="string")return t;if(!Array.isArray(t)){let n="";const o=t.tag;let i=E[o];return i||(i=Z(o)),n+=i.before_begin+i.begin_tag+he,"xmlattributes"in t&&t.xmlattributes&&(n+=" "+t.xmlattributes.trim()),"id"in t&&t.id&&(n+=' xml:id="'+K(t.id)+'"'),Object.keys(t).forEach(c=>{["tag","content","title","xmlattributes","id"].includes(c)||(n+=" "+c+'="'+t.el+'"')}),n+=i.after_begin,"title"in t&&t.title&&(n+="<title>"+t.title+`</title>
`),n+fe(t.content)+i.before_end+i.end_tag+i.after_end}const e=t;let r="";return e.forEach((n,o)=>{if(typeof n=="string"){n.match(/^\s*$/)||(r+="<TEXT>"+n+"</TEXT>",console.log("just added error of",n));return}let i="";const s=n.tag;let p=E[s];typeof p>"u"&&(p=sr),i=i+p.before_begin+p.begin_tag+he,"xmlattributes"in n&&n.xmlattributes&&(i+=" "+n.xmlattributes.trim()),"id"in n&&n.id&&(i+=' xml:id="'+K(n.id)+'"'),Object.keys(n).forEach(l=>{!["tag","content","title","xmlattributes","id"].includes(l)&&!l.startsWith("_")&&(i+=" "+l+'="'+n[l]+'"')}),i+=p.after_begin,"title"in n&&n.title&&(i+="<title>"+n.title+`</title>
`);let d=fe(n.content);s!="text"&&(d=d.replace(/^[\r\n]+/,""),d=d.replace(/[\r\n]+$/,"")),["c","code"].includes(s)&&(d=er(d));let a="";["m","md","me","mdn","men","sm","smen"].includes(s)&&(d.match(/^.*(\.|,|;)\s*$/s)&&(d=d.replace(/\s*$/,""),a=d.slice(-1),d=d.slice(0,-1)),["sm","smen"].includes(s)&&(d=Ve(d,"LaTeX")),d=tr(d)),i=i+d;let u=p.before_end+p.end_tag+a+p.after_end;i=i+u,i.match(/^\s*<p>\s*<\/p>\s*$/)&&(console.log("empty p"),i=""),r=r+i}),r=r.replace(/(\/)(me|md|men|mdn)>\s+(\.|,|;|:)/g,"$1$2>$3"),r},K=function(t){let e=t;return e=e.replace(/ /g,"-"),e=e.replace(/[^a-zA-Z0-9\-]/g,"_"),e},er=function(t){let e=t;return e=e.replace(/&/g,"&amp;"),e=e.replace(/</g,"&lt;"),e=e.replace(/>/g,"&gt;"),e},tr=function(t){let e=t;return e=e.replace(/&/g,"\\amp "),e=e.replace(/</g,"\\lt "),e=e.replace(/>/g,"\\gt "),e},rr=function(t,e,r){let n=r,o=0;const i=t.length;for(;n<e.length;){const s=e[n];if(o<=0&&e.slice(n,n+i)===t)return n;s==="\\"?n++:s==="{"?o++:s==="}"&&o--,n++}return-1},nr=function(t){return t.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")},ir=/^\\AAAAAAAbegin{/,J=function(t,e,r){if(typeof t=="string")return Ge(t);if(!Array.isArray(t)){let i={...t};return i.content=J(i.content,e,r),i}let n=[],o="";return t.forEach((i,s)=>{if(r.includes(i.tag))o&&(n.push({tag:"p",content:o}),o=""),H.includes(i.tag)&&typeof i.content=="string"?(i.content=ye(i.content,I),i.content=J(i.content,e,r)):H.includes(i.tag)&&(i.content=J(i.content,e,r)),n.push(i);else if(i.tag=="text")i.content.split(/\n\s*\n{1,}/).forEach(c=>{const d=o+c;if(d){const a={tag:"p",content:d};n.push(a)}o=""});else if(typeof i.content=="string"&&H.includes(i.tag)){let p=[];i.content.split(/\n\s*\n{1,}/).forEach(d=>{const a=d.trim();a&&p.push({tag:"p",content:a})}),i.content=p,n.push(i)}else n.push(i)}),n},Ge=function(t){let e=[],r="";const n=t.split(/\n\s*\n{1,}/);return console.log("found ",n.length," pieces, which are:",n),n.forEach(o=>{const i=r+o;if(i){console.log("made this_new_text",i);const s={tag:"p",content:i};e.push(s)}r=""}),e},ye=function(t,e){typeof t!="string"&&alert("expected string in splitTextAtDelimiters",t);var r=t;let n;const o=[],i=new RegExp("("+e.map(s=>nr(s.left)).join("|")+")");for(;n=r.search(i),n!==-1;){n>0&&(o.push({tag:"text",content:r.slice(0,n)}),r=r.slice(n));const s=e.findIndex(d=>r.startsWith(d.left));if(n=rr(e[s].right,r,e[s].left.length),n===-1)break;const p=r.slice(0,n+e[s].right.length),c=ir.test(p)?p:r.slice(e[s].left.length,n);o.push({tag:e[s].tag,content:c}),r=r.slice(n+e[s].right.length)}return r.match(/^\s*$/)||o.push({tag:"text",content:r}),o},or=function(t){typeof t!="string"&&alert("expected a string, but got:",t);let e=t;return e=e.replace(/(^|\s|~)\$([^\$\n]+)\$(\s|$|[.,!?;:\-])/mg,"$1<sm>$2</sm>$3"),e=e.replace(/(^|\s)_([^_\n]+)_(\s|$|[.,!?;:])/mg,"$1<term>$2</term>$3"),e=e.replace(/(^|\s)\*\*([^*\n]+)\*\*(\s|$|[.,!?;:])/mg,"$1<alert>$2</alert>$3"),e=e.replace(/(^|\s)\*([^*\n]+)\*(\s|$|[.,!?;:])/mg,"$1<em>$2</em>$3"),e=e.replace(/(^|\s)``([^'"`\n]+)''(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),e=e.replace(/(^|\s)``([^'"`\n]+)"(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),e=e.replace(/(^|\s)`([^'"`\n]+)'(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),e=e.replace(/(^|\s)"([^"\n]+)"(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),e=e.replace(/(^|\s)'([^'\n]+)'(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),e=e.replace(/(^|[^`a-zA-Z0-9])`([^`\n]+)`($|[^`a-zA-A0-9])/mg,"$1<c>$2</c>$3"),e},Qe=function(t,e,r){return at[e+r]},ar=function(t){typeof t!="string"&&alert("expected a string, but got:",t);let e=t;e=e.replace(/<!--.*?-->/g,"");for(let[r,n]of Object.entries(ot)){let o=r;n.forEach(i=>{let s=i;e=e.replace("<"+s+">","<"+o+">"),e=e.replace("<"+s+" ","<"+o+" "),e=e.replace("</"+s+">","</"+o+">"),e=e.replace("\\begin{"+s+"}","\\begin{"+o+"}"),e=e.replace("\\end{"+s+"}","\\end{"+o+"}"),e=e.replace("\\"+s+"{","\\"+o+"{")})}return e},R=function(t,e,r,n,o="all",i="all",s=""){let p=[];typeof e=="string"?e=="displaymath"?p=F:e=="spacelike"?p="spacelike":alert("unknown taglist "+e):typeof e[0]=="string"?p=We(e):p=e;let c=[];if(Array.isArray(t))return t.forEach((d,a)=>{if(r>n&&d.tag!="text")c.push(d);else{let u;o=="all"||o.includes(d.tag)?u=R(d,e,r+1,n,o,i,d.tag):u=d,Array.isArray(u)?u.forEach(l=>{c.push(l)}):c.push(u)}}),c;if(typeof t=="string"){if(r>n+2)return t;if(p==="spacelike")return i=="all"||i.includes(s)?or(t):t;let d=t;return p==="makeparagraphs"?(i=="all"||i.includes(s))&&(d=Ge(d)):(i=="all"||i.includes(s))&&(d=ye(d,p)),d}else{typeof t!="object"&&alert("wrong category for ",t);let d={...t};if(r>n&&d.tag!="text")return d;let a=d.content;return(o=="all"||i.includes(d.tag))&&(a=R(a,e,r+1,n,o,i,d.tag)),d.tag=="text"&&typeof a=="string"?d.content=a:d.tag!="text"?a.length==1&&a[0].tag=="text"?d.content=a[0].content:d.content=a:d=a,d}},q=function(t,e,r=0,n=0,o="all",i="",s="",p="section"){let c=[];if(Array.isArray(t))t.forEach((a,u)=>{let l;typeof a=="object"?l=q({...a},e,r+1,n,o,a.tag,i):l=q(a,e,r+1,n,o,i,s),c.push(l)});else if(typeof t=="object"){if(e=="oneline environments"&&t.tag=="p"&&typeof t.content=="string"){if(t.content.match(/^\s*([A-Za-z]+):/)){let l=t.content.split(":",1)[0].toLowerCase();l=l.trim();const m=t.content.replace(/^\s*[^:]*:\s*/,"");t.tag=l,t.content=m}}else if(e=="extract li"&&t.tag=="p"&&typeof t.content=="string"){if(t.content.match(/^\s*\-+\s/)){const u="li",l=t.content.replace(/^\s*\-+\s*/,"");t.tag=u,t.content=l,t._parenttag="ul"}else if(t.content.match(/^\s*\++\s/)){const u="li",l=t.content.replace(/^\s*\++\s*/,"");t.tag=u,t.content=l,t._parenttag="ol"}else if(t.content.match(/^\s*\(*[0-9]+\.*\)*\s/)){const u="li",l=t.content.replace(/^\s*\(*[0-9]+\.*\)*\s*/,"");t.tag=u,t.content=l,t._parenttag="ol"}}else if(e=="xmlattributes"&&typeof t.content=="string"){var d=new RegExp("^\\s*("+ne.join("|")+")[^<>+]*>","s");if(d.test(t.content)||t.content.match(/^\s*[^\n<>+]*>/))if(t.content.match(/^\s*>/))t.content=t.content.replace(/^\s*>/,"");else{let u=t.content.split(">",1)[0];t.content=t.content.replace(/^\s*[^<>]*>/s,""),"xmlattributes"in t?t.xmlattributes+=u:t.xmlattributes=u}}else if(e=="attributes"&&typeof t.content=="string"){const u=t.content.split(/\n\s*\n{1,}/);if(u.length>1){let l="";var d=new RegExp("^("+ne.join("|")+")");u.forEach(g=>{let f=g.trim();if(d.test(f)){let y=f.split(":",1)[0],v=f.split(":",2)[1].trim();t[y]=v}else l+=g}),t.content=l}}else if(e=="title"&&typeof t.content=="string"){if(t.content.match(/^\s*\[/)||t.content.match(/^\s*<title>/))if(t.content.match(/^\s*\[/)){let u=t.content.split("]",1)[0];u=u.replace(/\s*\[/,""),t.title=u,t.content=t.content.replace(/^\s*\[[^\[\]]*\]/,"")}else{let u=t.content.split("</title>",1)[0];u=u.replace(/\s*<title>/,""),t.title=u,t.content=t.content.replace(/^\s*<title>.*?<\/title>/,"")}}else if(e=="label"&&typeof t.content=="string"){if(t.content.match(/^\s*(\\*)label{[^{}]*}/)){let u=t.content.replace(/^\s*(\\*)label{([^{}]*)}.*/s,"$2");u=K(u),t.id=u,t.content=t.content.replace(/^\s*(\\*)label{([^{}]*)}\s*/,"")}}else if(e=="statements"&&o.includes(i)){let u=[],l={};if(typeof t.content=="string")u=[{tag:"text",content:t.content}],l={tag:"statement",content:u},t.content=[l];else{let m=!1;if(t.content.forEach(g=>{g.tag=="statement"&&(m=!0)}),!m){let g="",f=0;for(f=0;f<t.content.length&&(g=t.content[f],!re.includes(g.tag));++f)u.push(g);l={tag:"statement",content:u};let y=t.content.slice(f);y.unshift(l),t.content=y}}}else if(e=="prefigure"&&o.includes(t.tag)){!("xmlns"in t)&&!("xmlattributes"in t&&t.xmlattributes.includes("xmlns"))&&(t.xmlns="https://prefigure.org");let u=[],l={};if(typeof t.content=="string"){const m=t.content;if(u=m,l={tag:"diagram",content:u},"dimensions"in t&&(l.dimensions=t.dimensions,delete t.dimensions),"margins"in t&&(l.margins=t.margins,delete t.margins),t.content=[l],"bbox"in t){let g={tag:"coordinates",bbox:t.bbox,content:m};delete t.bbox,l.content=[g]}}if(s!="image"){let m={...t};m.content=[...t.content],t={tag:"image",content:[m]},"width"in m&&(t.width=m.width,delete m.width)}}else if(e=="blockquotes"&&o.includes(t.tag)&&typeof t.content=="string"){if(t.content.match(/^\s*\+\+\+sTaRTbQ>/)){let u=t.content.replace(/^\s*\+\+\+sTaRTbQ>/,"");u=u.replace(/\n\s*>/g,`
`);let l=u.split(/\n\s*\n{1,}/),m=[];l.forEach((g,f)=>{m.push({tag:"p",content:g})}),t.content=m,t.tag="blockquote"}}else if(e=="substructure"&&o.includes(t.tag)&&typeof t.content=="string"){const u=U[t.tag],l=We(u),m=ye(t.content,l);t.content=[...m]}else if(e=="clean up substructure"&&o.includes(t.tag)&&Array.isArray(t.content)){const u=t.tag;let l=[];t.content.forEach(m=>{U[u].includes(m.tag)?l.push(m):ne.includes(m.tag)?t[m.tag]=m.content:m.tag=="text"&&m.content.match(/^\s*$/)&&"attributes"in m?"attributes"in t?t.attributes+=m.attributes:t.attributes=m.attributes:m.tag=="text"&&m.content.match(/^\s*$/)||(console.log("problem content",m),alert("problem content: see console.log"))}),t.content=[...l]}else if(e=="extraneous math"&&o.includes(t.tag)&&typeof t.content=="string")t.content=t.content.replace(/^\s*\+\+\+saMePaR/,"");else if(e=="gather li"&&o.includes(t.tag)&&typeof t.content=="object"){let u=[],l="",m=0,g=!1,f=[],y={};for(m=0;m<t.content.length;++m)l=t.content[m],!g&&l.tag!="li"?u.push(l):!g&&l.tag=="li"?(g=!0,f=[l],y.tag=l._parenttag):g&&l.tag=="li"?f.push(l):g&&l.tag!="li"&&(y.content=[...f],u.push({...y}),g=!1,y={},f=[],u.push(l));g&&(y.content=f,u.push({...y})),g=!1,f=[],y={},t.content=u}else if(e=="absorb math"&&(o.includes(t.tag)||t.tag==p)&&typeof t.content=="object"){let u=[],l="",m=0;for(m=0;m<t.content.length;++m){l=t.content[m];const g=u.length;te.includes(l.tag)?g==0?u.push({...l}):u[g-1].tag!="p"?u.push({...l}):typeof u[g-1].content=="string"?(u[g-1].content=[{tag:"text",content:u[g-1].content}],u[g-1].content.push({...l})):u[g-1].content.push({...l}):l.tag=="p"?typeof l.content=="string"&&l.content.match(/\s*\+\+\+saMePaR/)?(l.content=l.content.replace(/\s*\+\+\+saMePaR\s*/,""),u[g-1].content.push({tag:"text",content:l.content})):typeof l.content=="string"?u.push({...l}):l.content.length>0&&l.content[0].tag=="text"&&typeof l.content[0].content=="string"&&l.content[0].content.match(/\s*\+\+\+saMePaR/)?(l.content[0].content=l.content[0].content.replace(/\s*\+\+\+saMePaR\s*/,""),l.content.forEach(f=>{u[g-1].content.push(f)})):l.content.length>0&&u.push({...l}):u.push({...l})}t.content=[...u]}let a={...t};return a.content=q(a.content,e,r+1,n,o,a.tag,i),a}else{if(typeof t!="string"&&(console.log("what is it",t),alert("non-object non-string: ",t)),e=="do_nothing")return t+"X";if(e=="fonts"&&o.includes(i)){let a="";return a=t.replace(/\\('|"|\^|`|~|-|c|H|u|v) ?([a-zA-Z])/mg,Qe),a=a.replace(/\\('|"|\^|`|~|-|c|H|u|v){([a-zA-Z])}/mg,Qe),a}else if(e=="texlike"&&o.includes(i)){let a="";return a=t.replace(/([^-])\-\-([^-])/mg,"$1<mdash/>$2"),a=a.replace(/\bLaTeX\b/mg,"<latex/>"),a=a.replace(/\bTeX\b/mg,"<tex/>"),a=a.replace(/\bPreTeXt\b/mg,"<pretext/>"),a=a.replace(/([^\\])~/mg,"$1<nbsp/>"),a=a.replace(/\(\\(ref|eqref|cite){([^{}]+)}\)/g,function(u,l,m){return'<xref ref="'+K(m)+'"/>'}),a=a.replace(/\\(ref|eqref|cite){([^{}]+)}/g,function(u,l,m){return'<xref ref="'+K(m)+'"/>'}),a=a.replace(/\\(q|term|em|emph|m|c|fn){([^{}]+)}/g,"<$1>$2</$1>"),a=a.replace(/\\(url|href){([^{}]+)}({|\[)([^{}\[\]]+)(\]|})/g,function(u,l,m,g,f){return'<url href="'+m+'">'+f+"</url>"}),a=a.replace(/\\(url|href){([^{}]+)}([^{]|$)/g,function(u,l,m){return'<url href="'+m+'"/>'}),a}else return t}return c},oe=function(t){return{left:"<"+t+">",right:"</"+t+">",tag:t}},be=function(t){return{left:"<"+t+" ",right:"</"+t+">",tag:t}},ve=function(t){return{left:"\\begin{"+t+"}",right:"\\end{"+t+"}",tag:t}},We=function(t){if(!Array.isArray(t))return t;let e=[];return t.forEach(r=>{e.push(be(r)),e.push(oe(r)),e.push(ve(r))}),e},Z=function(t){return{begin_tag:"<"+t,end_tag:"</"+t+">",before_begin:`
`,after_begin:`>
`,before_end:`
`,after_end:`
`}},lr=function(t){return{begin_tag:"<"+t,end_tag:"</"+t+">",before_begin:"",after_begin:">",before_end:"",after_end:""}},F=[{left:"$$",right:"$$",tag:"smen"},{left:"\\[",right:"\\]",tag:"smen"}];rt.forEach(t=>{F.push({left:"\\begin{"+t[0]+"}",right:"\\end{"+t[0]+"}",tag:t[1]})}),F.push({left:"<md>",right:"</md>",tag:"md"}),F.push({left:"<me>",right:"</me>",tag:"me"}),F.push({left:"<mdn",right:"</mdn>",tag:"mdn"}),F.push({left:"<men",right:"</men>",tag:"men"});const I=[];let Ye=[...Te,...Se],we=[...Ye,...$e];we.push("p"),we.push("statement"),Ye.forEach(t=>{I.push(be(t)),I.push(oe(t)),I.push(ve(t))}),Oe.forEach(t=>{I.push(be(t)),I.push(oe(t)),I.push(ve(t))});let ae=Array.from(I,({tag:t})=>t);ae=[...new Set(ae)];let D=[{left:"\\(",right:"\\)",tag:"sm"}];Ee.forEach(t=>{D.push(oe(t))});const Ke={begin_tag:"",end_tag:"",before_begin:"",after_begin:"",before_end:"",after_end:""},sr={begin_tag:"BEGINTAG",end_tag:"ENDTAG",before_begin:"BB",after_begin:"AB",before_end:"BE",after_end:"AE"},E={text:Ke,placeholder:Ke,title:{begin_tag:"<title>",end_tag:"</title>",before_begin:`
`,after_begin:"",before_end:"",after_end:`
`}};Ee.forEach(t=>{E[t]={begin_tag:"<"+t+">",end_tag:"</"+t+">",before_begin:"",after_begin:"",before_end:"",after_end:""}}),we.forEach(t=>{E[t]=Z(t)}),Oe.forEach(t=>{E[t]=Z(t)}),C.forEach(t=>{E[t]=Z(t)}),nt.forEach(t=>{E[t]=Z(t)}),[...Ne,...Pe,...Re].forEach(t=>{E[t]=Z(t)}),E.ol={begin_tag:`<p>
<ol>`,end_tag:`</ol>
</p>`,before_begin:`
`,after_begin:`
`,before_end:`
`,after_end:`
`},E.ul={begin_tag:`<p>
<ul>`,end_tag:`</ul>
</p>`,before_begin:`
`,after_begin:`
`,before_end:`
`,after_end:`
`},te.forEach(t=>{E[t]={begin_tag:`
<`+t,end_tag:"</"+t+">",before_begin:"",after_begin:`>
`,before_end:`
`,after_end:`
`}}),E.sm=lr("m"),E.smen=Z("men"),E.image={begin_tag:"<image",end_tag:"</image>",before_begin:"",after_begin:`>
`,before_end:`
`,after_end:`
`},E.description={begin_tag:"<description>",end_tag:"</description>",before_begin:`
`,after_begin:"",before_end:"",after_end:`
`};function pr(t,e="placeholder"){let r=ar(t),n="";r.match(/^\s*<title>/)?(n=r.replace(/^\s*<title>(.*?)<\/title>.*/s,"$1"),r=r.replace(/^\s*<title>(.*?)<\/title>/,"")):r.match(/^\s*\[/)&&(n=r.replace(/^\s*\[([^\[\]]*)\].*/s,"$1"),r=r.replace(/^\s*\[([^\[\]]*)\]/,""));let i=r.replace(/([^\s])\\label({|\[|\()/g,`$1
\\label$2`).replace(/\n\s*\n\s*>/g,`

+++sTaRTbQ>`);i=i.replace(/(\$\$|\\end{equation}|\\end{align}|\\\]) *\n([^\n])/g,`$1
+++saMePaR$2`),i=i.replace(/(\/me>|\/md>|\/men>|\/mdn>) *\n *([^\n<])/g,`$1
+++saMePaR$2`),i=i.replace(/<p>\s*(<ol>|<ul>|<dl>)/g,"$1"),i=i.replace(/(<\/ol>|<\/ul>|<\/dl>)\s*<\/p>/g,"$1");let s=i.replace(/(<diagram)(.*?)(<\/diagram>)/sg,function(A,_,P,S){const ur=P.replace(/(<|<\/)definition(>)/g,"$1predefinition$2");return _+ur+S}),p=new RegExp("([^\\n])(\\n *("+ne.join("|")+") *:)","g");s=s.replace(p,`$1
$2`),console.log("originaltextC",s);let c={tag:e,content:s};n&&(c.title=n);let d={...c};const a=15;for(let A=0;A<a;++A)$.forEach(P=>{d=R(d,P,0,A),je.forEach(S=>{d=q(d,S[0],0,A,S[1])})});let u={...d};u=J(u,"all",ae);let l={...u};l=q(l,"oneline environments",0,0,"all"),l=q(l,"attributes",0,0,"all"),je.forEach(A=>{l=q(l,A[0],0,0,A[1])}),l=J(l,"all",ae),l=q(l,"blockquotes",0,0,["p"]);let m={...l};m=q(m,"extract li",0,0,"all"),m=q(m,"clean up substructure",0,0,it);const g=R(m,D,0,a+1,"all",O),f=R(g,"spacelike",0,a+1,"all",O),y=R(f,D,0,a+1,"all",O),v=R(y,D,0,a+1,"all",O),T=q(v,"fonts",0,0,O),b=q(T,"texlike",0,0,O);let w=R(b,"spacelike",0,a+1,"all",O);w=R(w,D,0,a+1,"all",O),w=R(w,D,0,a+1,"all",O);const L=q(w,"extract li",0,0,["p"]),j=q(L,"gather li",0,0,H),M=q(j,"absorb math",0,0,H,"","",e);let X=q(M,"statements",0,0,tt),z=q(X,"prefigure",0,0,["prefigure"]);return console.log("tmp5",z),fe(z)}B.FlexTeXtConvert=pr,Object.defineProperty(B,Symbol.toStringTag,{value:"Module"})});
