(function(I,j){typeof exports=="object"&&typeof module<"u"?j(exports):typeof define=="function"&&define.amd?define(["exports"],j):(I=typeof globalThis<"u"?globalThis:I||self,j(I.FlexTeXt={}))})(this,function(I){"use strict";const j=["reading-questions","introduction","statement","task","worksheet","page"],be=["ol","ul","dl"],Ue=["li"],ve=["aside","historical","biographical"],ne=["algorithm","claim","corollary","fact","identity","lemma","proposition","theorem"],oe=["assumption","axiom","conjecture","heuristic","hypothesis","principle"],we=["convention","insight","note","observation","remark","warning"],$e=["example","problem","question"],xe=["definition"],Y=["exercise"],ke=["proof"],Me=["activity","exploration","investigation","project"],K=["md","mdn","me","men"],J=["hint","answer","solution"],Le=["case","task"],_e=["em","term","alert","m","q","c","tag"];[...K];let qe=[...ve,...ne,...oe,...we,...$e,...xe,...Y,...ke,...Me,...J,"blockquote","sidebyside","li","paragraphs","section"];const ee=[...qe,...J,...Le,...j],Ye=["figure","tabular","listing"],Ke=["image","table","program"],Je=["latex-image","prefigure","description","alt"],Ae=["figure","table","tabular","ol","ul","dl"],et=[...ne,...oe,...Y,"task"],B=["text","p","fn","em","term","alert","q","title","li","caption"],tt=[["equation","men"],["align","mdn"]],Ee={diagram:["predefinition","coordinates","annotations"]},rt=["exercisegroup","exercises","prefigure","diagram",...Ee.diagram],nt=["source","ref","width","margins","label","attributes","bbox","dimensions","destination","text"];let x=[];x.push(["worksheet"]),x.push(["page"]),x.push(["paragraphs"]),x.push(["sidebyside"]),x.push([...Me]),x.push([...$e,...Y]),x.push(["introduction","conclusion"]),x.push([...ne,...oe,...we,...xe]),x.push(["task"]),x.push(["statement"]),x.push([...ke,...J]),x.push([...Le]),x.push([...ve]),x.push([...Ye]),x.push([...Ke]),x.push([...Je]),x.push(["prefigure"]),x.push(["diagram"]),x.push(Ee.diagram),x.push([...be]),x.push([...Ue]),x.push(["blockquote"]),x.push("displaymath"),x.push(["p"]);const Te=[["extraneous math",K],["workspace",[...Y]],["margins",["worksheet","sidebyside"]],["margin",["worksheet","sidebyside"]],["attributes","all"],["title","all"],["label","all"]];let ot={abstract:["abs","abstr"],acknowledgement:["ack"],assumption:["assu","ass"],axiom:["axm"],blockquote:["quote"],claim:["cla"],conjecture:["con","conj","conjec"],convention:["conv"],corollary:["cor","corr","coro","corol","corss"],definition:["def","defn","dfn","defi","defin","de"],ol:["enum","enuma","enumerit"],example:["exam","exa","eg","exmp","expl","exm"],exercise:["exer","exers"],fn:["footnote"],hypothesis:["hyp"],lemma:["lem","lma","lemm"],notation:["no","nota","ntn","nt","notn","notat"],observation:["obs"],proof:["pf","prf","demo"],proposition:["prop","pro","prp","props"],question:["qu","ques","quest","qsn"],remark:["rem","rmk","rema","bem","subrem","rems","rmks"],theorem:["thm","theo","theor","thmss"],verbatim:["verb"],warning:["warn","wrn"]};const it=function(t,e,r){let n=r,o=0;const i=t.length;for(;n<e.length;){const u=e[n];if(o<=0&&e.slice(n,n+i)===t)return n;u==="\\"?n++:u==="{"?o++:u==="}"&&o--,n++}return-1},at=function(t){return t.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")},lt=/^\\AAAAAAAbegin{/,D=function(t,e,r){if(typeof t=="string")return Se(t);if(!Array.isArray(t)){let i={...t};return i.content=D(i.content,e,r),i}let n=[],o="";return t.forEach((i,u)=>{r.includes(i.tag)?(o&&(n.push({tag:"p",content:o}),o=""),ee.includes(i.tag)&&typeof i.content=="string"?(i.content=ie(i.content,C),i.content=D(i.content,e,r)):ee.includes(i.tag)&&(i.content=D(i.content,e,r)),n.push(i)):i.tag=="text"?i.content.split(/\n{2,}/).forEach(l=>{const s=o+l;if(s){const a={tag:"p",content:s};n.push(a)}o=""}):n.push(i)}),n},Se=function(t){let e=[],r="";const n=t.split(/\n{2,}/);return console.log("found ",n.length," pieces, which are:",n),n.forEach(o=>{const i=r+o;if(i){console.log("made this_new_text",i);const u={tag:"p",content:i};e.push(u)}r=""}),e},ie=function(t,e){typeof t!="string"&&alert("expected string in splitTextAtDelimiters",t);var r=t;let n;const o=[],i=new RegExp("("+e.map(u=>at(u.left)).join("|")+")");for(;n=r.search(i),n!==-1;){n>0&&(o.push({tag:"text",content:r.slice(0,n)}),r=r.slice(n));const u=e.findIndex(s=>r.startsWith(s.left));if(n=it(e[u].right,r,e[u].left.length),n===-1)break;const p=r.slice(0,n+e[u].right.length),l=lt.test(p)?p:r.slice(e[u].left.length,n);o.push({tag:e[u].tag,content:l}),r=r.slice(n+e[u].right.length)}return r.match(/^\s*$/)||o.push({tag:"text",content:r}),o},st=function(t){typeof t!="string"&&alert("expected a string, but got:",t);let e=t;return e=e.replace(/(^|\s|~)\$([^\$\n]+)\$(\s|$|[.,!?;:\-])/mg,"$1<m>$2</m>$3"),e=e.replace(/(^|\s)_([^_\n]+)_(\s|$|[.,!?;:])/mg,"$1<term>$2</term>$3"),e=e.replace(/(^|\s)\*\*([^*\n]+)\*\*(\s|$|[.,!?;:])/mg,"$1<alert>$2</alert>$3"),e=e.replace(/(^|\s)\*([^*\n]+)\*(\s|$|[.,!?;:])/mg,"$1<em>$2</em>$3"),e=e.replace(/(^|\s)``([^'"`\n]+)''(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),e=e.replace(/(^|\s)``([^'"`\n]+)"(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),e=e.replace(/(^|\s)`([^'"`\n]+)'(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),e=e.replace(/(^|\s)"([^"\n]+)"(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),e=e.replace(/(^|\s)'([^'\n]+)'(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),e=e.replace(/(^|[^`a-zA-Z0-9])`([^`\n]+)`($|[^`a-zA-A0-9])/mg,"$1<c>$2</c>$3"),e},Ne=function(t,e,r){return toUnicode[e+r]},pt=function(t){typeof t!="string"&&alert("expected a string, but got:",t);let e=t;e=e.replace(/<!--.*?-->/g,"");for(let[r,n]of Object.entries(ot)){let o=r;n.forEach(i=>{let u=i;e=e.replace("<"+u+">","<"+o+">"),e=e.replace("<"+u+" ","<"+o+" "),e=e.replace("</"+u+">","</"+o+">"),e=e.replace("\\begin{"+u+"}","\\begin{"+o+"}"),e=e.replace("\\end{"+u+"}","\\end{"+o+"}"),e=e.replace("\\"+u+"{","\\"+o+"{")})}return e},P=function(t,e,r,n,o="all",i="all",u=""){let p=[];typeof e=="string"?e=="displaymath"?p=Z:e=="spacelike"?p="spacelike":alert("unknown taglist "+e):typeof e[0]=="string"?p=Ve(e):p=e;let l=[];if(Array.isArray(t))return t.forEach((s,a)=>{if(r>n&&s.tag!="text")l.push(s);else{let g;o=="all"||o.includes(s.tag)?g=P(s,e,r+1,n,o,i,s.tag):g=s,Array.isArray(g)?g.forEach(d=>{l.push(d)}):l.push(g)}}),l;if(typeof t=="string"){if(r>n+2)return t;if(p==="spacelike")return i=="all"||i.includes(u)?st(t):t;let s=t;return p==="makeparagraphs"?(i=="all"||i.includes(u))&&(s=Se(s)):(i=="all"||i.includes(u))&&(s=ie(s,p)),s}else{typeof t!="object"&&alert("wrong category for ",t);let s={...t};if(r>n&&s.tag!="text")return s;let a=s.content;return(o=="all"||i.includes(s.tag))&&(a=P(a,e,r+1,n,o,i,s.tag)),s.tag=="text"&&typeof a=="string"?s.content=a:s.tag!="text"?a.length==1&&a[0].tag=="text"?s.content=a[0].content:s.content=a:s=a,s}},E=function(t,e,r=0,n=0,o="all",i="",u="section"){let p=[];if(Array.isArray(t))t.forEach((l,s)=>{let a;typeof l=="object"?a=E({...l},e,r+1,n,o,l.tag):a=E(l,e,r+1,n,o,i),p.push(a)});else if(typeof t=="object"){if(e=="oneline environments"&&typeof t.content=="string"){if(t.content.match(/^\s*([A-Za-z]+):/)){const a=t.content.split(":",1)[0].toLowerCase(),g=t.content.replace(/^\s*[^:]*:\s*/,"");nt.includes(a)||(t.tag=a,t.content=g)}}else if(e=="extract li"&&t.tag=="p"&&typeof t.content=="string"){if(t.content.match(/^\s*\-+\s/)){const s="li",a=t.content.replace(/^\s*\-+\s*/,"");t.tag=s,t.content=a,t.parenttag="ul"}else if(t.content.match(/^\s*\++\s/)){const s="li",a=t.content.replace(/^\s*\++\s*/,"");t.tag=s,t.content=a,t.parenttag="ol"}else if(t.content.match(/^\s*\(*[0-9]+\.*\)*\s/)){const s="li",a=t.content.replace(/^\s*\(*[0-9]+\.*\)*\s*/,"");t.tag=s,t.content=a,t.parenttag="ol"}}else if(e=="attributes"&&typeof t.content=="string"){if(t.content.match(/^\s*[^\n<>+]*>/))if(t.content.match(/^\s*>/))t.content=t.content.replace(/^\s*>/,"");else{let s=t.content.split(">",1)[0];t.content=t.content.replace(/^\s*[^\n<>+]*>/,""),"attributes"in t?t.attributes+=s:t.attributes=s}}else if(e=="title"&&typeof t.content=="string"){if(t.content.match(/^\s*\[/)||t.content.match(/^\s*<title>/))if(t.content.match(/^\s*\[/)){let s=t.content.split("]",1)[0];s=s.replace(/\s*\[/,""),t.title=s,t.content=t.content.replace(/^\s*\[[^\[\]]*\]/,"")}else{let s=t.content.split("</title>",1)[0];s=s.replace(/\s*<title>/,""),t.title=s,t.content=t.content.replace(/^\s*<title>.*?<\/title>/,"")}}else if(e=="label"&&typeof t.content=="string"){if(t.content.match(/^\s*(\\*)label{[^{}]*}/)){let s=t.content.replace(/^\s*(\\*)label{([^{}]*)}.*/s,"$2");s=sanitizeXMLattributes(s),t.label=s,t.content=t.content.replace(/^\s*(\\*)label{([^{}]*)}\s*/,"")}}else if(e=="statements"&&o.includes(i)){let s=[],a={};if(typeof t.content=="string")s=[{tag:"text",content:t.content}],a={tag:"statement",content:s},t.content=[a];else{let g=!1;if(t.content.forEach(d=>{d.tag=="statement"&&(g=!0)}),!g){let d="",h=0;for(h=0;h<t.content.length&&(d=t.content[h],!J.includes(d.tag));++h)s.push(d);a={tag:"statement",content:s};let c=t.content.slice(h);c.unshift(a),t.content=c}}}else if(e!="statements"){if(e=="blockquotes"&&o.includes(t.tag)&&typeof t.content=="string"){if(t.content.match(/^\s*\+\+\+sTaRTbQ>/)){let s=t.content.replace(/^\s*\+\+\+sTaRTbQ>/,"");s=s.replace(/\n\s*>/g,`
`);let a=s.split(/\n{2,}/),g=[];a.forEach((d,h)=>{g.push({tag:"p",content:d})}),t.content=g,t.tag="blockquote"}}else if(e=="substructure"&&o.includes(t.tag)&&typeof t.content=="string"){const s=subenvironments[t.tag],a=Ve(s),g=ie(t.content,a);t.content=[...g]}else if(e=="clean up substructure"&&o.includes(t.tag)&&Array.isArray(t.content)){const s=t.tag;new_content=[],t.content.forEach(a=>{subenvironments[s].includes(a.tag)?new_content.push(a):a.tag=="text"&&a.content.match(/^\s*$/)&&"attributes"in a?"attributes"in t?t.attributes+=a.attributes:t.attributes=a.attributes:a.tag=="text"&&a.content.match(/^\s*$/)||(console.log("problem content",a),alert("problem content: see console.log"))}),t.content=[...new_content]}else if(e=="extraneous math"&&o.includes(t.tag)&&typeof t.content=="string")t.content=t.content.replace(/^\s*\+\+\+saMePaR/,"");else if(e=="gather li"&&o.includes(t.tag)&&typeof t.content=="object"){let s=[],a="",g=0,d=!1,h=[],c={};for(g=0;g<t.content.length;++g)a=t.content[g],!d&&a.tag!="li"?s.push(a):!d&&a.tag=="li"?(d=!0,h=[a],c.tag=a.parenttag):d&&a.tag=="li"?h.push(a):d&&a.tag!="li"&&(c.content=[...h],s.push({...c}),d=!1,c={},h=[],s.push(a));d&&(c.content=h,s.push({...c})),d=!1,h=[],c={},t.content=s}else if(e=="absorb math"&&(o.includes(t.tag)||t.tag==u)&&typeof t.content=="object"){let s=[],a="",g=0;for(g=0;g<t.content.length;++g){a=t.content[g];const d=s.length;K.includes(a.tag)?d==0?s.push({...a}):s[d-1].tag!="p"?s.push({...a}):typeof s[d-1].content=="string"?(s[d-1].content=[{tag:"text",content:s[d-1].content}],s[d-1].content.push({...a})):s[d-1].content.push({...a}):a.tag=="p"?typeof a.content=="string"&&a.content.match(/\s*\+\+\+saMePaR/)?(a.content=a.content.replace(/\s*\+\+\+saMePaR\s*/,""),s[d-1].content.push({tag:"text",content:a.content})):typeof a.content=="string"?s.push({...a}):a.content.length>0&&a.content[0].tag=="text"&&typeof a.content[0].content=="string"&&a.content[0].content.match(/\s*\+\+\+saMePaR/)?(a.content[0].content=a.content[0].content.replace(/\s*\+\+\+saMePaR\s*/,""),a.content.forEach(h=>{s[d-1].content.push(h)})):a.content.length>0&&s.push({...a}):s.push({...a})}t.content=[...s]}}let l={...t};return l.content=E(l.content,e,r+1,n,o,l.tag),l}else{if(typeof t!="string"&&(console.log("what is it",t),alert("non-object non-string: ",t)),e=="do_nothing")return t+"X";if(e=="fonts"&&o.includes(i)){let l="";return l=t.replace(/\\('|"|\^|`|~|-|c|H|u|v) ?([a-zA-Z])/mg,Ne),l=l.replace(/\\('|"|\^|`|~|-|c|H|u|v){([a-zA-Z])}/mg,Ne),l}else if(e=="texlike"&&o.includes(i)){let l="";return l=t.replace(/([^-])\-\-([^-])/mg,"$1<mdash/>$2"),l=l.replace(/\bLaTeX\b/mg,"<latex/>"),l=l.replace(/\bTeX\b/mg,"<tex/>"),l=l.replace(/\bPreTeXt\b/mg,"<pretext/>"),l=l.replace(/([^\\])~/mg,"$1<nbsp/>"),l=l.replace(/\(\\(ref|eqref|cite){([^{}]+)}\)/g,function(s,a,g){return'<xref ref="'+sanitizeXMLattributes(g)+'"/>'}),l=l.replace(/\\(ref|eqref|cite){([^{}]+)}/g,function(s,a,g){return'<xref ref="'+sanitizeXMLattributes(g)+'"/>'}),l=l.replace(/\\(q|term|em|emph|m|c|fn){([^{}]+)}/g,"<$1>$2</$1>"),l=l.replace(/\\(url|href){([^{}]+)}({|\[)([^{}\[\]]+)(\]|})/g,function(s,a,g,d,h){return'<url href="'+g+'">'+h+"</url>"}),l=l.replace(/\\(url|href){([^{}]+)}([^{]|$)/g,function(s,a,g){return'<url href="'+g+'"/>'}),l}else return t}return p};var m={"+":{comment:["¼Ó"],alternative:["plus","¼Ó"],type:"operator",priority:10,rule:{"2,3":"#1 + #3"},ruleML:{"2,3":"#1<mo>+</mo>#3"},speech:{"2,3":"#1 plus #3"}},"-":{comment:["¼õ"],alternative:["minus","subtracts","¼õ"],type:"operator",priority:10,mustHaveLeftArgument:!0,rule:{"2,3":"#1 - #3"},ruleML:{"2,3":"#1<mo>-</mo>#3"},speech:{"2,3":"#1 minus #3"}},"∘":{comment:[],alternative:["of","circ"],type:"operator",priority:10,mustHaveLeftArgument:!0,rule:{"2,3":"#1 \\circ #3"},ruleML:{"2,3":'#1<mo intent="of">∘</mo>#3'},speech:{"2,3":"#1 of #3"}},"⭐":{comment:[],alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 * #3"},ruleML:{"2,3":"#1<mo>∗</mo>#3"},speech:{"2,3":"#1 star #3"}},"😑":{comment:[],alternative:[],type:"function",priority:91,rule:{"1,2":"{-#2}"},ruleML:{"1,2":"<mrow><mo>-</mo>#2</mrow>"},speech:{"1,2":" quantityN negative #2 Nendquantity "}},"⚡":{comment:[],alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 #3"},ruleML:{"2,3":"#1<mo>&ApplyFunction;</mo>#3"},speech:{"2,3":"#1 of #3"}},"*":{comment:["³Ë"],alternative:["multiply","³Ë"],type:"operator",priority:20,rule:{"2,3":"#1 #3"},ruleML:{"2,3":"#1<mo>&InvisibleTimes;</mo>#3"},speech:{"2,3":"#1 times #3"}},"/":{comment:["³ý, ³ýÒÔ"],alternative:["over","divide","³ý","³ýÒÔ"],type:"operator",wrappedarguments:!0,priority:20,rule:{"2,3":"\\frac{#1}{#3}"},offpair:{"2,3":[1,3]},ruleML:{"2,3":"<mfrac><mrow>#1</mrow><mrow>#3</mrow></mfrac>"},speech:{"2,3":"fraction #1 denominator #3 enddenominator"}},"//":{alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 / #3"},speech:{"2,3":" inline fraction #1 over #3 endfraction "},ruleML:{"2,3":"#1<mo>/</mo>#3"}},"=":{comment:["µÈÓÚ"],alternative:["equal","µÈÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 = #3"},ruleML:{"2,3":"#1<mo>=</mo>#3"},speech:{"2,3":"#1 equals #3"}},">=":{comment:["´óÓÚµÈÓÚ"],alternative:["⦊=","ge","geq","´óÓÚµÈÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\geq #3"},ruleML:{"2,3":"#1<mo>≥</mo>#3"},speech:{"2,3":"#1 greater than or equal to #3"}},"<=":{comment:["Ð¡ÓÚµÈÓÚ"],alternative:["⦉=","le","leq","Ð¡ÓÚµÈÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\leq #3"},ruleML:{"2,3":"#1<mo>≤</mo>#3"},speech:{"2,3":"#1 less than or equal to #3"}},"^":{comment:["µ½","ÖÕÖ¹Öµ","´Î·½","ÉÏ±ê"],alternative:["µ½","ÖÕÖ¹Öµ","´Î·½","ÉÏ±ê"],type:"operator",priority:30,script:!0,rule:{"2,3":"#1^{#@3}"},offpair:{"2,3":[3]},ruleML:{"2,3":"<msup><mrow>#1</mrow><mrow>#@3</mrow></msup>"},speech:{"2,3":" quantityV #1 Vendquantity to the quantityE #@3 Eendquantity "}},"▲":{comment:[],alternative:[],type:"operator",priority:30,script:!0,rule:{"2,3":"#1^{#@3}"},offpair:{"2,3":[3]},ruleML:{"2,3":"<msup><mrow>#1</mrow><mrow>#@3</mrow></msup>"},speech:{"2,3":" quantityV #1 Vendquantity derivative quantityE #@3 Eendquantity "}},_:{comment:["´Ó","³õÊ¼Öµ","ÏÂ±ê"],alternative:["´Ó","³õÊ¼Öµ","ÏÂ±ê"],type:"operator",priority:30,script:!0,rule:{"2,3":"#1_{#@3}"},offpair:{"2,3":[3]},ruleML:{"2,3":"<msub><mrow>#1</mrow><mrow>#@3</mrow></msub>"},speech:{"2,3":" quantityX #1 Xendquantity sub quantityY #@3 Yendquantity "}},subsup:{comment:[],alternative:[],type:"operator",priority:30,script:!0,rule:{"2,4":"#1_{#@3}^{#@4}"},offpair:{"2,4":[3,4]},ruleML:{"2,4":"<msubsup><mrow>#1</mrow><mrow>#@3</mrow><mrow>#@4</mrow></msubsup>"},speech:{"2,4":" quantityX #1 Xendquantity sub quantityY #@3 Yendquantity to the quantityZ #@4 Zendquantity"}},"^^":{alternative:[],type:"operator",priority:30,script:!0,rule:{"2,3":"#{}^#@3 #1"},offpair:{"2,3":[3]}},__:{alternative:[],type:"operator",priority:30,script:!0,rule:{"2,3":"#{}_#@3 #1"},offpair:{"2,3":[3]}},"<":{comment:["Ð¡ÓÚ"],alternative:["⦉","less than","Ð¡ÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\lt #3"},ruleML:{"2,3":"#1<mo>&lt;</mo>#3"},speech:{"2,3":"  #1 less than #3 "}},">":{comment:["´óÓÚ"],alternative:["⦊","greater than","´óÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\gt #3"},ruleML:{"2,3":"#1<mo>&gt;</mo>#3"},speech:{"2,3":"  #1 greater than #3 "}},"\n":{alternative:[],type:"relation",priority:-10,rule:{"2,3":`#1 
 #3`}},",":{alternative:[],type:"operator",priority:-10,rule:{"2,3":"#1,#3"},ruleML:{"2,3":"#1<mo>,</mo>#3"},speech:{"2,3":"#1 comma #3"}},"?":{alternative:[],type:"symbol",priority:10,rule:{"2,3":"#1,#3"},ruleML:{"2,3":"#1<mo>,</mo>#3"},speech:{"2,3":"#1 comma #3"}},";":{alternative:[],type:"operator",priority:-10,rule:{"2,3":"#1;#3"}},"|":{alternative:[],type:"operator",priority:-10,rule:{"2,3":"#1 \\mid #3"},speech:{"2,3":"#1 divides #3"},ruleML:{"2,3":'#1<mo intent="divides">|</mo>#3'}},"+-":{comment:["Õý¸º","¼Ó¼õ"],alternative:["plusminus","pm","¼Ó¼õ","Õý¸º"],type:"operator",priority:10,rule:{"2,3":"#1 \\pm #3"},ruleML:{"2,3":"#1<mo>±</mo>#3"},speech:{"2,3":"#1 plus-minus #3"}},"-+":{comment:[],alternative:["minusplus","mp"],type:"operator",priority:10,rule:{"2,3":"#1 \\mp #3"},ruleML:{"2,3":"#1<mo>∓</mo>#3"},speech:{"2,3":"#1 minus-plus #3"}},del:{comment:["Æ«Î¢·Ö"],alternative:["partial","Æ«Î¢·Ö"],type:"symbol",priority:-1,rule:{"1,1":"\\partial"}},grad:{alternative:["nabla"],type:"symbol",priority:-1,rule:{"1,1":"\\nabla"}},"O/":{alternative:["emptyset"],type:"symbol",priority:-1,rule:{"1,1":"\\emptyset"},speech:{"1,1":" empty set "},ruleML:{"1,1":"<mi>∅</mi>"}},infty:{comment:["ÎÞÇî´ó"],alternative:["infinity","oo","ÎÞÇî´ó"],type:"symbol",priority:-1,rule:{"1,1":"\\infty"},speech:{"1,1":" infinity "},ruleML:{"1,1":"<mi>∞</mi>"}},"✂️":{comment:[],alternative:[],type:"symbol",priority:-1,rule:{"1,1":""},speech:{"1,1":""},ruleML:{"1,1":""}},aleph:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\aleph"},speech:{"1,1":" aleph "},ruleML:{"1,1":"<mi>א</mi>"}},backslash:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\backslash "},speech:{"1,1":" backslash "},ruleML:{"1,1":"<mi>\\</mi>"}},"'":{comment:["ËùÒÔ"],alternative:["prime"],type:"symbol",priority:-1,rule:{"1,1":"'"},speech:{"1,1":" prime "},ruleML:{"1,1":"<mo>&#x2032;</mo>"}},":.":{comment:["ËùÒÔ"],alternative:["therefore","thus","hence","ËùÒÔ"],type:"symbol",priority:-1,rule:{"1,1":"\\therefore"}},":'":{comment:["ÒòÎª"],alternative:["because","since","ÒòÎª"],type:"symbol",priority:-1,rule:{"1,1":"\\because"}},"...":{comment:["Ê¡ÂÔºÅ"],alternative:["Ê¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"#comma?[\\ldots&\\cdots]"}},ldots:{comment:["µÍÊ¡ÂÔºÅ"],alternative:["µÍÊ¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\ldots"}},cdots:{comment:["ÖÐÊ¡ÂÔºÅ","ÖÐÐÄÊ¡ÂÔºÅ"],alternative:["ÖÐÊ¡ÂÔºÅ","ÖÐÐÄÊ¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\cdots"}},vdots:{comment:["ÊúÊ¡ÂÔºÅ"],alternative:["ÊúÊ¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\vdots"}},ddots:{comment:["Ð±Ê¡ÂÔºÅ"],alternative:["Ð±Ê¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\ddots"}},frown:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\frown"}},diamond:{comment:["ÁâÐÎ"],alternative:["ÁâÐÎ"],type:"symbol",priority:-1,rule:{"1,1":"\\diamond"}},square:{comment:["·½ÐÎ","Õý·½ÐÎ"],alternative:["·½ÐÎ","Õý·½ÐÎ"],type:"symbol",priority:-1,rule:{"1,1":"\\square"}},CC:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{C}"},speech:{"1,1":" C "},ruleML:{"1,1":"<mi>ℂ</mi>"}},NN:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{N}"},speech:{"1,1":" N "},ruleML:{"1,1":"<mi>ℕ</mi>"}},QQ:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{Q}"},speech:{"1,1":" Q "},ruleML:{"1,1":"<mi>ℚ</mi>"}},RR:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{R}"},speech:{"1,1":" R "},ruleML:{"1,1":"<mi>ℝ</mi>"}},ZZ:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{Z}"},speech:{"1,1":" Z "},ruleML:{"1,1":"<mi>ℤ</mi>"}},sqrt:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\sqrt{#2}"},speech:{"1,2":" square root of quantityZ #2 Zendquantity "},ruleML:{"1,2":"<msqrt><mrow>#2</mrow></msqrt>"}},lim:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\lim_{#2}"},speech:{"1,2":" limit of #2 endlimit "},ruleML:{"1,2":"<munder><mo>lim</mo><mrow>#2</mrow></munder>"}},quote:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\text{ #2 }"},speech:{"1,2":" #2 "},ruleML:{"1,2":'<mspace width="0.5em"></mspace><mtext>#2</mtext><mspace width="0.5em"></mspace>'}},gcd:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\gcd(#2)"},speech:{"1,2":" gcd of quantityZ #2 Zendquantity "},ruleML:{"1,2":"<mi>gcd</mi><mo>&ApplyFunction;</mo>(#2)"}},cardinality:{comment:["»ùÊý"],alternative:["card","»ùÊý"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" cardinality of quantityB #2 Bendquantity "},ruleML:{"1,2":'<mrow intent="cardinality($b)"><mo>|</mo><wrap arg="b">#2</wrap><mo>|</mo></mrow>'}},abs:{comment:["¾ø¶ÔÖµ"],alternative:["absolute","¾ø¶ÔÖµ"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" absolute value of quantityB #2 Bendquantity "},ruleML:{"1,2":'<mrow intent="absolute-value($absb)"><mo>|</mo><mrow arg="absb">#2</mrow><mo>|</mo></mrow>'}},norm:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" norm of quantityB #2 Bendquantity "},ruleML:{"1,2":'<mrow intent="norm($normb)"><mo>|</mo><mrow arg="normb">#2</mrow><mo>|</mo></mrow>'}},det:{comment:["¾ø¶ÔÖµ"],alternative:["determinant"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" determinant of #2 "},ruleML:{"1,2":'<mrow intent="determinant($detb)"><mo>|</mo><wrap arg="detb">#2</wrap><mo>|</mo></mrow>'}},order:{comment:["¾ø¶ÔÖµ"],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" order of #2 "},ruleML:{"1,2":'<mrow intent="order($orderb)"><mo>|</mo><wrap arg="orderb">#2</wrap><mo>|</mo></mrow>'}},span:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\langle #2\\rangle"},speech:{"1,2":" span of #2 "},ruleML:{"1,2":'<mrow intent="span($c)"><mo>⟨</mo><mrow arg="c">#2</mrow><mo>⟩</mo></mrow>'}},vector:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\langle #2\\rangle"},speech:{"1,2":"coordinate vector #2 endvector"},ruleML:{"1,2":'<mrow intent="coordinate-vector($c)"><mo>⟨</mo><mrow arg="c">#2</mrow><mo>⟩</mo></mrow>'}},anglebrackets:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\langle #2\\rangle"},speech:{"1,2":" anglebrackets #2 endanglebrackets "},ruleML:{"1,2":'<mrow intent="angle-brackets($c)"><mo>⟨</mo><mrow arg="c">#2</mrow><mo>⟩</mo></mrow>'}},setof:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\{#2\\}"},speech:{"1,2":"set #2 endset "},ruleML:{"1,2":'<mrow intent="set($d)"><mo>{</mo><mrow arg="d">#2</mrow><mo>}</mo></mrow>'}},floor:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\lfloor #2 \\rfloor"},speech:{"1,2":"floor of #2 endfloor"},ruleML:{"1,2":'<mrow intent="floor($e)"><mo>⌊</mo><mrow arg="e">#2</mrow><mo>⌋</mo></mrow>'}},ceiling:{alternative:["ceil"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\lceiling #2 \\rceiling"}},bigO:{alternative:[],type:"function",priority:15,rule:{"1,2":"O#2"},speech:{"1,2":"big-Oh of #2"},ruleML:{"1,2":'<mi intent="bigO">O</mi><mo>&ApplyFunction;</mo>#2'}},log:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log #2"},speech:{"1,2":"log of #2"},ruleML:{"1,2":"<mi>log</mi><mo>&ApplyFunction;</mo>#2"}},llog:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log_2 #2"},speech:{"1,2":"log log of #2"},ruleML:{"1,2":'<msub><mi>log</mi><mn intent=":index">2</mn></msub><mo>&ApplyFunction;</mo>#2'}},lllog:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log_3 #2"},speech:{"1,2":"log log log of #2"},ruleML:{"1,2":'<msub><mi>log</mi><mn intent=":index">3</mn></msub><mo>&ApplyFunction;</mo>#2'}},baselog:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log"},speech:{"1,2":"log "},ruleML:{"1,2":"log"}},ln:{alternative:["ln"],type:"function",priority:15,rule:{"1,2":"\\ln #2"},speech:{"1,2":"natural log of #2"},ruleML:{"1,2":"<mi>ln</mi><mo>&ApplyFunction;</mo>#2"}},baseln:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\ln"},speech:{"1,2":"natural log "},ruleML:{"1,2":"ln"}},root:{alternative:[],type:"function",priority:55,extraArgument:1,offpair:{"1,3":[2,3]},rule:{"1,3":"\\sqrt[#2]{#3}","1,2":"\\sqrt{#2}"}},frac:{alternative:[],type:"function",priority:20,extraArgument:1,offpair:{"1,3":[2,3]},rule:{"1,3":"\\frac{#2}{#3}","1,2":"\\frac{#2@1}{#2@-1}"}},summm:{comment:["×ÜºÍ","ÇóºÍ"],alternative:["summation","×ÜºÍ","ÇóºÍ"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\sum{#2}"}},fundef:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2\\,:\\, #3 	o #4"},speech:{"1,4":"function #2 from #3 to #4 "},ruleML:{"1,4":"<mrow>#2<mo>:</mo>#3<mo>→</mo>#4</mrow>"}},congruentmod:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2\\equiv #3 \\pmod  #4"},speech:{"1,4":"#2 congruent to #3 modulo #4 "},ruleML:{"1,4":'<mrow>#2<mo>≡</mo>#3<mspace width="0.5em"></mspace><mo>(</mo><mi>mod</mi><mspace width="0.25em"></mspace>#4<mo>)</mo></mrow>'}},notcongruentmod:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2\\not\\equiv #3 \\pmod  #4"},speech:{"1,4":"#2 not congruent to #3 modulo #4 "},ruleML:{"1,4":'<mrow>#2<mo>≢</mo>#3<mspace width="0.5em"></mspace><mo>(</mo><mi>mod</mi><mspace width="0.25em"></mspace>#4<mo>)</mo></mrow>'}},wrapper:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":" #2 "},speech:{"1,2":"#2"},ruleML:{"1,2":"#2"}},opwrap:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2],"1,3":[2]},rule:{"1,2":" #2 ","1,3":" #2{#3}"},speech:{"1,2":"#2","1,3":"#2 #3 "},ruleML:{"1,2":"#2","1,3":"#2<mrow>#3</mrow>"}},limsop:{alternative:[],type:"function",priority:55,offpair:{"1,3":[2,3],"1,4":[1,2,3,4],"1,5":[1,2,3,4,5]},extraArgument:2,rule:{"1,4":"#2_{#3}^{#4}"},speech:{"1,4":" #2 from #3 to #4 "},ruleML:{"1,4":"<munderover>#2<mrow>#3</mrow><mrow>#4</mrow></munderover>"}},llimop:{alternative:[],type:"function",priority:55,offpair:{"1,3":[2,3]},extraArgument:1,rule:{"1,3":"#2_{#3}"},speech:{"1,3":" #2 over #3 "},ruleML:{"1,3":"<munder>#2<mrow>#3</mrow></munder>"}},functionpower:{alternative:[],type:"function",priority:55,offpair:{"1,4":[2,3]},extraArgument:2,rule:{"1,4":"#2^{#3}#4"},speech:{"1,4":" #2 power #3 of quantityF #4 Fendquantity "},ruleML:{"1,4":"<msup><mi>#2</mi><mrow>#3</mrow></msup><mo>&ApplyFunction;</mo>#4"}},functionsubscript:{alternative:[],type:"function",priority:55,offpair:{"1,4":[2,3]},extraArgument:2,rule:{"1,4":"#2_{#3}#4"},speech:{"1,4":" #2 sub #3 of quantityF #4 Fendquantity "},ruleML:{"1,4":"<msub><mi>#2</mi><mrow>#3</mrow></msub><mo>&ApplyFunction;</mo>#4"}},bigop:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":" #2 "},speech:{"1,2":" #2 "},ruleML:{"1,2":"#2"}},intlims:{alternative:[],type:"function",priority:55,offpair:{"1,6":[2,3,4,5,6]},extraArgument:4,rule:{"1,6":"#2_{#3}^{#4} #5 \\,d#6"},speech:{"1,6":" #2 from #3 to #4 of #5 d#6 "},ruleML:{"1,6":'<mrow><munderover>#2<mrow>#3</mrow><mrow>#4</mrow></munderover>#5<mspace width="0.167em"></mspace><mo>&dd;</mo>#6</mrow>'}},intlimsweight:{alternative:[],type:"function",priority:55,offpair:{"1,7":[2,3,4,5,6,7]},extraArgument:5,rule:{"1,7":"#2_{#3}^{#4} #5 \\,\\frac{d#6}{#7}"},speech:{"1,7":" #2 from #3 to #4 of #5 d#6 over #7 "},ruleML:{"1,7":'<mrow><munderover>#2<mrow>#3</mrow><mrow>#4</mrow></munderover>#5<mspace width="0.167em"></mspace><mfrac><mrow><mo>&dd;</mo>#6</mrow><mrow>#7</mrow></mfrac></mrow>'}},intllimweight:{alternative:[],type:"function",priority:55,offpair:{"1,6":[2,3,4,5,6]},extraArgument:4,rule:{"1,6":"#2_{#3} #4 \\,\\frac{d#5}{#6}"},speech:{"1,6":" #2 over #3 of #4 d#5 over #6 "},ruleML:{"1,6":'<mrow><munder>#2<mrow>#3</mrow></munder>#4<mspace width="0.167em"></mspace><mfrac><mrow><mo>&dd;</mo>#5</mrow><mrow>#6</mrow></mfrac></mrow>'}},intllim:{alternative:[],type:"function",priority:55,offpair:{"1,5":[2,3,4,5]},extraArgument:3,rule:{"1,5":"#2_{#3} #4 \\,d#5"},speech:{"1,5":" #2 over #3 of #4 d#5 "},ruleML:{"1,5":'<mrow><munder>#2<mrow>#3</mrow></munder>#4<mspace width="0.167em"></mspace><mo>&dd;</mo>#5</</mrow>'}},int:{alternative:["integral"],type:"function",priority:55,family:["int","oint"],pairedArgument:"d",rule:{"1,2":"\\int #2","1,3":"\\int #2 \\,d#3","1,5":"\\int_{#2}^{3} #4 \\,d#5"},speech:{"1,2":"integral  #2","1,3":"integral  #2 d#3","1,5":"integral from #2 to #3 of #4 d#5"},ruleML:{"1,2":"<mo>∫</mo>#2","1,3":'<mo>∫</mo>#2<mspace width="0.167em"></mspace><mo>&dd;</mo>#3'}},oint:{alternative:[],type:"function",priority:55,family:["int","oint"],pairedArgument:"d",rule:{"1,3":"\\oint #2 \\,d#3","1,2":"\\oint #2"}},cup:{alternative:["union"],type:"operator",priority:10,rule:{"2,3":"#1 \\cup #3"},speech:{"2,3":" #1 union #3"},ruleML:{"2,3":"#1<mo>∪</mo>#3"}},cap:{alternative:["intersect","intersection"],type:"operator",priority:10,rule:{"2,3":"#1 \\cap #3"},speech:{"2,3":" #1 intersect #3"},ruleML:{"2,3":"#1<mo>∩</mo>#3"}},in:{alternative:["element"],type:"relation",priority:0,rule:{"2,3":"#1 \\in #3"},speech:{"2,3":"#1 in #3"},ruleML:{"2,3":"#1<mo>&#x2208;</mo>#3"}},notin:{alternative:["!in"],type:"relation",priority:0,rule:{"2,3":"#1 \\notin #3"},speech:{"2,3":"#1 not in #3"},ruleML:{"2,3":"#1<mo>∉</mo>#3"}},subset:{alternative:["subset"],type:"relation",priority:0,rule:{"2,3":"#1 \\subset #3"},speech:{"2,3":"#1 subset #3"},ruleML:{"2,3":"#1<mo>⊂</mo>#3"}},neq:{alternative:["!="],type:"relation",priority:0,rule:{"2,3":"#1 \\not= #3"},speech:{"2,3":"#1 not equals #3"},ruleML:{"2,3":"#1<mo>≠</mo>#3"}},and:{alternative:[],type:"operator",priority:10,rule:{"2,3":"#1 \\land #3"}},or:{alternative:[],type:"operator",priority:10,rule:{"2,3":"#1 \\lor #3"}},forall:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\forall"}},exist:{alternative:["exists"],type:"symbol",priority:-1,rule:{"1,1":"\\exists"},speech:{"1,1":" there exists "},ruleML:{"1,1":"<mi>∃</mi>"}},not:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\neg"}},perp:{alternative:["perpendicular","bot"],type:"operator",priority:25,rule:{"2,3":"#1 \\perp #3"},speech:{"2,3":"#1 perpendicular to #3"},ruleML:{"2,3":'<mrow>#1<mo intent="perpendicular">⊥</mo>#3</mrow>'}},dot:{alternative:[],type:"operator",priority:25,rule:{"2,3":"#1 \\cdot #3"},speech:{"2,3":"#1 dot #3"},ruleML:{"2,3":'<mrow>#1<mo intent="dot-product">⋅</mo>#3</mrow>'}},product:{alternative:[],type:"operator",priority:25,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":" #1 product #3 "},ruleML:{"2,3":'<mrow>#1<mo intent="direct-product">×</mo>#3</mrow>'}},times:{alternative:["×"],type:"operator",priority:25,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":"#1 times #3"},ruleML:{"2,3":'<mrow>#1<mo intent="times">×</mo>#3</mrow>'}},by:{alternative:[],type:"operator",priority:25,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":"#1 by #3"},ruleML:{"2,3":'<mrow>#1<mo intent="dimension-product">×</mo>#3</mrow>'}},cross:{alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":" #1 cross #3 "},ruleML:{"2,3":'<mrow>#1</mrow><mo intent="cross-product">×</mo><mrow>#3</mrow>'}},oointerval:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"(#1, #3)"},speech:{"2,3":" open interval from #1 to #3 endinterval "},ruleML:{"2,3":'<mrow intent="open-interval($f, $g)"><mo>(</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>)</mo></mrow>'}},innergcd:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"(#1, #3)"},speech:{"2,3":" gcd of #1 comma #3 endgcd "},ruleML:{"2,3":'<mrow intent="gcd($f, $g)"><mo>(</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>)</mo></mrow>'}},cartesianpoint:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"(#1, #3)"},speech:{"2,3":" point with coordinates #1 comma #3 endpoint "},ruleML:{"2,3":'<mrow intent="coordinate($f, $g)"><mo>(</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>)</mo></mrow>'}},innerproduct:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1, #3\\rangle "},speech:{"2,3":" inner product of #1 and #3 endinnerproduct "},ruleML:{"2,3":'<mrow intent="inner-product($f, $g)"><mo>⟨</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>⟩</mo></mrow>'}},twovector:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1, #3\\rangle "},speech:{"2,3":" vector #1 comma #3 endvector "},ruleML:{"2,3":'<mrow intent="vector($va, $vb)"><mo>⟨</mo><wrap arg="va">#1</wrap><mo>,</mo><wrap arg="vb">#3</wrap><mo>⟩</mo></mrow>'}},grouppresentation:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1\\ |\\  #3\\rangle "},speech:{"2,3":" group generated by #1 with relations #3 endrelations "},ruleML:{"2,3":'<mrow intent="group-presentation($gpa, $gpb)"><mo>⟨</mo><wrap arg="gpb">#1</wrap><mo stretchy="true">|</mo><wrap arg="gpb">#3</wrap><mo>⟩</mo></mrow>'}},setbuilder:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\{ #1\\ |\\  #3\\} "},speech:{"2,3":" set of #1 such that #3 endset "},ruleML:{"2,3":'<mrow intent="set-such-that($sba, $sbb)"><mo>{</mo><mrow arg="sba">#1</mrow><mo>|</mo><mrow arg="sbb">#3</mrow><mo>}</mo></mrow>'}},braket:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1 |  #3\\rangle "},speech:{"2,3":" bra-ket of #1 and #3 endbra-ket "},ruleML:{"2,3":'<mrow intent="bra-ket($bka, $bkb)"><mo>⟨</mo><wrap arg="bka">#1</wrap><mo>|</mo><wrap arg="bkb">#3</wrap><mo>⟩</mo></mrow>'}},isom:{alternative:["isomorphic"],type:"relation",priority:0,rule:{"2,3":"#1 \\cong #3"},speech:{"2,3":" #1 isomorphic to #3  "},ruleML:{"2,3":"#1<mo>≅</mo>#3"}},to:{alternative:["->","rightarrow"],type:"operator",priority:20,rule:{"2,3":"#1 \\to #3"},speech:{"2,3":" #1 to #3  "},ruleML:{"2,3":"#1<mo>→</mo>#3"}},longrightarrow:{alternative:["-->"],type:"operator",priority:20,rule:{"2,3":"#1 \\longrightarrow #3"},speech:{"2,3":" #1 long-to #3  "},ruleML:{"2,3":"#1<mo>⟶</mo>#3"}},from:{alternative:["<-","leftarrow"],type:"operator",priority:20,rule:{"2,3":"#1 \\leftarrow #3"},speech:{"2,3":" #1 from #3  "},ruleML:{"2,3":"#1<mo>←</mo>#3"}},longleftarrow:{alternative:["<--"],type:"operator",priority:20,rule:{"2,3":"#1 \\longleftarrow #3"},speech:{"2,3":" #1 long-from #3  "},ruleML:{"2,3":"#1<mo>⟵</mo>#3"}},mapsto:{alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 \\mapsto #3"},speech:{"2,3":" #1 maps to #3  "},ruleML:{"2,3":"#1<mo>↦</mo>#3"}},"~":{alternative:["asymp","asymptotic"],type:"relation",priority:0,rule:{"2,3":"#1 \\sim #3"},speech:{"2,3":" #1 asymptotic to #3  "},ruleML:{"2,3":'#1<mo intent="asymptotic">~</mo>#3'}},"≈":{alternative:["approx","approximate","approximately"],type:"relation",priority:0,rule:{"2,3":"#1 \\approx #3"},speech:{"2,3":" #1 approximately equal to #3  "},ruleML:{"2,3":'#1<mo intent="approximately">≈</mo>#3'}},cong:{alternative:["congruent"],type:"relation",priority:0,rule:{"2,3":"#1 \\equiv #3"},speech:{"2,3":" #1 congruent to #3  "},ruleML:{"2,3":'#1<mo intent="congruent">≡</mo>#3'}},"!cong":{alternative:["!congruent"],type:"relation",priority:0,rule:{"2,3":"#1 \\not\\equiv #3"},speech:{"2,3":" #1 not congruent to #3  "},ruleML:{"2,3":'#1<mo intent="not-congruent">≢</mo>#3'}},equiv:{alternative:["equivalent"],type:"relation",priority:0,rule:{"2,3":"#1 \\equiv #3"},speech:{"2,3":" #1 equivalent to #3  "},ruleML:{"2,3":'#1<mo intent="equivalent">≡</mo>#3'}},identical:{alternative:[],type:"relation",priority:0,rule:{"2,3":"#1 \\equiv #3"},speech:{"2,3":" #1 identical to #3  "},ruleML:{"2,3":'#1<mo intent="identical">≡</mo>#3'}},":=":{alternative:["coloneq","coloneqq"],type:"relation",priority:0,rule:{"2,3":"#1 \\coloneqq #3"},speech:{"2,3":" #1 defined as #3  "},ruleML:{"2,3":'#1<mo intent="defined-as">≔</mo>#3'}},":":{alternative:["colon"],type:"relation",priority:0,rule:{"2,3":"#1 \\colon #3"},speech:{"2,3":" #1 colon #3  "},ruleML:{"2,3":"#1<mo>:</mo>#3"}},"cases:":{alternative:[],type:"multiline",lineBreak:!0,params:["caseEnvironment"],note:"cases",MathMLnote:"cases"},casesline:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2 & \\text{ #3 } #4"},speech:{"1,4":"#2 #3 #4 "},ruleML:{"1,4":`<mtr><mtd>#2</mtd><mtd style="text-align: left"><mspace width="1em"></mspace><mtext>#3</mtext><mspace width="0.5em"></mspace>#4</mtd></mtr>
`}},"system:":{alternative:[],type:"multiline",params:["system","&beforeFirstRelation"],absorbEmptyLine:!0,emptyLineBeforeIndent:!0,note:"align",speechnote:"system",MathMLnote:"system"},"derivation:":{alternative:[],type:"multiline",params:["system","&beforeFirstRelation"],absorbEmptyLine:!0,emptyLineBeforeIndent:!0,note:"align",speechnote:"derivation",MathMLnote:"derivation"},systemline:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2  #3 &  #4"},speech:{"1,4":"#2 #3 #4 "},ruleML:{"1,4":`<mtr><mtd style="text-align: right">#2</mtd><mtd>#3</mtd><mtd style="text-align: left">#4</mtd></mtr>
`}},derivationline:{alternative:[],type:"function",priority:55,offpair:{"1,3":[1,2,3]},extraArgument:1,rule:{"1,3":" #2 &  #3"},speech:{"1,3":"#2 #3 "},ruleML:{"1,3":`<mtr><mtd></mtd><mtd>#2</mtd><mtd style="text-align: left">#3</mtd></mtr>
`}},"linearsystem:":{alternative:[],type:"multiline",seperateOut:!0,absorbEmptyLine:!0,emptyLineBeforeIndent:!0,noBeginEnd:!0,changeLineTurn:",",note:"\\systeme"},hat:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\hat{#2}"}},overline:{alternative:["bar"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\overline{#2}"},speech:{"1,2":" #2 bar "},ruleML:{"1,2":'<mover>#2<mo accent="true">―</mo></mover>'}},conj:{alternative:["conjugate"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\overline{#2}"},speech:{"1,2":" #2 conjugate "},ruleML:{"1,2":'<mover intent="conjugate($x)"><mrow arg="x">#2</mrow><mo accent="true">-</mo></mover>'}},vec:{alternative:["conjugate"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\overline{#2}"},speech:{"1,2":" vector quantityV #2 Vendquantity "},ruleML:{"1,2":'<mrow intent="vector($va)"><wrap mathvariant="bold" arg="va">#2</wrap></mrow>'}},underline:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\underline{#2}"}},if:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"if"},speech:{"1,1":" if "},ruleML:{"1,1":"if"}},otherwise:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"otherwise"},speech:{"1,1":" otherwise "},ruleML:{"1,1":"otherwise"}},when:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"#&\\text{when }"}},"!":{alternative:[],type:"postfix",priority:-1,rule:{"1,1":"!"},speech:{"1,1":" factorial "},ruleML:{"1,1":"<mo>!</mo>"}}},ut={iiint:"∭",iint:"∬",int:"∫",oiiint:"∰",oiint:"∯",oint:"∮"},ct={sum:"∑",union:"⋃",intersection:"⋂",oplus:"⨁",otimes:"⨂",coprod:"∐",prod:"∏"},mt=[["cent","¢"],["dollar","$"],["pound","£"],["euro","€"]],gt=["log","llog","lllog","ln","lg","vec","hat","bar","abs","det","order","card","len","length","norm","floor","ceil","ceiling"],dt=["∑","⋃","⋂","⨁","⨂","∐","∏","∮","∭","∬","∫","∰","∯","∮"],Pe=[["sin","sine"],["cos","cosine"],["tan","tangent"],["cot","cotgent"],["sec","secant"],["csc","cosecant"],["arcsin","arcsine"],["arccos","arccosine"],["arctan","arctangent"],["arccot","arccotgent"],["arcsec","arcsecant"],["arccsc","arccosecant"],["sinh","sinch"],["cosh","cosh"],["tanh","tanch"]],H=gt.slice();for(const t of Pe)H.push(t[0]);console.debug("greedyfunctions",H);var ht=[["α","alpha"],["β","beta"],["γ","gamma"],["δ","delta"],["ε","varepsilon"],["ϵ","epsilon"],["ζ","zeta"],["η","eta"],["θ","theta"],["ι","iota"],["κ","kappa"],["λ","lambda"],["μ","mu"],["ν","nu"],["ξ","xi"],["ο","omicron"],["π","pi"],["ρ","rho"],["σ","sigma"],["τ","tau"],["υ","upsilon"],["ϕ","phi"],["φ","varphi"],["χ","chi"],["ψ","psi"],["ω","omega"],["Α","Alpha"],["Β","Beta"],["Γ","Gamma"],["Δ","Delta"],["Ε","Epsilon"],["Ζ","Zeta"],["Η","Eta"],["Θ","Theta"],["Ι","Iota"],["Κ","Kappa"],["Λ","Lambda"],["Μ","Mu"],["Ν","Nu"],["Ξ","Xi"],["Ο","Omicron"],["Π","Pi"],["Ρ","Rho"],["Σ","Sigma"],["Τ","Tau"],["Υ","Upsilon"],["Φ","Phi"],["Χ","Chi"],["Ψ","Psi"],["Ω","Omega"]];for(const t of Pe)m[t[0]]={alternative:[],type:"function",priority:15,rule:{"1,2":"\\"+t[0]+" #2"},speech:{"1,2":t[1]+" #2 "},ruleML:{"1,2":"<mi>"+t[0]+"</mi><mo>&ApplyFunction;</mo>#2"}},m["base"+t[0]]={alternative:[],type:"function",priority:15,rule:{"1,2":"\\"+t[0]},speech:{"1,2":t[1]+" "},ruleML:{"1,2":t[0]}};for(const t of ht)m[t[1]]={alternative:[],type:"letter",priority:-1,rule:{"1,1":"\\"+t[1]},speech:{"1,1":" "+t[1]+" "},ruleML:{"1,1":"<mi>"+t[0]+"</mi>"}};for(const t of mt)m[t[0]]={alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\"+t[0]},speech:{"1,1":" "+t[0]+" "},ruleML:{"1,1":"<mi>"+t[1]+"</mi>"}};var ft={text:{LaTeX:["",""],MathML:["",""],Speech:["",""],PTX:["",""]},m:{LaTeX:["\\(","\\)"],MathML:["<math>","</math>"],Speech:["<em>","</em>"],PTX:["<m>","</m>"]},md:{LaTeX:["\\[","\\]"],MathML:['<math display="block">',"</math>"],Speech:["<em>","</em>"],PTX:["<md>","</md>"]}};function yt(t){return t.replace(/\s\s+/g," ")}function Re(t){return/^[0-9\.,]+$/.test(t)}function bt(t){return/^[a-zA-Z]+$/.test(t)}function Xe(t){return/^&[a-zA-Z]+;$/.test(t)}function vt(t){return/^[0-9\.,].*[a-zA-Z]$/.test(t)}function wt(t){return Re(t)||t.length==1||t.trim()in m&&m[t.trim()].type=="symbol"}function T(t,e){if(vt(t)){let n=t.replace(/[a-zA-Z]+$/,""),o=t.replace(/^[0-9\.,]+/,"");console.debug("found mixed",t,"with parts",n,",",o),n=T(n,e),o=T(o,e);let i="";return e=="MathML"?i="<mo>&InvisibleTimes;</mo>":e=="Speech"&&(i=" times "),n+i+o}let r=t;return console.debug("markAtomicItem of",r,"endans",Xe(t)),e=="MathML"&&(Re(t)?r="<mn>"+r+"</mn>":Xe(t)?r="<mi>"+r+"</mi>":bt(t)?r=r.replace(/(.)/g,"<mi>$1</mi>"):dt.includes(t)?r="<mo>"+r+"</mo>":t.includes("mtext")||r!=""&&(r="<unknown>"+r+"</unknown>",console.warn("unknown type","X"+r+"X"))),r}function $t(t){let e=t;console.debug("   starting to simplify Answer",e);for(let r=0;r<=2;++r)e=e.replace(/to the quantity([A-Z]?) +negative 1 +([A-Z]?)endquantity/g,"inverse"),e=e.replace(/to the quantity([A-Z]?) +2 +([A-Z]?)endquantity/g,"squared"),e=e.replace(/power +2 +/g,"squared "),e=e.replace(/(^| )quantity([A-Z]?) +([^ ]+) +([A-Z]?)endquantity/g," $3 "),e=e.replace(/(^| )quantity([A-Z]?) +(negative +[^ ]+) +([A-Z]?)endquantity/g," $3 "),e=e.replace(/<mrow ([^<>]+)><(mi|mo|mn)>([^<>]+)(<\/(mi|mo|mn)>)<\/mrow>/g,"<$2 $1>$3$4"),e=e.replace(/<mrow>(<([a-z]+)>)([^<>]+)(<\/$2>)<\/mrow>/g,"$1$3$4"),console.debug("now ans",e),e=e.replace(/<mrow>(<mi>)([^<>]+)(<\/mi>)<\/mrow>/g,"$1$2$3"),e=e.replace(/<mrow>(<mo>)([^<>]+)(<\/mo>)<\/mrow>/g,"$1$2$3"),e=e.replace(/<mrow>(<mn>)([^<>]+)(<\/mn>)<\/mrow>/g,"$1$2$3"),e=e.replace(/(<mrow[^<>]*>)<mrow>([^w]*)<\/mrow>(<\/mrow>)/g,"$1$2$3"),console.debug("removed layer",r,"to get",e);return e=e.replace(/quantity([A-Z]?)/g,"quantity"),e=e.replace(/([A-Z]?)endquantity([A-Z]?)/g,"endquantity"),e=e.replace(/(quantity *)quantity([^q]*)endquantity( *endquantity)/g,"$1$2$3"),e=e.replace(/(quantity *)quantity([^q]*)endquantity( *endquantity)/g,"$1$2$3"),e.endsWith("\\")&&(e+=" "),e}function xt(t){let e=t;return e=kt(e),e=Lt(e),console.debug("after preprocessarithmetic",e),e=_t(e),e=qt(e),console.debug("before other",e),e=Nt(e),console.debug("after other",e),e}function kt(t){let e=t;return e=e.replace(/(\s|\$|^)"(\S[^"]+)"(\s|\$|$)/g,Mt),e}function Mt(t,e,r,n,o,i){return e+"quote(␣"+r.replaceAll(" ","␣")+"␣)"+n}function Lt(t){let e=t;e=e.replace(/-->/g,"longrightarrow"),e=e.replace(/->/g,"to"),e=e.replace(/<--/g,"longleftarrow"),e=e.replace(/<-/g,"from"),e=e.replace(/(\$| |\(|\^|_)[\-\−]([^ +])/g,"$1😑$2"),e=e.replace(/(^|\$|\(|\[|\{) *[\-\−]/,"$1😑"),e=e.replace(/([^ \(\)\[\]\{\}\$]*[+\-][^ \(\)\[\]\{\}\$]*[^ \)\]}\/])(\/\/)/g,"($1)//"),e=e.replace(/\/\/([^ \(\[{\/][^ \(\)\[\]\{\}\$]*[+\-][^ \(\)\[\]\{\}\$]*)/g,"//($1)"),e=e.replace(/([^ \(\)\[\]\{\}\$]*[^ \)\]}\/])(\/)/g,"❲$1❳/"),e=e.replace(/\/([^ \(\[{\/][^ \)\]\}\n\$]*)/g,"/❲$1❳"),console.debug("after preprocess fractions","A"+e+"B");for(const i of H){var r="(^|[ \\(\\[\\{])"+i+" ([^ \\(\\)\\[\\]\\{\\}]+)",n=r+"($|[ \\(\\)\\[\\]\\{\\}])",o=new RegExp(n,"g");e=e.replace(o,"$1"+i+"⁅$2⁆$3")}return console.debug("after wrapping greedy arguments","A"+e+"B"),e=At(e),console.debug("before operators",e),e=Et(e),e=St(e),console.debug("after operators",e),e=e.replace(/([0-9a-zA-Z])(\+|-|\+-|-\+)([0-9a-zA-Z])/g,"$1 $2 $3"),e=e.replace(/ \* /g," ⭐ "),console.debug("before sub and sup grouping",e),e=e.replace(/\^([^ ❲❳\/\(\[{][^ \"❲❳\/\(\)\[\]\{\}\$]*)/,"^❲$1❳"),console.debug("after exponents once ",e),e=e.replace(/\^([^ ❲❳\/\(\[{][^ \"❲❳\/\(\)\[\]\{\}\$]*)/,"^❲$1❳"),console.debug("after exponents twice",e),e=e.replace(/_([^ ❲❳\/\(\[{\$][^ \"❲❳\/\^\(\)\[\]\{\}\$]*)/,"_❲$1❳"),e=e.replace(/_([^ ❲❳\/\(\[{\$][^ \"❲❳\/\^\(\)\[\]\{\}\$]*)/,"_❲$1❳"),console.debug("after subscript twice",e),e=Tt(e),e=e.replace(/([0-9])([a-zA-Z])/g,"$1 $2"),console.debug("after implied number letter multiplication",e),e=e.replace(/([0-9])([\(\[\{])/g,"$1 $2"),e=e.replace(/(_[\(❲][^❲❳\(\)]+)[\)❳]\(/g,"$1) ⚡ ("),e=e.replace(/([\^▲][\(❲][^❲❳\(\)]+)[\)❳]\(/g,"$1) ⚡ ("),e=e.replace(/(_[\(❲][^❲❳\(\)]+)[\)❳]\(/g,"$1) ⚡ ("),e=e.replace(/([\^▲][\(❲][^❲❳\(\)]+)[\)❳]\(/g,"$1) ⚡ ("),e=e.replace(/(_\(\([^❲❳\(\)]+)\)\)\(/g,"$1)) ⚡ ("),e=e.replace(/(\^\(\([^❲❳\(\)]+)\)\)\(/g,"$1)) ⚡ ("),e}function _t(t){let e=t;return e=e.replace(/(\$| )\(([^,()]+)\, +([^,()]+)\)/g,"$1($2) oointerval ($3)"),e=e.replace(/(\$| )gcd\( *([^,()]+)\, *([^,()]+) *\)/g,"$1($2) innergcd ($3)"),e=e.replace(/(\$| )\( ([^,()]+)\, *([^,()]+) \)/g,"$1($2) gcd ($3)"),e=e.replace(/(\$| )\(([^ ][^,()]*)\,([^ ][^,()]*)\)/g,"$1($2) cartesianpoint ($3)"),e}function qt(t){let e=t;return e=e.replace(/(^| )< ([^<>|]+) >/g,"$1span($2)"),console.debug("did we find span?",e),e=e.replace(/(^| )<([^<>|]+) \| ([^<>|]+)>/g,"$1($2) grouppresentation ($3)"),e=e.replace(/(^| |\(){([^{}|]+) \| ([^{}|]+)}/g,"$1($2) setbuilder ($3)"),e=e.replace(/(^| ){([^{}]+)}/g,"$1setof($2)"),e=e.replace(/(^| )<([^,<>|]+)\|([^,<>|]+)>/g,"$1($2) braket ($3)"),e=e.replace(/(^| )<([^,<>]+)\, ([^,<>]+)>/g,"$1($2) twovector ($3)"),console.debug("looking for vector",e),e=e.replace(/(^| )<([^ ,<>][^,<>]*)\, ([^<>]+)>/g,"$1vector($2, $3)"),console.debug("did we find vector?",e),e=e.replace(/(^| |\n)<([^ ][^,<>]*)\,([^ ][^<>]*)>/g,"$1($2) innerproduct ($3)"),e=e.replace(/(^| )<([^<>]+)>/g,"$1anglebrackets($2)"),e}function At(t){let e=t;return e=e.replace(/([^\^\(\[\{❲])(\'+)/g,"$1▲❲$2❳"),e=e.replace(/(lim(|inf|sup))_([\(\[\{❲])/g,"$1$3"),e=e.replace(/(lim(|inf|sup))_([^ \(\[\{❲][^ ]+)/g,"$1($3)"),e}function Et(t){let e=t;for(let[p,l]of Object.entries(ut))if(e.includes(p)){p="\\\\?"+p;var r=`(^| |
)`+p+"\\_\\(([^()]+)\\)\\^\\(([^()]+)\\) ?(.*?)",n=r+` d([a-z]+)( |
|$)`,o=r+` ❲d([a-z]+)❳/❲([^❲❳]+)❳( |
|$)`;console.debug("regExStr",n),console.debug("regExStrWeight",o);var i=new RegExp(o,"g");e=e.replace(i,"$1wrapper(intlimsweight("+l+")($2)($3)($4)($5)($6))$7");var u=new RegExp(n,"g");e=e.replace(u,"$1wrapper(intlims("+l+")($2)($3)($4)($5))$6"),r=`(^| |
)`+p+"\\_([^ ]+?)\\^([^ ]+) (.*?)",n=r+` d([a-z]+)( |
|$)`,o=r+` ❲d([a-z]+)❳/❲([^❲❳]+)❳( |
|$)`,console.debug("regExStr",n),console.debug("regExStrWeight",o),i=new RegExp(o,"g"),e=e.replace(i,"$1wrapper(intlimsweight("+l+")($2)($3)($4)($5)($6))$7"),u=new RegExp(n,"g"),e=e.replace(u,"$1wrapper(intlims("+l+")($2)($3)($4)($5))$6"),r=`(^| |
)`+p+"\\_\\(\\(([^()]+?)\\)\\) (.*?)",n=r+" d([a-z]+)( |\\$)",o=r+" ❲d([a-z]+)❳/❲([^ $]+)❳( |$)",i=new RegExp(o,"g"),e=e.replace(i,"$1wrapper(intllimweight("+l+")(($2))($3)($4)($5))$6"),u=new RegExp(n,"g"),e=e.replace(u,"$1wrapper(intllim("+l+")(($2))($3)($4))$5"),r="(^| )"+p+"\\_\\(([^()]+?)\\) (.*?)",n=r+" d([a-z]+)( |\\$)",o=r+" ❲d([a-z]+)❳/❲([^ $]+)❳( |$)",i=new RegExp(o,"g"),e=e.replace(i,"$1wrapper(intllimweight("+l+")($2)($3)($4)($5))$6"),u=new RegExp(n,"g"),e=e.replace(u,"$1wrapper(intllim("+l+")($2)($3)($4))$5"),r=`(^| |
)`+p+"\\_([^ ]+?) (.*?)",n=r+" d([a-z]+)( |\\$)",o=r+" ❲d([a-z]+)❳/❲([^ $]+)❳( |$)",i=new RegExp(o,"g"),e=e.replace(i,"$1wrapper(intllimweight("+l+")($2)($3)($4)($5))$6"),u=new RegExp(n,"g"),console.debug("final regExStr",n),e=e.replace(u,"$1wrapper(intllim("+l+")($2)($3)($4))$5")}return console.debug("did we find integral?",e),e}function Tt(t){let e=t;console.debug("looking for powers of known functions");for(let i of H){var r="(^|[ \\(\\[\\{])"+("\\\\?"+i)+"\\^❲([^❲❳]*)❳",n=r+" *([\\(\\[\\{][^\\(\\)\\[\\]\\{\\}]+[\\)\\]\\}])",o=new RegExp(n,"g");e=e.replace(o,"$1wrapper❲functionpower(base"+i+")($2)$3❳"),n=r+" ([^ \\$\\(\\)\\[\\]\\{\\}]+)",o=new RegExp(n,"g"),e=e.replace(o,"$1wrapper❲functionpower(base"+i+")($2)wrapper❲$3❳❳")}console.debug("processed powers of functions",e);for(let i of H){var r="(^|[\\$ \\(\\[\\{])"+("\\\\?"+i)+"\\_❲([^❲❳]*)❳",n=r+" *([\\(\\[\\{][^\\(\\)\\[\\]\\{\\}]+[\\)\\]\\}])",o=new RegExp(n,"g");e=e.replace(o,"$1wrapper❲functionsubscript(base"+i+")($2)$3❳"),n=r+" ([^ \\$\\(\\)\\[\\]\\{\\}]+)",o=new RegExp(n,"g"),e=e.replace(o,"$1wrapper❲functionsubscript(base"+i+")($2)wrapper❲$3❳❳")}return e}function St(t){let e=t;for(let[o,i]of Object.entries(ct))if(e.includes(o)){o="\\\\?"+o;var r="(^| )"+o+"\\_[\\[\\(\\{]([^ ]+)[\\]\\)\\}]\\^[\\[\\(\\{]([^ ]+)[\\]\\)\\}]",n=new RegExp(r,"g");e=e.replace(n,"$1opwrap(limsop("+i+")($2)($3))⚡");var r="(^|\\$| )"+o+"\\_[\\[\\(\\{]([^ ]+)[\\]\\)\\}]\\^([^ ]+)",n=new RegExp(r,"g");e=e.replace(n,"$1opwrap(limsop("+i+")($2)($3))⚡"),r="(\\b)"+o+"\\_([^ ]+)\\^([^ ]+)",console.debug("regExStr",r),n=new RegExp(r,"g"),e=e.replace(n,"$1opwrap(limsop("+i+")($2)($3))⚡"),r="(^|\\$| )"+o+"\\_[\\[\\(\\{]([^ ]+)[\\]\\)\\}]",console.debug("regExStr",r),n=new RegExp(r,"g"),e=e.replace(n,"$1opwrap(llimop("+i+")($2))⚡"),r="(^|\\$| )"+o+"\\_([^ ]+)",console.debug("regExStr for llimop",r),n=new RegExp(r,"g"),e=e.replace(n,"$1opwrap(llimop("+i+")($2))⚡"),r="(^|\\$| )"+o+"( |\\$)",console.debug("regExStr",r),n=new RegExp(r,"g"),e=e.replace(n,"$1opwrap(bigop("+i+"))$2⚡")}return e}function Nt(t){let e=t;return e=e.replace(/([^ \$\(\)\[\]\{\}]+):([^ ]+) to ([^ \$\(\)\[\]\{\}]+)/g,"fundef($1)($2)($3)"),e=e.replace(/([^\$\|]+) cong(ruent)* ([^\$]+) mod ([^\$\{\}]+)/g,"congruentmod($1)($3)($4)"),e=e.replace(/([^\$\|]+) !cong(ruent)* ([^\$]+) mod ([^\$\{\}]+)/g,"notcongruentmod($1)($3)($4)"),e}function Pt(t){let e=t;return e=e.replace(/</g,"⦉"),e=e.replace(/>/g,"⦊"),e}function Rt(t){let e=t;return e=e.replace(/⦉/g,"<"),e=e.replace(/⦊/g,">"),e}function Xt(t){let e=t;return e=e.replace(/\$\$\s*([^\$]+)\s*\$\$/g,'<md sourcetag="dd">$1</md>'),e=e.replace(/\\\[/g,'<md sourcetag="sb">'),e=e.replace(/\\\]/g,"</md>"),e=e.replace(/(^|\s|-)\$([^\$\f\r\n]+)\$(\s|\.|,|;|:|\?|!|$)/g,'$1<m sourcetag="d">$2</m>$3'),e=e.replace(/(^|\s|-)\$([^\$\f\r\n]+)\$(\s|\.|,|;|:|\?|!|-|$)/g,'$1<m sourcetag="d">$2</m>$3'),e=e.replace(/\\\(/g,'<m sourcetag="sp">'),e=e.replace(/\\\)/g,"</m>"),e}String.prototype.myHash=function(){var t=0,e,r;if(this.length===0)return t;for(e=0;e<this.length;e++)r=this.charCodeAt(e),t=(t<<5)-t+r,t|=0;return t};function Bt(t){let e;t="<bbbb>"+t+"</bbbb>",typeof t=="string"?e=new DOMParser().parseFromString(t,"text/xml"):e=t,console.debug("xml",e),console.debug("xml.nodeName",e.nodeName,"xml.nodeType",e.nodeType),e.nodeValue,e.nodeType==9&&(e=e.documentElement);let r=[];for(const n of e.childNodes){let o=[];n.nodeName=="#text"?(o.push("text"),o.push(""),o.push(n.nodeValue)):(o.push(n.nodeName),o.push(n.attributes),o.push(n.innerHTML)),o.push(o[2].myHash()),r.push(o)}return r}function Ot(t){let e=t;e=Xt(e),console.debug("str with tags",e);let r=Bt(e);return console.debug("this_node_content",r),r}function zt(t,e,r="MathML"){let n="";for(const o of t){let i=ft[o[0]];console.debug("element",o),console.debug("componentdict",e),console.debug(r,"tags",i);const u=o[3]+","+r;console.debug("contentkey",u);let p=e[u][2];n+=i[r][0]+p+i[r][1]}return n}function It(t,e){let r=t.trim();return r=r.replace(/␣/g," "),e=="Speech"?(r=r.replace(/(^| |\n)\$([^$]+)\$( |\.|\,|:|;|\?|\!|\n|$)/g,"$1&nbsp;&nbsp;<em>$2</em>&nbsp;&nbsp;$3"),r=r.replace(/(^| |\n)\$([^$]+)\$( |\.|\,|:|;|\?|\!|\n|$)/g,"$1&nbsp;&nbsp;<em>$2</em>&nbsp;&nbsp;$3"),r=r.replace(/(^| |\n)\$([^$]+)\$( |\.|\,|:|;|\?|\!|\n|$)/g,"$1&nbsp;&nbsp;<em>$2</em>&nbsp;&nbsp;$3"),r=r.replace(/\$\$(.+?)\$\$/sg,`
<em>$1</em>
`),r=r.replace(/\\,/g," "),r=r.replace(/∏/g,"product"),r=r.replace(/∑/g,"sum")):e=="MathML"&&(r=r.replace(/\$\$(.+?)\$\$/sg,`
<math display="block">$1</math>
`),r=r.replace(/(^| |\n)\$\$(.+?)\$\$( |\.|\,|:|;|\?|\!|\n|$)/g,`
<math display="block">$2</math>$3
`),r=r.replace(/(^| |\n)\$(.+?)\$( |\.|\,|:|;|\?|\!|\n|$)/g,`
<math>$2</math>$3
`),r=r.replace(/\\,/g,""),r=r.replace(/<wrap([^>]+)>(<m[a-z]+[^<>]*)(>[^<>]*<\/m[a-z]+>)<\/wrap>/g,"$2$1$3"),r=r.replace(/<wrap /g,"<mrow "),r=r.replace(/<\/wrap>/g,"</mrow>")),r}class jt{constructor(){this.cache=[],this.cacheSize=500,this.nonCache=[],this.nonCacheSize=500,this.multilineList=[]}getAllMultiLine(){if(this.multilineList.length==0)for(let e of Object.keys(m))m[e].type=="multiline"&&this.multilineList.push(e);return this.multilineList}getItem(e){if(e==" "||e=="")return-1;for(let r=this.cache.length-1;r>=0;r--)if(this.cache[r][0]===e)return this.cache[r][1];if(this.nonCache.includes(e))return-1;for(let r of Object.keys(m)){let n=m[r].alternative;if(n){for(let o of n)if(o==e)return this.cache.push([e,r]),this.cache.length>this.cacheSize&&this.cache.shift(),r}}return this.nonCache.push(e),this.nonCache.length>this.nonCacheSize&&this.nonCache.shift(),-1}getLength(){return this.cache.length}getSize(){return this.cacheSize}}let V=document.getElementById("sourceTextArea"),Be=document.getElementById("echosourceTextArea"),ae=document.getElementById("mathmlTextArea");document.getElementById("pretextTextArea");let Oe=document.getElementById("speechTextArea");document.getElementById("MathJaxArea");let le=document.getElementById("mathmlDisplayArea"),se=new jt;var pe;V.addEventListener&&V.addEventListener("input",function(){Be&&(Be.value=ce(V.value,"LaTeX")),Oe&&(Oe.innerHTML='" '+ce(V.value,"Speech")+' "'),(ae||le)&&(pe=ce(V.value,"MathML"),ae&&(ae.value=pe),le&&(le.innerHTML=pe))},!1);class k{constructor(e,r,n=null,o=null,i="unknown"){this.position=e,this.value=r,this.outputvalue=r,this.key=n,this.parent=o,this.conversiontarget=i,this.children=[],this.pair=[],this.noPriority=!1,this.exPriority=!1}insert(e,r=e){return this.children.push(new k(this.children.length,e,r,this,this.conversiontarget)),!0}insertNode(e){return e.parent=this,e.position=this.children.length,this.children.push(e),!0}addLeafMarkup(){console.debug("   adding leaf markup with key, val, oval",this.key,"a,a",this.value,"b,b",this.outputvalue,"to",this),this.key==null?this.outputvalue=T(this.value,this.conversiontarget):this.key==" "?this.position==1?(console.info("assuming implied multiplication"),console.info("What is next to this space key? parent:",this.parent,"left sibling",this.parent.children[0],"left sibling value",this.parent.children[0].value,"right sibling",this.parent.children[2]),this.conversiontarget=="MathML"?this.outputvalue="<mo>&InvisibleTimes;</mo>":this.conversiontarget=="Speech"&&(this.outputvalue=" times ")):this.outputvalue=T(this.value,this.conversiontarget):this.key=="quote"?this.position==1&&(this.outputvalue=this.value):this.key==""?(console.debug("item with empty key.  Is this function apply?",this),this.position==1?(console.debug("What is nect to this enpty key? parent:",this.parent,"left sibling",this.parent.children[0],"right sibling",this.parent.children[2]),this.parent.children[2].pair.length>0&&(this.conversiontarget=="MathML"?this.outputvalue="<mo>&ApplyFunction;</mo>":this.conversiontarget=="Speech"&&(this.outputvalue=" of "))):this.position==0?this.conversiontarget=="Speech"?this.outputvalue=" "+T(this.value,this.conversiontarget):this.outputvalue=T(this.value,this.conversiontarget):this.outputvalue=T(this.value,this.conversiontarget)):m[this.key].type=="operator"?this.value!=this.key?this.outputvalue=T(this.value,this.conversiontarget):this.outputvalue=T(this.value,this.conversiontarget):this.key==","?(console.debug("found comma with parent",this.parent),this.position==1&&(this.outputvalue="COMMA")):m[this.key].type=="symbol"?console.debug("found a symbol"):m[this.key].type=="relation"?(console.debug("found a relation"),this.value!=this.key?this.outputvalue=T(this.value,this.conversiontarget):this.outputvalue=T(this.value,this.conversiontarget)):m[this.key].type=="function"&&(console.debug("found a function"),this.value!=this.key?(console.debug("marking the argument of a function",this.value,"within",this),this.outputvalue=T(this.value,this.conversiontarget)):this.outputvalue=T(this.value,this.conversiontarget)),console.debug("   and now leaf is key, val, oval",this.key,",",this.value,",",this.outputvalue)}combine(e){for(let r of this.children)r&&r.combine(e);if(this.isLeaf){try{console.debug("isLeaf with key",this.key,"pair",this.pair,"parent children",this.parent.children,"of length",this.parent.children.length,"what we want",this.parent.children[2].pair,"ee",this)}catch{console.debug("isLeaf with key",this.key,"pair",this.pair,"this",this)}console.debug("the root",this.treeRoot),this.value.length>1&&(this.value=this.value.trim()),this.addLeafMarkup()}else{console.debug("not a Leaf",this.pair,this);let r=this.children[0].key,n,o,i=this.children.length,u=0;for(;this.children[u].value!=r;)u++;if(r==" ")this.children.length>1&&this.children[1].value==r?(r==" "&&(r="\\,"),n=this.children[0].value+r+this.children[2].value,console.debug("adding Oo to",this,"because of",this.children[0]),o=this.children[0].outputvalue+this.children[1].outputvalue+this.children[2].outputvalue,this.key&&this.key!=" "&&m[this.key].type!="function"&&!m[this.key].wrappedarguments&&m[this.key].priority>20&&(console.debug("maybe wrapping this.key",this.key,"for",o),this.conversiontarget=="MathML"?o="<mrow>"+o+"</mrow>":this.conversiontarget=="Speech"&&(console.debug("AddIng quantity",this),o="quantityS "+o+" Sendquantity"))):(o=this.children[1].outputvalue,n=this.children[1].value);else if(r=="")console.debug("  found an empty key",this),this.children.length>1&&this.children[1].value==r?(o=this.children[0].outputvalue+this.children[1].outputvalue+this.children[2].outputvalue,n=this.children[0].value+this.children[1].value+this.children[2].value):(o=this.children[1].outputvalue,n=this.children[1].value);else{console.debug("about to use conversiontarget",this.conversiontarget);try{console.debug("               trying to extract using key",r,"position",u,"numberOfSiblings",i,"from",this,"with rule of",u+1+","+i),this.conversiontarget=="MathML"?(n=m[r].rule[u+1+","+i],o=m[r].ruleML[u+1+","+i],console.debug("               attempted       MathML conversion: ",n,"newOutputValue",o)):this.conversiontarget=="Speech"?(n=m[r].rule[u+1+","+i],o=m[r].speech[u+1+","+i]):(n=m[r].rule[u+1+","+i],o=m[r].rule[u+1+","+i])}catch{n=m[r].rule[u+1+","+i],o=m[r].rule[u+1+","+i],console.debug("                      MathML conversion failed on",n)}if(n.includes("#comma?")&&(this.key&&m[this.key].type=="operator"&&m[this.key].priority<0?n=n.replace(/#comma\?\[(\S*)\&(\S*)\]$/,"$1"):n=n.replace(/#comma\?\[(\S*)\&(\S*)\]$/,"$2")),n.includes("#{}")){let p=!0,l=this;for(["^^","__"].includes(l.key)&&(p=!1);l.parent&&isScriptPure(l.key);)l=l.parent,["^^","__"].includes(l.key)&&(p=!1);p?n=n.replace("#{}","{}"):n=n.replace("#{}","")}for(let p=0;p<this.children.length;p++){let l=this.children[p].value,s=this.children[p].outputvalue,a=l,g=s;n.includes("#@"+(p+1))&&(a.length>1&&(a="{"+a+"}"),n=n.replace("#@"+(p+1),a),o=o.replace("#@"+(p+1),g)),e.includes("caseEnvironment")?(n=n.replace("#&","&"),o=o.replace("#&","&")):(n=n.replace("#&\\text{","\\text{ "),n=n.replace("#&",""),o=o.replace("#&\\text{","\\text{ "),o=o.replace("#&","")),n=n.replace("#"+(p+1)+"@1",l[0]),n=n.replace("#"+(p+1)+"@-1",l.substring(1)),n=n.replace("#"+(p+1),l),o=o.replace("#"+(p+1)+"@1",s[0]),o=o.replace("#"+(p+1)+"@-1",s.substring(1)),o=o.replace("#"+(p+1),s)}}this.value=n,this.outputvalue=o,this.children=[]}if(this.parent&&m[this.key]&&m[this.key].offpair){let r=this.parent.children.length,n=0;for(console.debug(r,"this.key",this.key,"this",this,"this.parent",this.parent);this.parent.children[n].value!=this.key;)console.debug(n,"this.parent.children[position]",this.parent.children[n]),n++;console.debug("dictionary[this.key].offpair",m[this.key].offpair,"looking for",n+1+","+r,"containing",this.position+1,"in",m[this.key].offpair[n+1+","+r]),m[this.key].offpair[n+1+","+r]&&m[this.key].offpair[n+1+","+r].includes(this.position+1)&&this.pair.pop()}if(this.pair&&this.pair.length>0&&(console.debug("this.pair[0]",this.pair[0]),this.pair[0]=Ct(this.pair,this.conversiontarget),this.pair[0].length>0)){console.debug("this.pair[0]",this.pair[0]);for(let r of this.pair)if(this.value=r[0]+this.value+r[1],this.conversiontarget=="MathML"){if(console.debug("((((adding parentheses to",this.outputvalue,"of",this),this.outputvalue.length>18&&(this.outputvalue="<mrow>"+this.outputvalue+"</mrow>"),!this.key||this.key==" "||!m[this.key].delimitedarguments){let n=this.outputvalue;r[0]!=""&&(n='<mo stretchy="false">'+r[0]+"</mo>"+n),r[1]!=""&&(n=n+'<mo stretchy="false">'+r[1]+"</mo>"),this.outputvalue=n}}else this.conversiontarget=="Speech"?wt(this.outputvalue)||(console.debug("adding quantity",this),this.outputvalue="quantityP "+this.outputvalue+" Pendquantity"):(!this.key||this.key==" "||!m[this.key].delimitedarguments)&&(this.outputvalue=r[0]+this.outputvalue+r[1]);this.pair=[]}}get isLeaf(){return this.children.length===0}get hasChildren(){return!this.isLeaf}get treeRoot(){return this.parent==null?this:this.parent.treeRoot}}class Zt{constructor(e,r,n,o){this.root=new k(e,r,n,null,o),console.debug("       Tree 0 conversiontarget",o)}*preOrderTraversal(e=this.root){if(yield e,e.children.length)for(let r of e.children)yield*this.preOrderTraversal(r)}*postOrderTraversal(e=this.root){if(e.children.length)for(let r of e.children)yield*this.postOrderTraversal(r);yield e}insert(e,r,n=r){console.debug("       Tree 1 conversiontarget",this.conversiontarget);for(let o of this.preOrderTraversal())if(console.debug("trying Tree1 node",o),o.value===e)return o.children.push(new k(r,n,o,conversiontarget)),!0;return!1}remove(e){for(let r of this.preOrderTraversal()){const n=r.children.filter(o=>o.value!==e);if(n.length!==r.children.length)return r.children=n,!0}return!1}find(e){for(let r of this.preOrderTraversal())if(r.value===e)return r}adjustImpliedMultiplication(){let e=["lim","quote","dollar"],r=["quote","cent"];for(let n of this.preOrderTraversal())e.includes(n.value)&&e.includes(n.key)&&n.position==0&&(console.debug("found a lim",n),console.debug("now looking at",n.parent,"and",n.parent.children[0],"and",n.parent.children[1]),n.parent.parent&&n.parent.parent.children[1].key==" "&&n.parent.parent.children[1].value==" "&&(console.error("adding hello",n.parent.parent.children[1]),n.parent.parent.children[1].key="✂️",console.error("now",n.parent.parent.children[1]))),r.includes(n.value)&&r.includes(n.key)&&n.position==0&&(console.debug("found a quote",n),console.debug("now looking at parent",n.parent,"and itself",n.parent.children[0],"and parent parent",n.parent.parent),n.parent.parent&&n.parent.parent.parent&&n.parent.parent.parent.children[1].key==" "&&n.parent.parent.parent.children[1].value==" "?(console.error("adding goodbye",n.parent.parent.parent.children[1]),n.parent.parent.parent.children[1].key="✂️",console.error("now",n.parent.parent.parent.children[1])):n.parent&&n.parent.parent&&n.parent.parent.children[1].key==" "&&n.parent.parent.children[1].value==" "&&(console.error("adding goodbye",n.parent.parent.children[1]),n.parent.parent.children[1].key="✂️",console.error("now",n.parent.parent.children[1])))}combineSubSup(){for(let e of this.preOrderTraversal())e.value===""&&e.key==="^"&&e.position==0&&(e.children.length>1&&e.children[0].key=="_"?(e.parent.children[2].key="subsup",e.parent.children[2].position=3,e.parent.children[1]=e.children[2],e.parent.children[1].key="subsup",e.parent.children[1].position=2,e.parent.children[1].parent=e.parent,e.parent.children.unshift(e.children[0]),e.parent.children[0].key="subsup",e.parent.children[0].position=0,e.parent.children[0].parent=e.parent,e.parent.children[1]=e.children[1],e.parent.children[1].key="subsup",e.parent.children[1].value="subsup",e.parent.children[1].position=1,e.parent.children[1].parent=e.parent):console.debug("no children"))}addParents(){for(let e of this.preOrderTraversal())for(const r of e.children)r.parent!=e&&(r.parent=e)}combineInt(){for(let e of this.preOrderTraversal())e.value=="integr"&&e.key=="integr"&&e.position==0&&(console.debug("found int in position",e.position,"and siblings with values and keys"),console.debug("1",e.parent.children[1].key,e.parent.children[1].value),e.parent.children[1].value==""&&e.parent.children[1].key=="integr"&&e.parent.children[1].pair.length==1&&(console.debug("maybe found an int with limits"),e.parent.children[1].children[0].key==","&&e.parent.children[1].children[0].value==""&&(console.debug("looking more promising"),(e.parent.children[1].children[1].key!=","||e.parent.children[1].children[2].key!=",")&&console.debug("error with integral subsup structure"),console.debug("int structure looks good"))))}unWrapCertainParentheses(){for(let e of this.preOrderTraversal())e.value==""&&e.pair.length==1&&e.children.length>0&&(console.debug("found wrapping parentheses",e.position,"and children with values and keys"),console.debug("0",e.children[0].key,e.children[0].value),(e.children[0].value=="limop"&&e.children[0].key=="limop"||e.children[0].value=="intllim"&&e.children[0].key=="intllim"||e.children[0].value=="intllimweight"&&e.children[0].key=="intllimweight"||e.children[0].value=="intlimsweight"&&e.children[0].key=="intlimsweight"||e.children[0].value=="intlims"&&e.children[0].key=="intlims")&&(console.debug("maybe found paraens to eliminate"),e.pair.pop()))}}function Ct(t,e){let r=t[0];return console.debug("adjusting brackets",r),e=="LaTeX"&&(r[0]=="{"&&(r[0]=["\\{"]),r[1]=="}"&&(r[1]=["\\}"])),r[0]=="⁅"&&(r=[]),r[0]=="❲"&&(r[0]=[""]),r[1]=="❳"&&(r[1]=[""]),r}function ze(t){return t===void 0?"undefined":t===null?"null":t==""?"es":t.replaceAll(" ","␣")}function Ie(t,e){if(console.debug("printTree of",t),!t)return"";let r=e+"["+ze(t.key)+"]   |"+ze(t.value)+"|";if(t.pair.length&&(r+="    "+t.pair[0]+" "+t.pair.length),t.children.length==0?r+="    leaf":t.parent!=null?r+="       "+t.parent.children.length:r+="       nuLL",r+=`
`,t.children.length==0)return r;{t.children.length;let n=r;for(let o=0;o<t.children.length;++o)n+=Ie(t.children[o],e+"    ");return n}}function te(t,e,r){console.debug("starting M2TreeConvert  conversiontarget",r);let n=new Zt(0,t,null,r),o="",i=n.root,u=!0,p,l=[],s={};for(console.debug("continuing M2TreeConvert  conversiontarget",r,"on",t);u;){let a=i.value;console.debug("fullStr","X"+a+"X");let g=0,d=0,h=0,c,b;for(;a.length>h;){let y=a[h],v=!1,_=!1;for(let f of[['"','"']])if(y==f[0]){console.debug("found a quote");let w=Ce(a,h,f[0],f[1],[[f[0]]]);if(w!=-1){let $=[a.substring(0,h),a.substring(h+1,w),a.substring(w+1)];console.debug("children are",$),i.value="";let L=new k(0,"\\ \\ \\text{"+$[1]+"}\\ \\ ","justatest",null,r);if(r=="MathML"?L=new k(0,'<mspace width="0.8em"/></mspace><mtext>'+$[1]+'</mtext><mspace width="0.8em"/></mspace>',"quote",null,r):r=="Speech"&&(L=new k(0,"␣text "+$[1]+" endtext␣",null,null,r)),console.debug("qNode was",L,"with children",L.children),L=W($[0],L,r),console.debug("qNode is",L,"with children",L.children),console.debug("stackedTreeNode was",p),p=Q(p,L,r),console.debug("stackedTreeNode is",p,"with children",p.children),l.length>0){p.key=l[0][0].children[0].key;let O=l[0][0].children.pop();l[0][0].insertNode(p),l[0][0].insertNode(O),l[0][1]--,l[0][1]==0&&l.shift(),p=void 0}a=a.substring(w+1),h=0,d=0,c=void 0,b=void 0,v=!0}}if(Vt(y)){console.debug("apparently found a left of pair",y);let f=Wt(a,h);if(f!=-1){let w=[a.substring(0,h),a.substring(h+1,f),a.substring(f+1)];i.value="";let $=te(w[1].trim(),e,r)[0].root;if($.pair.push([y,a[f]]),$=W(w[0],$,r),console.debug("just made pNode",$),p=Q(p,$,r),console.debug("just made stackedTreeNode",p),l.length>0){p.key=l[0][0].children[0].key;let L=l[0][0].children.pop();l[0][0].insertNode(p),l[0][0].insertNode(L),l[0][1]--,l[0][1]==0&&l.shift(),p=void 0}a=a.substring(f+1),h=0,d=0,c=void 0,b=void 0,v=!0}}if(y=="<"&&a[h+1]!=" "){console.debug("looking for an angle pair");let f=Gt(a,h);if(f!=-1){let w=[a.substring(0,h),a.substring(h+1,f),a.substring(f+1)];i.value="";let $=te(w[1].trim(),e,r)[0].root;if($.pair.push(["\\langle ","\\rangle "]),$=W(w[0],$,r),p=Q(p,$,r),l.length>0){p.key=l[0][0].children[0].key;let L=l[0][0].children.pop();l[0][0].insertNode(p),l[0][0].insertNode(L),l[0][1]--,l[0][1]==0&&l.shift(),p=void 0}a=a.substring(f+1),h=0,d=0,c=void 0,b=void 0,v=!0,console.debug("keyType",b)}}console.debug("OUT j",d,"on","X"+a+"X","woith counter",h);for(let f=d;f<=h;f++){if(console.debug("inner j",f,"on","X"+a+"X","counter",h),a[h+1]&&a[h].match(/[A-Za-z␣]/g)&&a[h+1].match(/[A-Za-z␣]/g)){console.debug("  contuing because building up a word on",a[h],"and",a[h+1],"so far",a.substring(f,h+1));continue}let w=a.substring(f,h+1),$=Ht(a,w,h,p);if(console.debug("subStr",w,"type",$),$){c=w,g=f,b=$,_=!0,console.debug("A keyType",b,"with key","X"+c+"X","from subStr",w);break}if(w==" "&&(h>=1||i.parent&&i.parent.children.length==2&&i.position==1||p)&&!Qt(Ut(a,h))){c=w,g=f,b="space",_=!0,console.debug("B keyType",b);break}else console.debug("     maybe breaking on multiword subStr",w)}if(_)break;v||(h++,y.match(/[\s\d]/g)&&(d=h))}if(console.debug("is there a"+c+"key?"),c){console.debug("yes, there is there a"+c+"key"),!m[c]&&c!=" "&&c!=""&&(c=se.getItem(c)),console.debug("and now it is"+c+"key of",b,"keyType");let y,v,_,f;switch(b){case"space":case"operator":case"relation":if(y=[a.substring(0,g),c,a.substring(h+1)],!1&b=="relation"&&e.includes("&beforeFirstRelation")&&!s["&beforeFirstRelation"]&&(s["&beforeFirstRelation"]=!0,y[2]="&"+y[2]),v=new k(0,y[0],c,null,r),_=new k(0,y[1],c,null,r),f=new k(0,y[2],c,null,r),p&&(p=Dt(v.value,p,r),v=p,v.key=c,p=void 0),b=="space"&&l.length>0){i.value=y[0],f.key=l[0][0].children[0].key,l[0][0].insertNode(f),i=l[0][0].children[l[0][0].children.length-1],l[0][1]--,l[0][1]==0&&l.shift();break}let w=!0;(Ze(c)||je(c))&&(b!="space"&&y[0].length==0||a[g-1])&&a[h+1]&&a[g-1]!=" "&&a[h+1]!=" "&&(w=!1);let $=ue(c),L=!1;b!="space"&&m[c].script&&($-=.1,w&&(L=!0,v.exPriority=!0,_.exPriority=!0,f.exPriority=!0),w||(w=!0),Kt(i,c)&&(w=!1));let O=0;if(i.exPriority&&!L&&(O+=.2),w&&(i.noPriority||$+O<ue(i.key))){let S=!1;for(i.value=v.value,i.children=v.children,i.pair=v.pair,i.exPriority=v.exPriority,i.noPriority=v.noPriority;i.parent;){let A=i.position;if(i=i.parent,O=0,!L){for(let R of i.children)if(R.exPriority){O+=.2;break}}if(!i.children[0].noPriority&&$+O>=ue(i.children[0].key)){let R=i.children[A],X=new k(A,null,i.children[0].key,null,r);X.noPriority=i.children[A].noPriority,X.exPriority=i.children[A].exPriority,i.children[A]=X,X.parent=i,X.insertNode(R),R.key=c,R.noPriority=_.noPriority,R.exPriority=_.exPriority,X.insertNode(_),X.insertNode(f),i=X.children[2],S=!0;break}}if(!S){let A=new k(0,"",null,null,r);n.root.key=c,A.insertNode(n.root),A.insertNode(_),A.insertNode(f),n.root=A,i=n.root.children[2]}}else w||(v.noPriority=!0,_.noPriority=!0,f.noPriority=!0),i.value="",i.insertNode(v),i.insertNode(_),i.insertNode(f),i=i.children[2];break;case"function":y=[a.substring(0,g),c,a.substring(h+1)],y[2][0]==" "&&(y[2]=y[2].substring(1)),v=new k(0,y[0],c,null,r),_=new k(0,y[1],c,null,r),f=new k(0,y[2],c,null,r),p&&(p=W(v.value,p,r),v=p,v.key=c,p=void 0);let M=new k;if(M.conversiontarget=r,M.value="",M.insert(c,c),f.key=c,m[c].pairedArgument){let S=Ce(a,g,c,m[c].pairedArgument,m[c].family);if(S!=-1){let A=[a.substring(h+1,S),a.substring(S+1)],R=te(A[0].trim(),e,r)[0].root,X=new k(0,A[1],c,null,r);M.insertNode(R),M.insertNode(X)}else M.insertNode(f)}else M.insertNode(f);let z=i;i=M.children[M.children.length-1],v.value.length>0&&(M=Ft(v,M)),M.value="",z.parent?(M.key=z.parent.children[z.position].key,M.position=z.position,M.parent=z.parent,z.parent.children[z.position]=M):n.root=M,m[c]&&m[c].extraArgument&&l.push([M,m[c].extraArgument]);break;case"postfix":case"symbol":case"letter":y=[a.substring(0,g),c,a.substring(h+1)],console.debug("making a symbolNode with",y);let q=new k;if(q.conversiontarget=r,q.value="",q.insert(c,c),q=W(y[0],q,r),p=Q(p,q,r),console.debug("now have stackedTreeNode",p),l.length>0){p.key=l[0][0].children[0].key;let S=l[0][0].children.pop();l[0][0].insertNode(p),l[0][0].insertNode(S),l[0][1]--,l[0][1]==0&&l.shift(),p=void 0}i.value=y[2],console.debug("now have currentNode",i);break;case"multiline":y=[a.substring(0,g),c,a.substring(h+1)];let U=new k(0,y[0],null,null,r);p=Q(p,U,r),i.value=y[2],o=c,console.debug("----------- just set exParam = ",o);break;case"UNUSED":y=[a.substring(0,g),c,a.substring(h+1)],i.value=y[2];break}}else{if(p){if(a.trim()!=""){console.debug("388 M2TreeConvert  conversiontarget",r);let v=new k;v.conversiontarget=r,p.key="",v.insertNode(p),v.insert("",""),v.insert(a,""),p=v}let y=i.position;p.position=y,p.key=i.key,i.parent?(p.parent=i.parent,i.parent.children[y]=p):n.root=p}u=!1;break}}return n.addParents(),console.debug("continuing",n.root.children[0],n.root.children[1]),n.combineSubSup(),console.debug("combineSubSup returned",n,"aa",n.root,"bb",n.root.children),n.adjustImpliedMultiplication(),console.debug("adjustImpliedMultiplication returned",n,"aa",n.root,"bb",n.root.children),console.debug(Ie(n.root,"")),[n,o,s]}function Q(t,e,r){if(t){console.debug("stackNode M2TreeConvert  stackedTreeNode.conversiontarget",t.conversiontarget);let n=new k;n.conversiontarget=r,t.key="",n.insertNode(t),n.insert("",""),e.key="",n.insertNode(e),t=n}else t=e;return t}function W(t,e,r){if(t.trim()!=""){console.debug("combinePrev M2TreeConvert  ",t,"xx",e,"cc",r);let n=new k;n.conversiontarget=r,e.key="",n.insert(t,""),n.insert("",""),n.insertNode(e),e=n,console.debug(" combinePrev pNode.conversiontarget",e)}return e}function Ft(t,e){return console.debug("combinePrevNode preNode.conversiontarget",t.conversiontarget),t.insert("",""),t.insertNode(e),t}function Dt(t,e,r){if(t.trim()!=""){console.debug("combineAfter M2TreeConvert  conversiontarget",r);let n=new k;n.conversiontarget=r,e.key="",n.insertNode(e),n.insert("",""),n.insert(t,""),e=n}return e}function Ht(t,e,r,n){let o=G(e);if(o&&!Yt(t,e,r))return o.mustHaveLeftArgument&&r==0&&!n?void 0:o.type}function G(t){return m[t]?m[t]:(t=se.getItem(t),t==-1?void 0:m[t])}function Vt(t){return["(","[","{","⁅","❲"].includes(t)}function je(t){let e=G(t);return e&&e.type=="operator"}function Qt(t){for(let e=1;e<=t.length;e++){let r=t.substring(0,e);if(je(r)||Ze(r))return!0}return!1}function Ze(t){let e=G(t);return e&&e.type=="relation"}function ue(t){let e=G(t);switch(t){case" ":case"":return 19;default:return e?e.priority:999}}function Wt(t,e){if(!["(","[","{","⁅","❲"].includes(t[e]))throw new Error("No"+lp+" at index "+e);let r=1;for(let n=e+1;n<t.length;n++)switch(t[n]){case"(":case"[":case"{":case"⁅":case"❲":r++;break;case")":case"]":case"}":case"⁆":case"❳":if(--r==0)return n;break}return-1}function Gt(t,e){if(!["<"].includes(t[e]||[" "].includes(t[e+1])))throw new Error("No"+lp+" at index "+e);let r=1;for(let n=e+1;n<t.length;n++)if(t[n]=="<"&&t[n+1]!=" "&&r++,t[n]==">"&&t[n-1]!=" "&&--r==0)return n;return-1}function Ce(t,e,r,n,o){if(t.substring(e,e+r.length)!=r)throw new Error("No "+r+" at index "+e+" of "+t);let i=1;for(let u=e+1;u<t.length;u++){if(t.substring(u,u+n.length)==n&&--i==0)return u;for(let p of o)t.substring(u,u+p.length)==p&&t[u-1].match(/[\s\d]/g)&&i++}return-1}function Ut(t,e){let r="";for(let n=e+1;n<t.length;n++)switch(t[n]){case`
`:case" ":break;default:r+=t[n]}return r}function Yt(t,e,r){for(let n=r+1;n<t.length&&!t[n].match(/[\s\d]/g);n++)if(e+=t[n],G(e))return!0;return!1}function Kt(t,e){if(console.debug("checkScriptSimilarity",t),t.pair.length>0||t.parent&&t.parent.exPriority)return!1;let r=t;for(;r.parent&&(r=r.parent,!(r.pair.length>0||t.parent&&t.parent.exPriority));)if(r.key==e)return!0;for(r=t.parent;r&&r.children[0]&&(r=r.children[0],!(r.pair.length>0||t.parent&&t.parent.exPriority));)if(r.key==e)return!0;return!1}function Jt(t,e){return console.debug("combineTree2Latex",t,"params",e,"with output",t.root.outputvalue),t.root.combine(e),console.debug("AGAIN combineTree2Latex",t,"params",e,"with output",t.root.outputvalue),t.root.outputvalue}function er(t,e,r,n){console.debug("M2LConvert(str,lp,rp, conversiontarget)",t,e,r,n);for(let s of se.getAllMultiLine()){let a=t.indexOf(s.slice(0,-1)+"(");for(;a!=-1;){let g=rr(t,a+s.length-1,"(",")");if(g!=-1){let d=[t.substring(0,a),t.substring(a+s.length,g),t.substring(g+1)];newMiddleStr=s+`
 `,m[s].emptyLineBeforeIndent?(newMiddleStr+=d[1].replaceAll(";",`

 `),newMiddleStr+=`
`):newMiddleStr+=d[1].replaceAll(";",`
 `),t=d[0]+newMiddleStr+d[2],a=t.indexOf(s.slice(0,-1)+"(")}else continue}}t=t.replaceAll("\\,",""),t=t.replaceAll("\\:",""),t=t.replaceAll("\\;",""),t=t.replaceAll("\\!",""),t=t.replace(/([a-zA-Z])\\/g,"$1 "),t=t.replaceAll("\\","");let o=t.split(`
`),i="",u=[],p="";for(;o.length>0;){var l=[];if(u[0]&&m[u[0]].params&&(l=m[u[0]].params),console.debug("  ++  ++  ++  ++  ++  ++  ++  ++  ++  ++ "),console.debug("top of loop  ",o),console.debug("params = ",l),o[0].trim()==""&&!l.includes("system")&&!l.includes("derivation")){console.info("skipping empty string"),o.shift();continue}if(l.length>0&&l.includes("caseEnvironment")){let c=o[0],b=c.split(/(if|when|unless|otherwise)/g);b.length!=3?console.error("invalid cases line",c):(c="casesline("+b[0]+")("+b[1]+")("+b[2]+")",o[0]=c),console.debug("thisLinePieces",b)}else if(l.length>0&&(l.includes("system")||l.includes("derivation"))){let c=o[0];for(;o.length>1&&o[1].trim()!="";)c+=o[1],o.splice(1,1);let b=c.split(/(<=|>=|:=|<|>|=|~|≈|approx|asymp).*?/);if(b.length>3){let y="";for(;b.length>=3;)y=b.pop()+y;b[2]=y}b.length!=3?console.error("invalid system/derivation line",c,"with pieces",b):(b[0].trim()==""?c="derivationline("+b[1].trim()+")("+b[2].trim()+")":c="systemline("+b[0].trim()+")("+b[1].trim()+")("+b[2].trim()+")",o[0]=c),console.debug("thisLine",c,"thisLinePieces",b)}let s=te(o[0].trim(),l,n);console.debug("temp");let a=s[0],g=s[1],d=Jt(a,l),h="";l.length&&l.includes("caseEnvironment")?(h="cases",n=="MathML"||n=="Speech"&&(d=" case "+d)):l.length&&(l.includes("system")||l.includes("derivation"))&&(l.includes("system")?h="system":l.includes("derivation")&&(h="derivation"),n=="MathML"||n=="Speech"&&(d=" line "+d)),o.length>0&&g.length==0&&(u.length>0&&(!m[u[0]].absorbEmptyLine||o[0].trim().length>0)?m[u[0]].absorbEmptyLine&&o.length>1&&o[1].trim().length>0||o.length==2&&o[1].trim().length==0||o.length==1||(m[u[0]].changeLineTurn?d+=m[u[0]].changeLineTurn+`
`:n=="MathML"||(n=="Speech"?(h=="cases"&&(d+=` end_case
`),(h=="system"||h=="derivation")&&(d+=` end_line
`)):d+=`\\\\
`)):o.length>1&&(m[u[0]]&&m[u[0]].absorbEmptyLine&&o[0].trim().length==0||(d+=`
`))),p=o[0],o.shift(),console.debug("============ exParam",g),m[g]&&(m[g].seperateOut&&(d+=r),m[g].noBeginEnd?d+=m[g].note+"{":n=="MathML"?(g=="cases:"&&(d+='<mrow intent="$table"><mo>{</mo>'),d+='<mtable arg="table" intent=":'+m[g].MathMLnote+`">
`):n=="Speech"?d+=" begin-"+m[g].speechnote+" ":d+="\\begin{"+m[g].note+"}",u.push(g)),u.length>0&&o[0]&&o[0][0]!=" "&&(!m[u[0]].emptyLineBeforeIndent||p.trim().length==0)&&(m[u[0]].noBeginEnd?d+="}":d+="AA\\end{"+m[u[0]].note+"}",m[u[0]].lineBreak&&(d+=`
`),m[u[0]].seperateOut&&(d+=e),u.shift()),i+=d}for(;u.length>0;)m[u[0]].noBeginEnd?i+="}":n=="MathML"?(i+="</mtable><!-- "+m[u[0]].MathMLnote+` -->
`,l.length&&l.includes("caseEnvironment")&&(i+="</mrow>")):n=="Speech"?(m[u[0]].note=="cases"&&(i+="end_case "),m[u[0]].note=="align"&&(i+="end_line "),i+="end-"+m[u[0]].speechnote):i+="\\end{"+m[u[0]].note+"}",m[u[0]].seperateOut&&(i+=e),u.shift();return console.debug("latexStr",i),yt(i)}function ce(t,e){console.debug("converting to target",e);let r=Pt(t),n=Ot(r);console.debug("str_separated",n);let o=tr(n,e);console.debug("firsttest",o);let i=zt(n,o,e);return console.debug("answer_processed",i),console.debug("convertedComponent",o),console.debug(" "),console.debug("*************************************************************"),console.debug(" "),i=It(i,e),i}function tr(t,e){let r={};for(const n of t){const o=n[0],i=n[3]+","+e;if(o=="text")r[i]=[n[0],n[1],n[2]];else if(!(i in r))if(o=="m"||o=="md"){let u=n[2];u=Rt(u),u=xt(u),r[i]=[n[0],n[1],Fe(u,e)]}else console.error("unknown piece_type",n)}return r}function Fe(t,e){console.debug("starting convertMathSnippet",e,"on",t);let r=er(t,"LBRACK","RBRACK",e);return r=$t(r),r}function rr(t,e,r,n){if(t.substring(e,e+r.length)!=r)throw new Error("No"+r+" at index "+e);for(let o=e+1;o<t.length;o++)switch(t.substring(o,o+n.length)){case n:return o}return-1}let me="STart";me="";const ge=function(t){if(typeof t=="string")return t;if(!Array.isArray(t)){let n="";const o=t.tag;let i=N[o];return i||(i=PTXdisplayoutput(o)),n+=i.before_begin+i.begin_tag+me,"attributes"in t&&t.attributes&&(n+=" "+t.attributes.trim()),"label"in t&&t.label&&(n+=' xml:id="'+t.label+'"'),n+=i.after_begin,"title"in t&&t.title&&(n+="<title>"+t.title+`</title>
`),n+ge(t.content)+i.before_end+i.end_tag+i.after_end}const e=t;let r="";return e.forEach((n,o)=>{if(typeof n=="string"){n.match(/^\s*$/)||(r+="<TEXT>"+n+"</TEXT>",console.log("just added error of",n));return}let i="";const u=n.tag;let p=N[u];typeof p>"u"&&(p=or),i=i+p.before_begin+p.begin_tag+me,"attributes"in n&&n.attributes&&(i+=" "+n.attributes.trim()),"label"in n&&n.label&&(i+=' xml:id="'+n.label+'"'),i+=p.after_begin,"title"in n&&n.title&&(i+="<title>"+n.title+`</title>
`);let l=ge(n.content);u!="text"&&(l=l.replace(/^[\r\n]+/,""),l=l.replace(/[\r\n]+$/,"")),["c","code"].includes(u)&&(l=De(l));let s="";["m","md","me","mdn","men"].includes(u)&&(l.match(/^.*(\.|,|;)\s*$/s)&&(l=l.replace(/\s*$/,""),s=l.slice(-1),l=l.slice(0,-1)),l=Fe(l,"LaTeX"),l=De(l)),i=i+l,i=i+p.before_end+p.end_tag+s+p.after_end,i.match(/^\s*<p>\s*<\/p>\s*$/)&&(console.log("empty p"),i=""),r=r+i}),r},De=function(t){let e=t;return e=e.replace(/&/g,"&amp;"),e=e.replace(/</g,"&lt;"),e=e.replace(/>/g,"&gt;"),e};let de=document.getElementById("sourceTextArea"),He=document.getElementById("echosourceTextArea");document.getElementById("mathmlTextArea"),document.getElementById("pretextTextArea"),document.getElementById("speechTextArea"),document.getElementById("MathJaxArea");const nr=function(t){return{left:"<"+t+">",right:"</"+t+">",tag:t}},he=function(t){return{left:"<"+t,right:"</"+t+">",tag:t}},fe=function(t){return{left:"\\begin{"+t+"}",right:"\\end{"+t+"}",tag:t}},Ve=function(t){if(!Array.isArray(t))return t;let e=[];return t.forEach(r=>{e.push(he(r)),e.push(fe(r))}),e},Z=[{left:"$$",right:"$$",tag:"men"},{left:"\\[",right:"\\]",tag:"men"}];tt.forEach(t=>{Z.push({left:"\\begin{"+t[0]+"}",right:"\\end{"+t[0]+"}",tag:t[1]})}),Z.push({left:"<md>",right:"</md>",tag:"md"}),Z.push({left:"<me>",right:"</me>",tag:"me"}),Z.push({left:"<mdn",right:"</mdn>",tag:"mdn"}),Z.push({left:"<men",right:"</men>",tag:"men"});const C=[];let Qe=[...qe],ye=[...Qe,...be];ye.push("p"),ye.push("statement"),Qe.forEach(t=>{C.push(he(t)),C.push(fe(t))}),Ae.forEach(t=>{C.push(he(t)),C.push(fe(t))});let re=Array.from(C,({tag:t})=>t);re=[...new Set(re)];let F=[{left:"\\(",right:"\\)",tag:"m"}];_e.forEach(t=>{F.push(nr(t))});const We={begin_tag:"",end_tag:"",before_begin:"",after_begin:"",before_end:"",after_end:""},or={begin_tag:"BEGINTAG",end_tag:"ENDTAG",before_begin:"BB",after_begin:"AB",before_end:"BE",after_end:"AE"},N={text:We,placeholder:We,title:{begin_tag:"<title>",end_tag:"</title>",before_begin:`
`,after_begin:"",before_end:"",after_end:`
`}};_e.forEach(t=>{N[t]={begin_tag:"<"+t+">",end_tag:"</"+t+">",before_begin:"",after_begin:"",before_end:"",after_end:""}}),ye.forEach(t=>{N[t]={begin_tag:"<"+t,end_tag:"</"+t+">",before_begin:`
`,after_begin:`>
`,before_end:`
`,after_end:`
`}}),Ae.forEach(t=>{N[t]={begin_tag:"<"+t,end_tag:"</"+t+">",before_begin:`
`,after_begin:`>
`,before_end:`
`,after_end:`
`}}),j.forEach(t=>{N[t]={begin_tag:"<"+t,end_tag:"</"+t+">",before_begin:`
`,after_begin:`>
`,before_end:`
`,after_end:`
`}}),rt.forEach(t=>{N[t]={begin_tag:"<"+t,end_tag:"</"+t+">",before_begin:`
`,after_begin:`>
`,before_end:`
`,after_end:`
`}}),N.ol={begin_tag:`<p>
<ol>`,end_tag:`</ol>
</p>`,before_begin:`
`,after_begin:`
`,before_end:`
`,after_end:`
`},N.ul={begin_tag:`<p>
<ul>`,end_tag:`</ul>
</p>`,before_begin:`
`,after_begin:`
`,before_end:`
`,after_end:`
`},K.forEach(t=>{N[t]={begin_tag:`
<`+t,end_tag:"</"+t+">",before_begin:"",after_begin:`>
`,before_end:`
`,after_end:`
`}}),N.image={begin_tag:"<img",end_tag:"</img>",before_begin:"",after_begin:`>
`,before_end:`
`,after_end:`
`},N.description={begin_tag:"<description>",end_tag:"</description>",before_begin:`
`,after_begin:"",before_end:"",after_end:`
`};function Ge(t,e="stuff"){let r=pt(t),n="";r.match(/^\s*<title>/)?(n=r.replace(/^\s*<title>(.*?)<\/title>.*/s,"$1"),r=r.replace(/^\s*<title>(.*?)<\/title>/,"")):r.match(/^\s*\[/)&&(n=r.replace(/^\s*\[([^\[\]]*)\].*/s,"$1"),r=r.replace(/^\s*\[([^\[\]]*)\]/,""));let i=r.replace(/([^\s])\\label({|\[|\()/g,`$1
\\label$2`).replace(/\n\n\s*>/g,`

+++sTaRTbQ>`);i=i.replace(/(\$\$|\\end{equation}|<\/men>|\\end{align}|\\\]) *\n([^\n])/g,`$1
+++saMePaR$2`);let u=i.replace(/(<diagram)(.*?)(<\/diagram>)/sg,function(q,U,S,A){const R=S.replace(/(<|<\/)definition(>)/g,"$1predefinition$2");return U+R+A}),p={tag:e,content:u};n&&(p.title=n);let l={...p};const s=12;for(let q=0;q<s;++q)x.forEach(U=>{l=P(l,U,0,q),Te.forEach(S=>{l=E(l,S[0],0,q,S[1])})});let a={...l};a=D(a,"all",re);let g={...a};g=E(g,"oneline environments",0,0,"all"),Te.forEach(q=>{g=E(g,q[0],0,0,q[1])}),g=D(g,"all",re),g=E(g,"blockquotes",0,0,["p"]);let d={...g};d=E(d,"extract li",0,0,"all");const h=P(d,F,0,s+1,"all",B),c=P(h,"spacelike",0,s+1,"all",B),b=P(c,F,0,s+1,"all",B),y=P(b,F,0,s+1,"all",B),v=E(y,"fonts",0,0,B),_=E(v,"texlike",0,0,B);let f=P(_,"spacelike",0,s+1,"all",B);f=P(f,F,0,s+1,"all",B),f=P(f,F,0,s+1,"all",B);const $=E(f,"extract li",0,0,["p"]),L=E($,"gather li",0,0,ee),O=E(L,"absorb math",0,0,ee,"",e);let M=E(O,"statements",0,0,et);return console.log("tmp5",M),ge(M)}de.addEventListener&&de.addEventListener("input",function(){const t=de.value;let e=Ge(t,"placeholder");He&&(He.innerText=e)},!1),I.FlexTeXtConvert=Ge,Object.defineProperty(I,Symbol.toStringTag,{value:"Module"})});
