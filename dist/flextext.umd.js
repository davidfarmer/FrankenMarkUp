(function(q,_){typeof exports=="object"&&typeof module<"u"?_(exports):typeof define=="function"&&define.amd?define(["exports"],_):(q=typeof globalThis<"u"?globalThis:q||self,_(q.FlexTeXt={}))})(this,function(q){"use strict";const _=["reading-questions","introduction","conclusion","objectives","statement","task","worksheet","page"],K=["ol","ul","dl","code","mrow"],Me=["li"],J=["aside","historical","biographical"],C=["algorithm","claim","corollary","fact","identity","lemma","proposition","theorem"],D=["assumption","axiom","conjecture","heuristic","hypothesis","principle"],ee=["convention","insight","note","observation","remark","warning"],te=["example","problem","question"],re=["definition"],R=["exercise"],oe=["proof"],ne=["activity","exploration","investigation","project"],P=["md","mdn","me","men","smen","smdn"],B=["hint","answer","solution"],ie=["case","task"],ae=["em","term","alert","m","sm","q","c","tag"];[...P];let le=["section","subsection","worksheet","paragraphs"],me=[...J,...C,...D,...ee,...te,...re,...R,...oe,...ne,...B,"blockquote","sidebyside","li"];const E=[...le,...me,...B,...ie,..._,"placeholder"],pe=["figure","table","listing","enumerate","itemize"],se=["image","tabular","program"],ue=["latex-image","prefigure","description","caption"],ce=["figure","table","tabular","enumerate","ol","ul","dl"],$e=[...C,...D,...R,"task"],x=["text","p","fn","em","term","alert","q","title","li","caption"],qe=[["equation","men"],["align","mdn"]],T={listing:["caption","program"],figure:["caption","image"],program:["code"],image:["latex-image","description","prefigure"],prefigure:["diagram"],diagram:["predefinition","coordinates","annotations"]},_e=["exercisegroup","exercises","prefigure","diagram",...T.diagram],Ae=Object.keys(T),F=["source","ref","width","margins","label","xmlattributes","bbox","dimensions","destination","text","xml:id","xmlns"];let f=[];f.push(["section"]),f.push(["subsection"]),f.push(["worksheet"]),f.push(["page"]),f.push(["paragraphs","objectives"]),f.push(["sidebyside"]),f.push([...ne]),f.push([...te,...R]),f.push(["introduction","conclusion"]),f.push([...C,...D,...ee,...re]),f.push(["task"]),f.push(["statement"]),f.push([...oe,...B]),f.push([...ie]),f.push([...J]),f.push([...pe]),f.push([...se]),f.push([...ue]),f.push(["prefigure"]),f.push(["diagram"]),f.push(T.diagram),f.push([...K]),f.push([...Me]),f.push(["blockquote"]),f.push(["p"]),f.push("displaymath"),f.push(["mrow"]);const fe=[["extraneous math",P],["workspace",[...R]],["margins",["worksheet","sidebyside"]],["margin",["worksheet","sidebyside"]],["xmlattributes","all"],["title","all"],["label","all"]];let ke={abstract:["abs","abstr"],acknowledgement:["ack"],assumption:["assu","ass"],axiom:["axm"],blockquote:["quote"],claim:["cla"],conjecture:["con","conj","conjec"],convention:["conv"],corollary:["cor","corr","coro","corol","corss"],definition:["def","defn","dfn","defi","defin","de"],ol:["enum","enuma","enumerit"],example:["exam","exa","eg","exmp","expl","exm"],exercise:["exer","exers"],em:["emph"],fn:["footnote"],hypothesis:["hyp"],lemma:["lem","lma","lemm"],notation:["no","nota","ntn","nt","notn","notat"],observation:["obs"],proof:["pf","prf","demo"],proposition:["prop","pro","prp","props"],question:["qu","ques","quest","qsn"],remark:["rem","rmk","rema","bem","subrem","rems","rmks"],theorem:["thm","theo","theor","thmss"],verbatim:["verb"],warning:["warn","wrn"]};const Ee={"'a":"á","`a":"à",'"a':"ä","^a":"â","~a":"ã","-a":"ā","'A":"Á","`A":"À",'"A':"Ä","^A":"Â","~A":"Ã",cc:"ç",cC:"Ç","'e":"é","`e":"è",'"e':"ë","^e":"ê","-e":"ē","'E":"É","`E":"È",'"E':"Ë","^E":"Ê","-E":"Ē","-g":"ḡ",ug:"ğ",vg:"ǧ","-G":"Ḡ",uG:"Ğ",vG:"Ǧ","'i":"í","`i":"ì",'"i':"ï","^i":"î","-i":"ī","'I":"Í","`I":"Ì",'"I':"Ï","^I":"Î","-I":"Ī","~n":"ñ","~N":"Ñ","'o":"ó","`o":"ò",'"o':"ö","^o":"ô","-o":"ō","~o":"õ",Ho:"ő","'O":"Ó","`O":"Ò",'"O':"Ö","^O":"Ô","-O":"Ō","~O":"Õ",HO:"Ő","'u":"ú","`u":"ù",'"u':"ü","^u":"û","'U":"Ú","`U":"Ù",'"U':"Ü","^U":"Û"};var I={"+":{comment:["¼Ó"],alternative:["plus","¼Ó"],type:"operator",priority:10,rule:{"2,3":"#1 + #3"},ruleML:{"2,3":"#1<mo>+</mo>#3"},speech:{"2,3":"#1 plus #3"}},"-":{comment:["¼õ"],alternative:["minus","subtracts","¼õ"],type:"operator",priority:10,mustHaveLeftArgument:!0,rule:{"2,3":"#1 - #3"},ruleML:{"2,3":"#1<mo>-</mo>#3"},speech:{"2,3":"#1 minus #3"}},of:{comment:[],alternative:["of","circ"],type:"operator",priority:10,mustHaveLeftArgument:!0,rule:{"2,3":"#1 \\circ #3"},ruleML:{"2,3":'#1<mo intent="of">∘</mo>#3'},speech:{"2,3":"#1 of #3"}},"⭐":{comment:[],alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 * #3"},ruleML:{"2,3":"#1<mo>∗</mo>#3"},speech:{"2,3":"#1 star #3"}},"😑":{comment:[],alternative:[],type:"function",priority:91,rule:{"1,2":"{-#2}"},ruleML:{"1,2":"<mrow><mo>-</mo>#2</mrow>"},speech:{"1,2":" quantityN negative #2 Nendquantity "}},"⚡":{comment:[],alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 #3"},ruleML:{"2,3":"#1<mo>&ApplyFunction;</mo>#3"},speech:{"2,3":"#1 of #3"}},"*":{comment:["³Ë"],alternative:["multiply","³Ë"],type:"operator",priority:20,rule:{"2,3":"#1 #3"},ruleML:{"2,3":"#1<mo>&InvisibleTimes;</mo>#3"},speech:{"2,3":"#1 times #3"}},"/":{comment:["³ý, ³ýÒÔ"],alternative:["over","divide","³ý","³ýÒÔ"],type:"operator",wrappedarguments:!0,priority:20,rule:{"2,3":"\\frac{#1}{#3}"},offpair:{"2,3":[1,3]},ruleML:{"2,3":"<mfrac><mrow>#1</mrow><mrow>#3</mrow></mfrac>"},speech:{"2,3":"fraction #1 denominator #3 enddenominator"}},"//":{alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 / #3"},speech:{"2,3":" inline fraction #1 over #3 endfraction "},ruleML:{"2,3":"#1<mo>/</mo>#3"}},"=":{comment:["µÈÓÚ"],alternative:["equal","µÈÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 = #3"},ruleML:{"2,3":"#1<mo>=</mo>#3"},speech:{"2,3":"#1 equals #3"}},"🎯":{comment:[],alternative:[],type:"relation",priority:0,rule:{"2,3":"#1  #3"},ruleML:{"2,3":"#1 #3"},speech:{"2,3":"#1 #3"}},">=":{comment:["´óÓÚµÈÓÚ"],alternative:["⦊=","ge","geq","´óÓÚµÈÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\geq #3"},ruleML:{"2,3":"#1<mo>≥</mo>#3"},speech:{"2,3":"#1 greater than or equal to #3"}},"<=":{comment:["Ð¡ÓÚµÈÓÚ"],alternative:["⦉=","le","leq","Ð¡ÓÚµÈÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\leq #3"},ruleML:{"2,3":"#1<mo>≤</mo>#3"},speech:{"2,3":"#1 less than or equal to #3"}},"^":{comment:["µ½","ÖÕÖ¹Öµ","´Î·½","ÉÏ±ê"],alternative:["µ½","ÖÕÖ¹Öµ","´Î·½","ÉÏ±ê"],type:"operator",priority:30,script:!0,rule:{"2,3":"#1^{#@3}"},offpair:{"2,3":[3]},ruleML:{"2,3":"<msup><mrow>#1</mrow><mrow>#@3</mrow></msup>"},speech:{"2,3":" quantityV #1 Vendquantity to the quantityE #@3 Eendquantity "}},"▲":{comment:[],alternative:[],type:"operator",priority:30,script:!0,rule:{"2,3":"#1^{#@3}"},offpair:{"2,3":[3]},ruleML:{"2,3":"<msup><mrow>#1</mrow><mrow>#@3</mrow></msup>"},speech:{"2,3":" quantityV #1 Vendquantity derivative quantityE #@3 Eendquantity "}},_:{comment:["´Ó","³õÊ¼Öµ","ÏÂ±ê"],alternative:["´Ó","³õÊ¼Öµ","ÏÂ±ê"],type:"operator",priority:30,script:!0,rule:{"2,3":"#1_{#@3}"},offpair:{"2,3":[3]},ruleML:{"2,3":"<msub><mrow>#1</mrow><mrow>#@3</mrow></msub>"},speech:{"2,3":" quantityX #1 Xendquantity sub quantityY #@3 Yendquantity "}},subsup:{comment:[],alternative:[],type:"operator",priority:30,script:!0,rule:{"2,4":"#1_{#@3}^{#@4}"},offpair:{"2,4":[3,4]},ruleML:{"2,4":"<msubsup><mrow>#1</mrow><mrow>#@3</mrow><mrow>#@4</mrow></msubsup>"},speech:{"2,4":" quantityX #1 Xendquantity sub quantityY #@3 Yendquantity to the quantityZ #@4 Zendquantity"}},"^^":{alternative:[],type:"operator",priority:30,script:!0,rule:{"2,3":"#{}^#@3 #1"},offpair:{"2,3":[3]}},__:{alternative:[],type:"operator",priority:30,script:!0,rule:{"2,3":"#{}_#@3 #1"},offpair:{"2,3":[3]}},"<":{comment:["Ð¡ÓÚ"],alternative:["⦉","less than","Ð¡ÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\lt #3"},ruleML:{"2,3":"#1<mo>&lt;</mo>#3"},speech:{"2,3":"  #1 less than #3 "}},">":{comment:["´óÓÚ"],alternative:["⦊","greater than","´óÓÚ"],type:"relation",priority:0,rule:{"2,3":"#1 \\gt #3"},ruleML:{"2,3":"#1<mo>&gt;</mo>#3"},speech:{"2,3":"  #1 greater than #3 "}},"\n":{alternative:[],type:"relation",priority:-10,rule:{"2,3":`#1 
 #3`}},",":{alternative:[],type:"operator",priority:-10,rule:{"2,3":"#1,#3"},ruleML:{"2,3":"#1<mo>,</mo>#3"},speech:{"2,3":"#1 comma #3"}},"?":{alternative:[],type:"symbol",priority:10,rule:{"2,3":"#1,#3"},ruleML:{"2,3":"#1<mo>,</mo>#3"},speech:{"2,3":"#1 comma #3"}},";":{alternative:[],type:"operator",priority:-10,rule:{"2,3":"#1;#3"}},"|":{alternative:[],type:"operator",priority:-10,rule:{"2,3":"#1 \\mid #3"},speech:{"2,3":"#1 divides #3"},ruleML:{"2,3":'#1<mo intent="divides">|</mo>#3'}},"+-":{comment:["Õý¸º","¼Ó¼õ"],alternative:["plusminus","pm","¼Ó¼õ","Õý¸º"],type:"operator",priority:10,rule:{"2,3":"#1 \\pm #3"},ruleML:{"2,3":"#1<mo>±</mo>#3"},speech:{"2,3":"#1 plus-minus #3"}},"-+":{comment:[],alternative:["minusplus","mp"],type:"operator",priority:10,rule:{"2,3":"#1 \\mp #3"},ruleML:{"2,3":"#1<mo>∓</mo>#3"},speech:{"2,3":"#1 minus-plus #3"}},del:{comment:["Æ«Î¢·Ö"],alternative:["partial","Æ«Î¢·Ö"],type:"symbol",priority:-1,rule:{"1,1":"\\partial"}},grad:{alternative:["nabla"],type:"symbol",priority:-1,rule:{"1,1":"\\nabla"}},"O/":{alternative:["emptyset"],type:"symbol",priority:-1,rule:{"1,1":"\\emptyset"},speech:{"1,1":" empty set "},ruleML:{"1,1":"<mi>∅</mi>"}},infty:{comment:["ÎÞÇî´ó"],alternative:["infinity","oo","ÎÞÇî´ó"],type:"symbol",priority:-1,rule:{"1,1":"\\infty"},speech:{"1,1":" infinity "},ruleML:{"1,1":"<mi>∞</mi>"}},"✂️":{comment:[],alternative:[],type:"symbol",priority:-1,rule:{"1,1":""},speech:{"1,1":""},ruleML:{"1,1":""}},aleph:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\aleph"},speech:{"1,1":" aleph "},ruleML:{"1,1":"<mi>א</mi>"}},backslash:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\backslash "},speech:{"1,1":" backslash "},ruleML:{"1,1":"<mi>\\</mi>"}},"'":{comment:["ËùÒÔ"],alternative:["prime"],type:"symbol",priority:-1,rule:{"1,1":"'"},speech:{"1,1":" prime "},ruleML:{"1,1":"<mo>&#x2032;</mo>"}},":.":{comment:["ËùÒÔ"],alternative:["therefore","thus","hence","ËùÒÔ"],type:"symbol",priority:-1,rule:{"1,1":"\\therefore"}},":'":{comment:["ÒòÎª"],alternative:["because","since","ÒòÎª"],type:"symbol",priority:-1,rule:{"1,1":"\\because"}},"...":{comment:["Ê¡ÂÔºÅ"],alternative:["Ê¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"#comma?[\\ldots&\\cdots]"}},ldots:{comment:["µÍÊ¡ÂÔºÅ"],alternative:["µÍÊ¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\ldots"}},cdots:{comment:["ÖÐÊ¡ÂÔºÅ","ÖÐÐÄÊ¡ÂÔºÅ"],alternative:["ÖÐÊ¡ÂÔºÅ","ÖÐÐÄÊ¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\cdots"}},vdots:{comment:["ÊúÊ¡ÂÔºÅ"],alternative:["ÊúÊ¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\vdots"}},ddots:{comment:["Ð±Ê¡ÂÔºÅ"],alternative:["Ð±Ê¡ÂÔºÅ"],type:"symbol",priority:-1,rule:{"1,1":"\\ddots"}},frown:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\frown"}},diamond:{comment:["ÁâÐÎ"],alternative:["ÁâÐÎ"],type:"symbol",priority:-1,rule:{"1,1":"\\diamond"}},square:{comment:["·½ÐÎ","Õý·½ÐÎ"],alternative:["·½ÐÎ","Õý·½ÐÎ"],type:"symbol",priority:-1,rule:{"1,1":"\\square"}},CC:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{C}"},speech:{"1,1":" C "},ruleML:{"1,1":"<mi>ℂ</mi>"}},NN:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{N}"},speech:{"1,1":" N "},ruleML:{"1,1":"<mi>ℕ</mi>"}},QQ:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{Q}"},speech:{"1,1":" Q "},ruleML:{"1,1":"<mi>ℚ</mi>"}},RR:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{R}"},speech:{"1,1":" R "},ruleML:{"1,1":"<mi>ℝ</mi>"}},ZZ:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\mathbb{Z}"},speech:{"1,1":" Z "},ruleML:{"1,1":"<mi>ℤ</mi>"}},sqrt:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\sqrt{#2}"},speech:{"1,2":" square root of quantityZ #2 Zendquantity "},ruleML:{"1,2":"<msqrt><mrow>#2</mrow></msqrt>"}},lim:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\lim_{#2}"},speech:{"1,2":" limit of #2 endlimit "},ruleML:{"1,2":"<munder><mo>lim</mo><mrow>#2</mrow></munder>"}},quote:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\text{ #2 }"},speech:{"1,2":" #2 "},ruleML:{"1,2":'<mspace width="0.5em"></mspace><mtext>#2</mtext><mspace width="0.5em"></mspace>'}},gcd:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\gcd(#2)"},speech:{"1,2":" gcd of quantityZ #2 Zendquantity "},ruleML:{"1,2":"<mi>gcd</mi><mo>&ApplyFunction;</mo>(#2)"}},cardinality:{comment:["»ùÊý"],alternative:["card","»ùÊý"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" cardinality of quantityB #2 Bendquantity "},ruleML:{"1,2":'<mrow intent="cardinality($b)"><mo>|</mo><wrap arg="b">#2</wrap><mo>|</mo></mrow>'}},abs:{comment:["¾ø¶ÔÖµ"],alternative:["absolute","¾ø¶ÔÖµ"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" absolute value of quantityB #2 Bendquantity "},ruleML:{"1,2":'<mrow intent="absolute-value($absb)"><mo>|</mo><mrow arg="absb">#2</mrow><mo>|</mo></mrow>'}},norm:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" norm of quantityB #2 Bendquantity "},ruleML:{"1,2":'<mrow intent="norm($normb)"><mo>|</mo><mrow arg="normb">#2</mrow><mo>|</mo></mrow>'}},det:{comment:["¾ø¶ÔÖµ"],alternative:["determinant"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" determinant of #2 "},ruleML:{"1,2":'<mrow intent="determinant($detb)"><mo>|</mo><wrap arg="detb">#2</wrap><mo>|</mo></mrow>'}},order:{comment:["¾ø¶ÔÖµ"],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"|#2|"},speech:{"1,2":" order of #2 "},ruleML:{"1,2":'<mrow intent="order($orderb)"><mo>|</mo><wrap arg="orderb">#2</wrap><mo>|</mo></mrow>'}},span:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\langle #2\\rangle"},speech:{"1,2":" span of #2 "},ruleML:{"1,2":'<mrow intent="span($c)"><mo>⟨</mo><mrow arg="c">#2</mrow><mo>⟩</mo></mrow>'}},vector:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\langle #2\\rangle"},speech:{"1,2":"coordinate vector #2 endvector"},ruleML:{"1,2":'<mrow intent="coordinate-vector($c)"><mo>⟨</mo><mrow arg="c">#2</mrow><mo>⟩</mo></mrow>'}},anglebrackets:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\langle #2\\rangle"},speech:{"1,2":" anglebrackets #2 endanglebrackets "},ruleML:{"1,2":'<mrow intent="angle-brackets($c)"><mo>⟨</mo><mrow arg="c">#2</mrow><mo>⟩</mo></mrow>'}},setof:{comment:[],alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\{#2\\}"},speech:{"1,2":"set #2 endset "},ruleML:{"1,2":'<mrow intent="set($d)"><mo>{</mo><mrow arg="d">#2</mrow><mo>}</mo></mrow>'}},floor:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\lfloor #2 \\rfloor"},speech:{"1,2":"floor of #2 endfloor"},ruleML:{"1,2":'<mrow intent="floor($e)"><mo>⌊</mo><mrow arg="e">#2</mrow><mo>⌋</mo></mrow>'}},ceiling:{alternative:["ceil"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\lceiling #2 \\rceiling"}},bigO:{alternative:[],type:"function",priority:15,rule:{"1,2":"O#2"},speech:{"1,2":"big-Oh of #2"},ruleML:{"1,2":'<mi intent="bigO">O</mi><mo>&ApplyFunction;</mo>#2'}},log:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log #2"},speech:{"1,2":"log of #2"},ruleML:{"1,2":"<mi>log</mi><mo>&ApplyFunction;</mo>#2"}},llog:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log_2 #2"},speech:{"1,2":"log log of #2"},ruleML:{"1,2":'<msub><mi>log</mi><mn intent=":index">2</mn></msub><mo>&ApplyFunction;</mo>#2'}},lllog:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log_3 #2"},speech:{"1,2":"log log log of #2"},ruleML:{"1,2":'<msub><mi>log</mi><mn intent=":index">3</mn></msub><mo>&ApplyFunction;</mo>#2'}},baselog:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\log"},speech:{"1,2":"log "},ruleML:{"1,2":"log"}},ln:{alternative:["ln"],type:"function",priority:15,rule:{"1,2":"\\ln #2"},speech:{"1,2":"natural log of #2"},ruleML:{"1,2":"<mi>ln</mi><mo>&ApplyFunction;</mo>#2"}},baseln:{alternative:[],type:"function",priority:15,rule:{"1,2":"\\ln"},speech:{"1,2":"natural log "},ruleML:{"1,2":"ln"}},root:{alternative:[],type:"function",priority:55,extraArgument:1,offpair:{"1,3":[2,3]},rule:{"1,3":"\\sqrt[#2]{#3}","1,2":"\\sqrt{#2}"}},frac:{alternative:[],type:"function",priority:20,extraArgument:1,offpair:{"1,3":[2,3]},rule:{"1,3":"\\frac{#2}{#3}","1,2":"\\frac{#2@1}{#2@-1}"}},summm:{comment:["×ÜºÍ","ÇóºÍ"],alternative:["summation","×ÜºÍ","ÇóºÍ"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\sum{#2}"}},fundef:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2\\,:\\, #3 	o #4"},speech:{"1,4":"function #2 from #3 to #4 "},ruleML:{"1,4":"<mrow>#2<mo>:</mo>#3<mo>→</mo>#4</mrow>"}},congruentmod:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2\\equiv #3 \\pmod  #4"},speech:{"1,4":"#2 congruent to #3 modulo #4 "},ruleML:{"1,4":'<mrow>#2<mo>≡</mo>#3<mspace width="0.5em"></mspace><mo>(</mo><mi>mod</mi><mspace width="0.25em"></mspace>#4<mo>)</mo></mrow>'}},notcongruentmod:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2\\not\\equiv #3 \\pmod  #4"},speech:{"1,4":"#2 not congruent to #3 modulo #4 "},ruleML:{"1,4":'<mrow>#2<mo>≢</mo>#3<mspace width="0.5em"></mspace><mo>(</mo><mi>mod</mi><mspace width="0.25em"></mspace>#4<mo>)</mo></mrow>'}},wrapper:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":" #2 "},speech:{"1,2":"#2"},ruleML:{"1,2":"#2"}},opwrap:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2],"1,3":[2]},rule:{"1,2":" #2 ","1,3":" #2{#3}"},speech:{"1,2":"#2","1,3":"#2 #3 "},ruleML:{"1,2":"#2","1,3":"#2<mrow>#3</mrow>"}},limsop:{alternative:[],type:"function",priority:55,offpair:{"1,3":[2,3],"1,4":[1,2,3,4],"1,5":[1,2,3,4,5]},extraArgument:2,rule:{"1,4":"#2_{#3}^{#4}"},speech:{"1,4":" #2 from #3 to #4 "},ruleML:{"1,4":"<munderover>#2<mrow>#3</mrow><mrow>#4</mrow></munderover>"}},llimop:{alternative:[],type:"function",priority:55,offpair:{"1,3":[2,3]},extraArgument:1,rule:{"1,3":"#2_{#3}"},speech:{"1,3":" #2 over #3 "},ruleML:{"1,3":"<munder>#2<mrow>#3</mrow></munder>"}},functionpower:{alternative:[],type:"function",priority:55,offpair:{"1,4":[2,3]},extraArgument:2,rule:{"1,4":"#2^{#3}#4"},speech:{"1,4":" #2 power #3 of quantityF #4 Fendquantity "},ruleML:{"1,4":"<msup><mi>#2</mi><mrow>#3</mrow></msup><mo>&ApplyFunction;</mo>#4"}},functionsubscript:{alternative:[],type:"function",priority:55,offpair:{"1,4":[2,3]},extraArgument:2,rule:{"1,4":"#2_{#3}#4"},speech:{"1,4":" #2 sub #3 of quantityF #4 Fendquantity "},ruleML:{"1,4":"<msub><mi>#2</mi><mrow>#3</mrow></msub><mo>&ApplyFunction;</mo>#4"}},bigop:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":" #2 "},speech:{"1,2":" #2 "},ruleML:{"1,2":"#2"}},intlims:{alternative:[],type:"function",priority:55,offpair:{"1,6":[2,3,4,5,6]},extraArgument:4,rule:{"1,6":"#2_{#3}^{#4} #5 \\,d#6"},speech:{"1,6":" #2 from #3 to #4 of #5 d#6 "},ruleML:{"1,6":'<mrow><munderover>#2<mrow>#3</mrow><mrow>#4</mrow></munderover>#5<mspace width="0.167em"></mspace><mo>&dd;</mo>#6</mrow>'}},intlimsweight:{alternative:[],type:"function",priority:55,offpair:{"1,7":[2,3,4,5,6,7]},extraArgument:5,rule:{"1,7":"#2_{#3}^{#4} #5 \\,\\frac{d#6}{#7}"},speech:{"1,7":" #2 from #3 to #4 of #5 d#6 over #7 "},ruleML:{"1,7":'<mrow><munderover>#2<mrow>#3</mrow><mrow>#4</mrow></munderover>#5<mspace width="0.167em"></mspace><mfrac><mrow><mo>&dd;</mo>#6</mrow><mrow>#7</mrow></mfrac></mrow>'}},intllimweight:{alternative:[],type:"function",priority:55,offpair:{"1,6":[2,3,4,5,6]},extraArgument:4,rule:{"1,6":"#2_{#3} #4 \\,\\frac{d#5}{#6}"},speech:{"1,6":" #2 over #3 of #4 d#5 over #6 "},ruleML:{"1,6":'<mrow><munder>#2<mrow>#3</mrow></munder>#4<mspace width="0.167em"></mspace><mfrac><mrow><mo>&dd;</mo>#5</mrow><mrow>#6</mrow></mfrac></mrow>'}},intllim:{alternative:[],type:"function",priority:55,offpair:{"1,5":[2,3,4,5]},extraArgument:3,rule:{"1,5":"#2_{#3} #4 \\,d#5"},speech:{"1,5":" #2 over #3 of #4 d#5 "},ruleML:{"1,5":'<mrow><munder>#2<mrow>#3</mrow></munder>#4<mspace width="0.167em"></mspace><mo>&dd;</mo>#5</</mrow>'}},int:{alternative:["integral"],type:"function",priority:55,family:["int","oint"],pairedArgument:"d",rule:{"1,2":"\\int #2","1,3":"\\int #2 \\,d#3","1,5":"\\int_{#2}^{3} #4 \\,d#5"},speech:{"1,2":"integral  #2","1,3":"integral  #2 d#3","1,5":"integral from #2 to #3 of #4 d#5"},ruleML:{"1,2":"<mo>∫</mo>#2","1,3":'<mo>∫</mo>#2<mspace width="0.167em"></mspace><mo>&dd;</mo>#3'}},oint:{alternative:[],type:"function",priority:55,family:["int","oint"],pairedArgument:"d",rule:{"1,3":"\\oint #2 \\,d#3","1,2":"\\oint #2"}},cup:{alternative:["union"],type:"operator",priority:10,rule:{"2,3":"#1 \\cup #3"},speech:{"2,3":" #1 union #3"},ruleML:{"2,3":"#1<mo>∪</mo>#3"}},cap:{alternative:["intersect","intersection"],type:"operator",priority:10,rule:{"2,3":"#1 \\cap #3"},speech:{"2,3":" #1 intersect #3"},ruleML:{"2,3":"#1<mo>∩</mo>#3"}},in:{alternative:["element"],type:"relation",priority:0,rule:{"2,3":"#1 \\in #3"},speech:{"2,3":"#1 in #3"},ruleML:{"2,3":"#1<mo>&#x2208;</mo>#3"}},notin:{alternative:["!in"],type:"relation",priority:0,rule:{"2,3":"#1 \\notin #3"},speech:{"2,3":"#1 not in #3"},ruleML:{"2,3":"#1<mo>∉</mo>#3"}},subset:{alternative:["subset"],type:"relation",priority:0,rule:{"2,3":"#1 \\subset #3"},speech:{"2,3":"#1 subset #3"},ruleML:{"2,3":"#1<mo>⊂</mo>#3"}},neq:{alternative:["!="],type:"relation",priority:0,rule:{"2,3":"#1 \\not= #3"},speech:{"2,3":"#1 not equals #3"},ruleML:{"2,3":"#1<mo>≠</mo>#3"}},and:{alternative:[],type:"operator",priority:10,rule:{"2,3":"#1 \\land #3"}},or:{alternative:[],type:"operator",priority:10,rule:{"2,3":"#1 \\lor #3"}},forall:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\forall"}},exist:{alternative:["exists"],type:"symbol",priority:-1,rule:{"1,1":"\\exists"},speech:{"1,1":" there exists "},ruleML:{"1,1":"<mi>∃</mi>"}},not:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\neg"}},perp:{alternative:["perpendicular","bot"],type:"operator",priority:25,rule:{"2,3":"#1 \\perp #3"},speech:{"2,3":"#1 perpendicular to #3"},ruleML:{"2,3":'<mrow>#1<mo intent="perpendicular">⊥</mo>#3</mrow>'}},dot:{alternative:[],type:"operator",priority:25,rule:{"2,3":"#1 \\cdot #3"},speech:{"2,3":"#1 dot #3"},ruleML:{"2,3":'<mrow>#1<mo intent="dot-product">⋅</mo>#3</mrow>'}},product:{alternative:[],type:"operator",priority:25,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":" #1 product #3 "},ruleML:{"2,3":'<mrow>#1<mo intent="direct-product">×</mo>#3</mrow>'}},times:{alternative:["×"],type:"operator",priority:25,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":"#1 times #3"},ruleML:{"2,3":'<mrow>#1<mo intent="times">×</mo>#3</mrow>'}},by:{alternative:[],type:"operator",priority:25,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":"#1 by #3"},ruleML:{"2,3":'<mrow>#1<mo intent="dimension-product">×</mo>#3</mrow>'}},cross:{alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 \\times #3"},speech:{"2,3":" #1 cross #3 "},ruleML:{"2,3":'<mrow>#1</mrow><mo intent="cross-product">×</mo><mrow>#3</mrow>'}},oointerval:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"(#1, #3)"},speech:{"2,3":" open interval from #1 to #3 endinterval "},ruleML:{"2,3":'<mrow intent="open-interval($f, $g)"><mo>(</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>)</mo></mrow>'}},innergcd:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"(#1, #3)"},speech:{"2,3":" gcd of #1 comma #3 endgcd "},ruleML:{"2,3":'<mrow intent="gcd($f, $g)"><mo>(</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>)</mo></mrow>'}},cartesianpoint:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"(#1, #3)"},speech:{"2,3":" point with coordinates #1 comma #3 endpoint "},ruleML:{"2,3":'<mrow intent="coordinate($f, $g)"><mo>(</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>)</mo></mrow>'}},innerproduct:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1, #3\\rangle "},speech:{"2,3":" inner product of #1 and #3 endinnerproduct "},ruleML:{"2,3":'<mrow intent="inner-product($f, $g)"><mo>⟨</mo><wrap arg="f">#1</wrap><mo>,</mo><wrap arg="g">#3</wrap><mo>⟩</mo></mrow>'}},twovector:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1, #3\\rangle "},speech:{"2,3":" vector #1 comma #3 endvector "},ruleML:{"2,3":'<mrow intent="vector($va, $vb)"><mo>⟨</mo><wrap arg="va">#1</wrap><mo>,</mo><wrap arg="vb">#3</wrap><mo>⟩</mo></mrow>'}},grouppresentation:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1\\ |\\  #3\\rangle "},speech:{"2,3":" group generated by #1 with relations #3 endrelations "},ruleML:{"2,3":'<mrow intent="group-presentation($gpa, $gpb)"><mo>⟨</mo><wrap arg="gpb">#1</wrap><mo stretchy="true">|</mo><wrap arg="gpb">#3</wrap><mo>⟩</mo></mrow>'}},setbuilder:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\{ #1\\ |\\  #3\\} "},speech:{"2,3":" set of #1 such that #3 endset "},ruleML:{"2,3":'<mrow intent="set-such-that($sba, $sbb)"><mo>{</mo><mrow arg="sba">#1</mrow><mo>|</mo><mrow arg="sbb">#3</mrow><mo>}</mo></mrow>'}},braket:{alternative:[],type:"operator",delimitedarguments:!0,priority:20,rule:{"2,3":"\\langle #1 |  #3\\rangle "},speech:{"2,3":" bra-ket of #1 and #3 endbra-ket "},ruleML:{"2,3":'<mrow intent="bra-ket($bka, $bkb)"><mo>⟨</mo><wrap arg="bka">#1</wrap><mo>|</mo><wrap arg="bkb">#3</wrap><mo>⟩</mo></mrow>'}},isom:{alternative:["isomorphic"],type:"relation",priority:0,rule:{"2,3":"#1 \\cong #3"},speech:{"2,3":" #1 isomorphic to #3  "},ruleML:{"2,3":"#1<mo>≅</mo>#3"}},to:{alternative:["->","rightarrow"],type:"operator",priority:20,rule:{"2,3":"#1 \\to #3"},speech:{"2,3":" #1 to #3  "},ruleML:{"2,3":"#1<mo>→</mo>#3"}},longrightarrow:{alternative:["-->"],type:"operator",priority:20,rule:{"2,3":"#1 \\longrightarrow #3"},speech:{"2,3":" #1 long-to #3  "},ruleML:{"2,3":"#1<mo>⟶</mo>#3"}},from:{alternative:["<-","leftarrow"],type:"operator",priority:20,rule:{"2,3":"#1 \\leftarrow #3"},speech:{"2,3":" #1 from #3  "},ruleML:{"2,3":"#1<mo>←</mo>#3"}},longleftarrow:{alternative:["<--"],type:"operator",priority:20,rule:{"2,3":"#1 \\longleftarrow #3"},speech:{"2,3":" #1 long-from #3  "},ruleML:{"2,3":"#1<mo>⟵</mo>#3"}},mapsto:{alternative:[],type:"operator",priority:20,rule:{"2,3":"#1 \\mapsto #3"},speech:{"2,3":" #1 maps to #3  "},ruleML:{"2,3":"#1<mo>↦</mo>#3"}},"~":{alternative:["asymp","asymptotic"],type:"relation",priority:0,rule:{"2,3":"#1 \\sim #3"},speech:{"2,3":" #1 asymptotic to #3  "},ruleML:{"2,3":'#1<mo intent="asymptotic">~</mo>#3'}},"≈":{alternative:["approx","approximate","approximately"],type:"relation",priority:0,rule:{"2,3":"#1 \\approx #3"},speech:{"2,3":" #1 approximately equal to #3  "},ruleML:{"2,3":'#1<mo intent="approximately">≈</mo>#3'}},cong:{alternative:["congruent"],type:"relation",priority:0,rule:{"2,3":"#1 \\equiv #3"},speech:{"2,3":" #1 congruent to #3  "},ruleML:{"2,3":'#1<mo intent="congruent">≡</mo>#3'}},"!cong":{alternative:["!congruent"],type:"relation",priority:0,rule:{"2,3":"#1 \\not\\equiv #3"},speech:{"2,3":" #1 not congruent to #3  "},ruleML:{"2,3":'#1<mo intent="not-congruent">≢</mo>#3'}},equiv:{alternative:["equivalent"],type:"relation",priority:0,rule:{"2,3":"#1 \\equiv #3"},speech:{"2,3":" #1 equivalent to #3  "},ruleML:{"2,3":'#1<mo intent="equivalent">≡</mo>#3'}},identical:{alternative:[],type:"relation",priority:0,rule:{"2,3":"#1 \\equiv #3"},speech:{"2,3":" #1 identical to #3  "},ruleML:{"2,3":'#1<mo intent="identical">≡</mo>#3'}},":=":{alternative:["coloneq","coloneqq"],type:"relation",priority:0,rule:{"2,3":"#1 \\coloneqq #3"},speech:{"2,3":" #1 defined as #3  "},ruleML:{"2,3":'#1<mo intent="defined-as">≔</mo>#3'}},":":{alternative:["colon"],type:"relation",priority:0,rule:{"2,3":"#1 \\colon #3"},speech:{"2,3":" #1 colon #3  "},ruleML:{"2,3":"#1<mo>:</mo>#3"}},"cases:":{alternative:[],type:"multiline",lineBreak:!0,params:["caseEnvironment"],note:"cases",MathMLnote:"cases"},casesline:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":"#2 & \\text{ #3 } #4"},speech:{"1,4":"#2 #3 #4 "},ruleML:{"1,4":`<mtr><mtd>#2</mtd><mtd style="text-align: left"><mspace width="1em"></mspace><mtext>#3</mtext><mspace width="0.5em"></mspace>#4</mtd></mtr>
`}},"system:":{alternative:[],type:"multiline",params:["system","&beforeFirstRelation"],absorbEmptyLine:!0,emptyLineBeforeIndent:!0,note:"mdn",speechnote:"system",MathMLnote:"system"},"align:":{alternative:[],type:"multiline",params:["align","&atMarker"],absorbEmptyLine:!0,emptyLineBeforeIndent:!0,note:"mdn",speechnote:"align",MathMLnote:"align"},"derivation:":{alternative:[],type:"multiline",params:["derivation","&beforeFirstRelation"],absorbEmptyLine:!0,emptyLineBeforeIndent:!0,note:"mdn",speechnote:"derivation",MathMLnote:"derivation"},systemline:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":`<mrow>#2  #3   #4</mrow>
`},speech:{"1,4":"#2 #3 #4 "},ruleML:{"1,4":`<mtr><mtd style="text-align: right">#2</mtd><mtd>#3</mtd><mtd style="text-align: left">#4</mtd></mtr>
`}},alignline:{alternative:[],type:"function",priority:55,offpair:{"1,4":[1,2,3,4]},extraArgument:2,rule:{"1,4":`<mrow>#2  #3 \\amp  #4</mrow>
`},speech:{"1,4":"#2 #3 #4 "},ruleML:{"1,4":`<mtr><mtd style="text-align: right">#2</mtd><mtd>#3</mtd><mtd style="text-align: left">#4</mtd></mtr>
`}},derivationline:{alternative:[],type:"function",priority:55,offpair:{"1,3":[1,2,3]},extraArgument:1,rule:{"1,3":`<mrow> #2  #3</mrow>
`},speech:{"1,3":"#2 #3 "},ruleML:{"1,3":`<mtr><mtd></mtd><mtd>#2</mtd><mtd style="text-align: left">#3</mtd></mtr>
`}},"linearsystem:":{alternative:[],type:"multiline",seperateOut:!0,absorbEmptyLine:!0,emptyLineBeforeIndent:!0,noBeginEnd:!0,changeLineTurn:",",note:"\\systeme"},hat:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\hat{#2}"}},overline:{alternative:["bar"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\overline{#2}"},speech:{"1,2":" #2 bar "},ruleML:{"1,2":'<mover>#2<mo accent="true">―</mo></mover>'}},conj:{alternative:["conjugate"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\overline{#2}"},speech:{"1,2":" #2 conjugate "},ruleML:{"1,2":'<mover intent="conjugate($x)"><mrow arg="x">#2</mrow><mo accent="true">-</mo></mover>'}},vec:{alternative:["conjugate"],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\overline{#2}"},speech:{"1,2":" vector quantityV #2 Vendquantity "},ruleML:{"1,2":'<mrow intent="vector($va)"><wrap mathvariant="bold" arg="va">#2</wrap></mrow>'}},underline:{alternative:[],type:"function",priority:55,offpair:{"1,2":[2]},rule:{"1,2":"\\underline{#2}"}},if:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"if"},speech:{"1,1":" if "},ruleML:{"1,1":"if"}},otherwise:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"otherwise"},speech:{"1,1":" otherwise "},ruleML:{"1,1":"otherwise"}},when:{alternative:[],type:"symbol",priority:-1,rule:{"1,1":"#&\\text{when }"}},"!":{alternative:[],type:"postfix",priority:-1,rule:{"1,1":"!"},speech:{"1,1":" factorial "},ruleML:{"1,1":"<mo>!</mo>"}}},Te=[["cent","¢"],["dollar","$"],["pound","£"],["euro","€"]],je=["log","llog","lllog","ln","lg","vec","hat","bar","abs","det","order","card","len","length","norm","floor","ceil","ceiling"],ge=[["sin","sine"],["cos","cosine"],["tan","tangent"],["cot","cotgent"],["sec","secant"],["csc","cosecant"],["arcsin","arcsine"],["arccos","arccosine"],["arctan","arctangent"],["arccot","arccotgent"],["arcsec","arcsecant"],["arccsc","arccosecant"],["sinh","sinch"],["cosh","cosh"],["tanh","tanch"]],ye=je.slice();for(const e of ge)ye.push(e[0]);console.debug("Do I see this?"),console.debug("greedyfunctions",ye);var Oe=[["α","alpha"],["β","beta"],["γ","gamma"],["δ","delta"],["ε","varepsilon"],["ϵ","epsilon"],["ζ","zeta"],["η","eta"],["θ","theta"],["ι","iota"],["κ","kappa"],["λ","lambda"],["μ","mu"],["ν","nu"],["ξ","xi"],["ο","omicron"],["π","pi"],["ρ","rho"],["σ","sigma"],["τ","tau"],["υ","upsilon"],["ϕ","phi"],["φ","varphi"],["χ","chi"],["ψ","psi"],["ω","omega"],["Α","Alpha"],["Β","Beta"],["Γ","Gamma"],["Δ","Delta"],["Ε","Epsilon"],["Ζ","Zeta"],["Η","Eta"],["Θ","Theta"],["Ι","Iota"],["Κ","Kappa"],["Λ","Lambda"],["Μ","Mu"],["Ν","Nu"],["Ξ","Xi"],["Ο","Omicron"],["Π","Pi"],["Ρ","Rho"],["Σ","Sigma"],["Τ","Tau"],["Υ","Upsilon"],["Φ","Phi"],["Χ","Chi"],["Ψ","Psi"],["Ω","Omega"]];for(const e of ge)I[e[0]]={alternative:[],type:"function",priority:15,rule:{"1,2":"\\"+e[0]+" #2"},speech:{"1,2":e[1]+" #2 "},ruleML:{"1,2":"<mi>"+e[0]+"</mi><mo>&ApplyFunction;</mo>#2"}},I["base"+e[0]]={alternative:[],type:"function",priority:15,rule:{"1,2":"\\"+e[0]},speech:{"1,2":e[1]+" "},ruleML:{"1,2":e[0]}};for(const e of Oe)I[e[1]]={alternative:[],type:"letter",priority:-1,rule:{"1,1":"\\"+e[1]},speech:{"1,1":" "+e[1]+" "},ruleML:{"1,1":"<mi>"+e[0]+"</mi>"}};for(const e of Te)I[e[0]]={alternative:[],type:"symbol",priority:-1,rule:{"1,1":"\\"+e[0]},speech:{"1,1":" "+e[0]+" "},ruleML:{"1,1":"<mi>"+e[1]+"</mi>"}};console.debug("End of dictionary.js"),String.prototype.myHash=function(){var e=0,t,l;if(this.length===0)return e;for(t=0;t<this.length;t++)l=this.charCodeAt(t),e=(e<<5)-e+l,e|=0;return e};let S="STart";S="";const G=function(e){if(typeof e=="string")return e;if(!Array.isArray(e)){let i="";const s=e.tag;let o=d[s];return o||(o=$(s)),i+=o.before_begin+o.begin_tag+S,"xmlattributes"in e&&e.xmlattributes&&(i+=" "+e.xmlattributes.trim()),"id"in e&&e.id&&(i+=' xml:id="'+j(e.id)+'"'),Object.keys(e).forEach(b=>{["tag","content","title","xmlattributes","id"].includes(b)||(i+=" "+b+'="'+e.el+'"')}),i+=o.after_begin,"title"in e&&e.title&&(i+="<title>"+e.title+`</title>
`),i+G(e.content)+o.before_end+o.end_tag+o.after_end}const t=e;let l="";return t.forEach((i,s)=>{if(typeof i=="string"){i.match(/^\s*$/)||(l+="<TEXT>"+i+"</TEXT>",console.log("just added error of",i));return}let o="";const u=i.tag;let g=d[u];typeof g>"u"&&(g=Ne),o=o+g.before_begin+g.begin_tag+S,"xmlattributes"in i&&i.xmlattributes&&(o+=" "+i.xmlattributes.trim()),"id"in i&&i.id&&(o+=' xml:id="'+j(i.id)+'"'),Object.keys(i).forEach(r=>{!["tag","content","title","xmlattributes","id"].includes(r)&&!r.startsWith("_")&&(o+=" "+r+'="'+i[r]+'"')}),o+=g.after_begin,"title"in i&&i.title&&(o+="<title>"+i.title+`</title>
`);let p=G(i.content);["c","code"].includes(u)&&(p=Xe(p));let a="";["m","md","me","mdn","men","sm","smen"].includes(u)&&(p.match(/^.*(\.|,|;)\s*$/s)&&(p=p.replace(/\s*$/,""),a=p.slice(-1),p=p.slice(0,-1)),p=Re(p)),o=o+p;let n=g.before_end+g.end_tag+a+g.after_end;o=o+n,o.match(/^\s*<p>\s*<\/p>\s*$/)&&(console.log("empty p"),o=""),l=l+o}),l=l.replace(/(\/)(me|md|men|mdn)>\s+(\.|,|;|:)/g,"$1$2>$3"),l},j=function(e){let t=e;return t=t.replace(/ /g,"-"),t=t.replace(/[^a-zA-Z0-9\-]/g,"_"),t},Xe=function(e){let t=e;return t=t.replace(/&/g,"&amp;"),t=t.replace(/</g,"&lt;"),t=t.replace(/>/g,"&gt;"),t},Re=function(e){let t=e;return t=t.replace(/&/g,"\\amp "),t=t.replace(/</g,"\\lt "),t=t.replace(/>/g,"\\gt "),t},Pe=function(e,t,l){let i=l,s=0;const o=e.length;for(;i<t.length;){const u=t[i];if(s<=0&&t.slice(i,i+o)===e)return i;u==="\\"?i++:u==="{"?s++:u==="}"&&s--,i++}return-1},Be=function(e){return e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")},Fe=/^\\AAAAAAAbegin{/,O=function(e,t,l){if(typeof e=="string")return de(e);if(!Array.isArray(e)){let o={...e};return o.content=O(o.content,t,l),o}let i=[],s="";return e.forEach((o,u)=>{if(l.includes(o.tag))s&&(i.push({tag:"p",content:s}),s=""),E.includes(o.tag)&&typeof o.content=="string"?(o.content=H(o.content,L),o.content=O(o.content,t,l)):E.includes(o.tag)&&(o.content=O(o.content,t,l)),i.push(o);else if(o.tag=="text")o.content.split(/\n\s*\n{1,}/).forEach(b=>{const p=s+b;if(p){const a={tag:"p",content:p};i.push(a)}s=""});else if(typeof o.content=="string"&&E.includes(o.tag)){let g=[];o.content.split(/\n\s*\n{1,}/).forEach(p=>{const a=p.trim();a&&g.push({tag:"p",content:a})}),o.content=g,i.push(o)}else i.push(o)}),i},de=function(e){let t=[],l="";const i=e.split(/\n\s*\n{1,}/);return console.log("found ",i.length," pieces, which are:",i),i.forEach(s=>{const o=l+s;if(o){console.log("made this_new_text",o);const u={tag:"p",content:o};t.push(u)}l=""}),t},H=function(e,t){typeof e!="string"&&alert("expected string in splitTextAtDelimiters",e);var l=e;let i;const s=[],o=new RegExp("("+t.map(u=>Be(u.left)).join("|")+")");for(;i=l.search(o),i!==-1;){i>0&&(s.push({tag:"text",content:l.slice(0,i)}),l=l.slice(i));const u=t.findIndex(p=>l.startsWith(p.left));if(i=Pe(t[u].right,l,t[u].left.length),i===-1)break;const g=l.slice(0,i+t[u].right.length),b=Fe.test(g)?g:l.slice(t[u].left.length,i);s.push({tag:t[u].tag,content:b}),l=l.slice(i+t[u].right.length)}return l.match(/^\s*$/)||s.push({tag:"text",content:l}),s},Ie=function(e){typeof e!="string"&&alert("expected a string, but got:",e);let t=e;return t=t.replace(/(^|\s|~)\$([^\$\n]+)\$(\s|$|[.,!?;:\-])/mg,"$1<sm>$2</sm>$3"),t=t.replace(/(^|\s)_([^_\n]+)_(\s|$|[.,!?;:])/mg,"$1<term>$2</term>$3"),t=t.replace(/(^|\s)\*\*([^*\n]+)\*\*(\s|$|[.,!?;:])/mg,"$1<alert>$2</alert>$3"),t=t.replace(/(^|\s)\*([^*\n]+)\*(\s|$|[.,!?;:])/mg,"$1<em>$2</em>$3"),t=t.replace(/(^|\s)``([^'"`\n]+)''(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),t=t.replace(/(^|\s)``([^'"`\n]+)"(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),t=t.replace(/(^|\s)`([^'"`\n]+)'(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),t=t.replace(/(^|\s)"([^"\n]+)"(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),t=t.replace(/(^|\s)'([^'\n]+)'(\s|$|[.,!?;:])/mg,"$1<q>$2</q>$3"),t=t.replace(/(^|[^`a-zA-Z0-9])`([^`\n]+)`($|[^`a-zA-A0-9])/mg,"$1<c>$2</c>$3"),t},be=function(e,t,l){return Ee[t+l]},Ze=function(e){typeof e!="string"&&alert("expected a string, but got:",e);let t=e;t=t.replace(/<!--.*?-->/g,"");for(let[l,i]of Object.entries(ke)){let s=l;i.forEach(o=>{let u=o;t=t.replace("<"+u+">","<"+s+">"),t=t.replace("<"+u+" ","<"+s+" "),t=t.replace("</"+u+">","</"+s+">"),t=t.replace("\\begin{"+u+"}","\\begin{"+s+"}"),t=t.replace("\\end{"+u+"}","\\end{"+s+"}"),t=t.replace("\\"+u+"{","\\"+s+"{")})}return t},v=function(e,t,l,i,s="all",o="all",u=""){let g=[];typeof t=="string"?t=="displaymath"?g=A:t=="spacelike"?g="spacelike":alert("unknown taglist "+t):typeof t[0]=="string"?g=he(t):g=t;let b=[];if(Array.isArray(e))return e.forEach((p,a)=>{if(l>i&&p.tag!="text")b.push(p);else{let n;s=="all"||s.includes(p.tag)?n=v(p,t,l+1,i,s,o,p.tag):n=p,Array.isArray(n)?n.forEach(r=>{b.push(r)}):b.push(n)}}),b;if(typeof e=="string"){if(l>i+2)return e;if(g==="spacelike")return o=="all"||o.includes(u)?Ie(e):e;let p=e;return g==="makeparagraphs"?(o=="all"||o.includes(u))&&(p=de(p)):(o=="all"||o.includes(u))&&(p=H(p,g)),p}else{typeof e!="object"&&alert("wrong category for ",e);let p={...e};if(l>i&&p.tag!="text")return p;let a=p.content;return(s=="all"||o.includes(p.tag))&&(a=v(a,t,l+1,i,s,o,p.tag)),p.tag=="text"&&typeof a=="string"?p.content=a:p.tag!="text"?a.length==1&&a[0].tag=="text"?p.content=a[0].content:p.content=a:p=a,p}},h=function(e,t,l=0,i=0,s="all",o="",u="",g="section"){let b=[];if(Array.isArray(e))e.forEach((a,n)=>{let r;typeof a=="object"?r=h({...a},t,l+1,i,s,a.tag,o):r=h(a,t,l+1,i,s,o,u),b.push(r)});else if(typeof e=="object"){if(t=="oneline environments"&&e.tag=="p"&&typeof e.content=="string"){if(e.content.match(/^\s*([A-Za-z]+):/)){let r=e.content.split(":",1)[0].toLowerCase();r=r.trim();const m=e.content.replace(/^\s*[^:]*:\s*/,"");e.tag=r,e.content=m}}else if(t=="extract li"&&e.tag=="p"&&typeof e.content=="string"){if(e.content.match(/^\s*\\item\s/)){const n="li",r=e.content.replace(/^\s*\\item\s*/,"");e.tag=n,e.content=r}else if(e.content.match(/^\s*\-+\s/)){const n="li",r=e.content.replace(/^\s*\-+\s*/,"");e.tag=n,e.content=r,e._parenttag="ul"}else if(e.content.match(/^\s*\++\s/)){const n="li",r=e.content.replace(/^\s*\++\s*/,"");e.tag=n,e.content=r,e._parenttag="ol"}else if(e.content.match(/^\s*\(*[0-9]+\.*\)*\s/)){const n="li",r=e.content.replace(/^\s*\(*[0-9]+\.*\)*\s*/,"");e.tag=n,e.content=r,e._parenttag="ol"}}else if(t=="xmlattributes"&&typeof e.content=="string"){var p=new RegExp("^\\s*("+F.join("|")+")[^<>+]*>","s");if(p.test(e.content)||e.content.match(/^\s*[^\n<>+]*>/))if(e.content.match(/^\s*>/))e.content=e.content.replace(/^\s*>/,"");else{let n=e.content.split(">",1)[0];e.content=e.content.replace(/^\s*[^<>]*>/s,""),"xmlattributes"in e?e.xmlattributes+=n:e.xmlattributes=n}}else if(t=="attributes"&&typeof e.content=="string"){const n=e.content.split(/\n\s*\n{1,}/);if(n.length>1){let r="";var p=new RegExp("^("+F.join("|")+")");n.forEach(c=>{let y=c.trim();if(p.test(y)){let w=y.split(":",1)[0],Y=y.split(":",2)[1].trim();e[w]=Y}else r+=c}),e.content=r}}else if(t=="title"&&typeof e.content=="string"){if(e.content.match(/^\s*\[/)||e.content.match(/^\s*<title>/))if(e.content.match(/^\s*\[/)){let n=e.content.split("]",1)[0];n=n.replace(/\s*\[/,""),e.title=n,e.content=e.content.replace(/^\s*\[[^\[\]]*\]/,"")}else{let n=e.content.split("</title>",1)[0];n=n.replace(/\s*<title>/,""),e.title=n,e.content=e.content.replace(/^\s*<title>.*?<\/title>/,"")}}else if(t=="label"&&typeof e.content=="string"){if(e.content.match(/^\s*(\\*)label{[^{}]*}/)){let n=e.content.replace(/^\s*(\\*)label{([^{}]*)}.*/s,"$2");n=j(n),e.id=n,e.content=e.content.replace(/^\s*(\\*)label{([^{}]*)}\s*/,"")}}else if(t=="statements"&&s.includes(o)){let n=[],r={};if(typeof e.content=="string")n=[{tag:"text",content:e.content}],r={tag:"statement",content:n},e.content=[r];else{let m=!1;if(e.content.forEach(c=>{c.tag=="statement"&&(m=!0)}),!m){let c="",y=0;for(y=0;y<e.content.length&&(c=e.content[y],!B.includes(c.tag));++y)n.push(c);r={tag:"statement",content:n};let w=e.content.slice(y);w.unshift(r),e.content=w}}}else if(t=="prefigure"&&s.includes(e.tag)){!("xmlns"in e)&&!("xmlattributes"in e&&e.xmlattributes.includes("xmlns"))&&(e.xmlns="https://prefigure.org");let n=[],r={};if(typeof e.content=="string"){const m=e.content;if(n=m,r={tag:"diagram",content:n},"dimensions"in e&&(r.dimensions=e.dimensions,delete e.dimensions),"margins"in e&&(r.margins=e.margins,delete e.margins),e.content=[r],"bbox"in e){let c={tag:"coordinates",bbox:e.bbox,content:m};delete e.bbox,r.content=[c]}}if(u!="image"){let m={...e};m.content=[...e.content],e={tag:"image",content:[m]},"width"in m&&(e.width=m.width,delete m.width)}}else if(t=="blockquotes"&&s.includes(e.tag)&&typeof e.content=="string"){if(e.content.match(/^\s*\+\+\+sTaRTbQ>/)){let n=e.content.replace(/^\s*\+\+\+sTaRTbQ>/,"");n=n.replace(/\n\s*>/g,`
`);let r=n.split(/\n\s*\n{1,}/),m=[];r.forEach((c,y)=>{m.push({tag:"p",content:c})}),e.content=m,e.tag="blockquote"}}else if(t=="substructure"&&s.includes(e.tag)&&typeof e.content=="string"){const n=T[e.tag],r=he(n),m=H(e.content,r);e.content=[...m]}else if(t=="clean up substructure"&&s.includes(e.tag)&&Array.isArray(e.content)){const n=e.tag;let r=[];e.content.forEach(m=>{T[n].includes(m.tag)?r.push(m):F.includes(m.tag)?e[m.tag]=m.content:m.tag=="text"&&m.content.match(/^\s*$/)&&"attributes"in m?"attributes"in e?e.attributes+=m.attributes:e.attributes=m.attributes:m.tag=="text"&&m.content.match(/^\s*$/)||(console.log("problem content",m),alert("problem content: see console.log"))}),e.content=[...r]}else if(t=="extraneous math"&&s.includes(e.tag)&&typeof e.content=="string")e.content=e.content.replace(/^\s*\+\+\+saMePaR/,"");else if(t=="gather li"&&s.includes(e.tag)&&typeof e.content=="object"){let n=[],r="",m=0,c=!1,y=[],w={};for(m=0;m<e.content.length;++m)r=e.content[m],!c&&r.tag!="li"?n.push(r):!c&&r.tag=="li"?(c=!0,y=[r],w.tag=r._parenttag):c&&r.tag=="li"?y.push(r):c&&r.tag!="li"&&(w.content=[...y],n.push({...w}),c=!1,w={},y=[],n.push(r));c&&(w.content=y,n.push({...w})),c=!1,y=[],w={},e.content=n}else if(t=="absorb math"&&(s.includes(e.tag)||e.tag==g)&&typeof e.content=="object"){let n=[],r="",m=0;for(m=0;m<e.content.length;++m){r=e.content[m];const c=n.length;P.includes(r.tag)?c==0?n.push({...r}):n[c-1].tag!="p"?n.push({...r}):typeof n[c-1].content=="string"?(n[c-1].content=[{tag:"text",content:n[c-1].content}],n[c-1].content.push({...r})):n[c-1].content.push({...r}):r.tag=="p"?typeof r.content=="string"&&r.content.match(/\s*\+\+\+saMePaR/)?(r.content=r.content.replace(/\s*\+\+\+saMePaR\s*/,""),n[c-1].content.push({tag:"text",content:r.content})):typeof r.content=="string"?n.push({...r}):r.content.length>0&&r.content[0].tag=="text"&&typeof r.content[0].content=="string"&&r.content[0].content.match(/\s*\+\+\+saMePaR/)?(r.content[0].content=r.content[0].content.replace(/\s*\+\+\+saMePaR\s*/,""),r.content.forEach(y=>{n[c-1].content.push(y)})):r.content.length>0&&n.push({...r}):n.push({...r})}e.content=[...n]}let a={...e};return a.content=h(a.content,t,l+1,i,s,a.tag,o),a}else{if(typeof e!="string"&&(console.log("what is it",e),alert("non-object non-string: ",e)),t=="do_nothing")return e+"X";if(t=="fonts"&&s.includes(o)){let a="";return a=e.replace(/\\('|"|\^|`|~|-|c|H|u|v) ?([a-zA-Z])/mg,be),a=a.replace(/\\('|"|\^|`|~|-|c|H|u|v){([a-zA-Z])}/mg,be),a}else if(t=="texlike"&&s.includes(o)){let a="";return a=e.replace(/([^-])\-\-([^-])/mg,"$1<mdash/>$2"),a=a.replace(/\bLaTeX\b/mg,"<latex/>"),a=a.replace(/\bTeX\b/mg,"<tex/>"),a=a.replace(/\bPreTeXt\b/mg,"<pretext/>"),a=a.replace(/([^\\])~/mg,"$1<nbsp/>"),a=a.replace(/\(\\(ref|eqref|cite){([^{}]+)}\)/g,function(n,r,m){return'<xref ref="'+j(m)+'"/>'}),a=a.replace(/\\(ref|eqref|cite){([^{}]+)}/g,function(n,r,m){return'<xref ref="'+j(m)+'"/>'}),a=a.replace(/\\(q|term|em|m|c|fn){([^{}]+)}/g,"<$1>$2</$1>"),a=a.replace(/\\(url|href){([^{}]+)}({|\[)([^{}\[\]]+)(\]|})/g,function(n,r,m,c,y){return'<url href="'+m+'">'+y+"</url>"}),a=a.replace(/\\(url|href){([^{}]+)}([^{]|$)/g,function(n,r,m){return'<url href="'+m+'"/>'}),a}else return e}return b},Z=function(e){return{left:"<"+e+">",right:"</"+e+">",tag:e}},Q=function(e){return{left:"<"+e+" ",right:"</"+e+">",tag:e}},U=function(e){return{left:"\\begin{"+e+"}",right:"\\end{"+e+"}",tag:e}},he=function(e){if(!Array.isArray(e))return e;let t=[];return e.forEach(l=>{t.push(Q(l)),t.push(Z(l)),t.push(U(l))}),t},$=function(e){return{begin_tag:"<"+e,end_tag:"</"+e+">",before_begin:`
`,after_begin:`>
`,before_end:`
`,after_end:`
`}},ze=function(e){return{begin_tag:"<"+e,end_tag:"</"+e+">",before_begin:"",after_begin:">",before_end:"",after_end:""}},A=[{left:"$$",right:"$$",tag:"smen"},{left:"\\[",right:"\\]",tag:"smen"}];qe.forEach(e=>{A.push({left:"\\begin{"+e[0]+"}",right:"\\end{"+e[0]+"}",tag:e[1]})}),A.push({left:"<md>",right:"</md>",tag:"md"}),A.push({left:"<me>",right:"</me>",tag:"me"}),A.push({left:"<mdn",right:"</mdn>",tag:"mdn"}),A.push({left:"<men",right:"</men>",tag:"men"});const L=[];let we=[...le,...me],V=[...we,...K];V.push("p"),V.push("statement"),we.forEach(e=>{L.push(Q(e)),L.push(Z(e)),L.push(U(e))}),ce.forEach(e=>{L.push(Q(e)),L.push(Z(e)),L.push(U(e))});let z=Array.from(L,({tag:e})=>e);z=[...new Set(z)];let k=[{left:"\\(",right:"\\)",tag:"sm"}];ae.forEach(e=>{k.push(Z(e))});const ve={begin_tag:"",end_tag:"",before_begin:"",after_begin:"",before_end:"",after_end:""},Ne={begin_tag:"BEGINTAG",end_tag:"ENDTAG",before_begin:"BB",after_begin:"AB",before_end:"BE",after_end:"AE"},d={text:ve,placeholder:ve,title:{begin_tag:"<title>",end_tag:"</title>",before_begin:`
`,after_begin:"",before_end:"",after_end:`
`}};ae.forEach(e=>{d[e]={begin_tag:"<"+e+">",end_tag:"</"+e+">",before_begin:"",after_begin:"",before_end:"",after_end:""}}),V.forEach(e=>{d[e]=$(e)}),ce.forEach(e=>{d[e]=$(e)}),_.forEach(e=>{d[e]=$(e)}),_e.forEach(e=>{d[e]=$(e)}),[...pe,...se,...ue].forEach(e=>{d[e]=$(e)}),d.ol={begin_tag:`<p>
<ol>`,end_tag:`</ol>
</p>`,before_begin:`
`,after_begin:`
`,before_end:`
`,after_end:`
`},d.ul={begin_tag:`<p>
<ul>`,end_tag:`</ul>
</p>`,before_begin:`
`,after_begin:`
`,before_end:`
`,after_end:`
`},d.enumerate=d.ol,d.itemize=d.ul,P.forEach(e=>{d[e]={begin_tag:`
<`+e,end_tag:"</"+e+">",before_begin:"",after_begin:`>
`,before_end:`
`,after_end:`
`}}),d.sm=ze("m"),d.smen=$("men"),d.image={begin_tag:"<image",end_tag:"</image>",before_begin:"",after_begin:`>
`,before_end:`
`,after_end:`
`},d.description={begin_tag:"<description>",end_tag:"</description>",before_begin:`
`,after_begin:"",before_end:"",after_end:`
`};function Ce(e,t="placeholder"){let l=Ze(e),i="";l.match(/^\s*<title>/)?(i=l.replace(/^\s*<title>(.*?)<\/title>.*/s,"$1"),l=l.replace(/^\s*<title>(.*?)<\/title>/,"")):l.match(/^\s*\[/)&&(i=l.replace(/^\s*\[([^\[\]]*)\].*/s,"$1"),l=l.replace(/^\s*\[([^\[\]]*)\]/,""));let o=l.replace(/([^\s])\\label({|\[|\()/g,`$1
\\label$2`).replace(/\n\s*\n\s*>/g,`

+++sTaRTbQ>`);o=o.replace(/(\$\$|\\end{equation}|\\end{align}|\\\]) *\n([^\n])/g,`$1
+++saMePaR$2`),o=o.replace(/(\/me>|\/md>|\/men>|\/mdn>) *\n *([^\n<])/g,`$1
+++saMePaR$2`),o=o.replace(/<p>\s*(<ol>|<ul>|<dl>)/g,"$1"),o=o.replace(/(<\/ol>|<\/ul>|<\/dl>)\s*<\/p>/g,"$1"),o=o.replace(/\s*\n+\s*\\item\s+/g,`

\\item `);let u=o.replace(/(<diagram)(.*?)(<\/diagram>)/sg,function(M,Le,W,N){const Ve=W.replace(/(<|<\/)definition(>)/g,"$1predefinition$2");return Le+Ve+N}),g=new RegExp("([^\\n])(\\n *("+F.join("|")+") *:)","g");u=u.replace(g,`$1
$2`);let b={tag:t,content:u};i&&(b.title=i);let p={...b};const a=15;for(let M=0;M<a;++M)f.forEach(W=>{p=v(p,W,0,M),fe.forEach(N=>{p=h(p,N[0],0,M,N[1])})});let n={...p};n=O(n,"all",z);let r={...n};r=h(r,"oneline environments",0,0,"all"),r=h(r,"attributes",0,0,"all"),fe.forEach(M=>{r=h(r,M[0],0,0,M[1])}),r=O(r,"all",z),r=h(r,"blockquotes",0,0,["p"]);let m={...r};m=h(m,"extract li",0,0,"all"),m=h(m,"clean up substructure",0,0,Ae);const c=v(m,k,0,a+1,"all",x),y=v(c,"spacelike",0,a+1,"all",x),w=v(y,k,0,a+1,"all",x),Y=v(w,k,0,a+1,"all",x),De=h(Y,"fonts",0,0,x),Se=h(De,"texlike",0,0,x);let X=v(Se,"spacelike",0,a+1,"all",x);X=v(X,k,0,a+1,"all",x),X=v(X,k,0,a+1,"all",x);const Ge=h(X,"extract li",0,0,["p"]),He=h(Ge,"gather li",0,0,E),Qe=h(He,"absorb math",0,0,E,"","",t);let Ue=h(Qe,"statements",0,0,$e),xe=h(Ue,"prefigure",0,0,["prefigure"]);return console.log("tmp5",xe),G(xe)}q.FlexTeXtConvert=Ce,Object.defineProperty(q,Symbol.toStringTag,{value:"Module"})});
